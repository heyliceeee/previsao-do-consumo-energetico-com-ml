Beginning AutoGluon training... Time limit = 600s
AutoGluon will save models to 'D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\XGBoost_lag\modelo'
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
GPU Count:          0
Memory Avail:       1.04 GB / 15.93 GB (6.5%)
Disk Space Avail:   690.48 GB / 931.46 GB (74.1%)
===================================================
Setting presets to: medium_quality

Fitting with arguments:
{'enable_ensemble': True,
 'eval_metric': WQL,
 'freq': 'h',
 'hyperparameters': {'DirectTabular': {'models': ['XGB']}},
 'known_covariates_names': ['Hour',
                            'TimeOfDay',
                            'Temperature',
                            'DayOfTheWeek',
                            'lag_168'],
 'num_val_windows': 1,
 'prediction_length': 24,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': True,
 'target': 'EnergyNormalized',
 'time_limit': 600,
 'verbosity': 2}

Provided train_data has 7824 rows, 1 time series. Median time series length is 7824 (min=7824, max=7824). 
Provided tuning_data has 7848 rows, 1 time series. Median time series length is 7848 (min=7848, max=7848). 
	Setting num_val_windows = 0 (disabling backtesting on train_data) because tuning_data is provided.

Provided data contains following columns:
	target: 'EnergyNormalized'
	known_covariates:
		categorical:        ['TimeOfDay', 'DayOfTheWeek']
		continuous (float): ['Hour', 'Temperature', 'lag_168']
	past_covariates:
		categorical:        ['Season']
		continuous (float): ['ActiveEnergy(kWh)', 'Day', 'Month', 'Year', 'IsWeekend', 'IsHoliday', ...]
	static_features:
		categorical:        []
		continuous (float): ['PopulationDensity']

AutoGluon will ignore following non-numeric/non-informative columns:
	ignored covariates:      ['Date']

To learn how to fix incorrectly inferred types, please see documentation for TimeSeriesPredictor.fit

AutoGluon will gauge predictive performance using evaluation metric: 'WQL'
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
===================================================

Starting training. Start time is 2025-05-23 10:08:20
Models that will be trained: ['DirectTabular']
Training timeseries model DirectTabular. Training for up to 593.0s of the 593.0s of remaining time.
	Time limit adjusted due to model hyperparameters: 592.98s -> 533.68s (ag.max_time_limit=None, ag.max_time_limit_ratio=0.9, ag.min_time_limit=0)
	103.40  s     = Training runtime
Training complete. Models trained: ['DirectTabular']
Total runtime: 110.40 s
Best model: DirectTabular
Model not specified in predict, will default to the model with the best validation score: DirectTabular
Beginning AutoGluon training... Time limit = 600s
AutoGluon will save models to 'D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\XT_lag\modelo'
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
GPU Count:          0
Memory Avail:       2.40 GB / 15.93 GB (15.1%)
Disk Space Avail:   690.41 GB / 931.46 GB (74.1%)
===================================================
Setting presets to: medium_quality

Fitting with arguments:
{'enable_ensemble': True,
 'eval_metric': WQL,
 'freq': 'h',
 'hyperparameters': {'DirectTabular': {'XT': {}, 'models': ['XT']}},
 'known_covariates_names': ['Hour',
                            'TimeOfDay',
                            'Temperature',
                            'DayOfTheWeek',
                            'lag_168'],
 'num_val_windows': 1,
 'prediction_length': 24,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': True,
 'target': 'EnergyNormalized',
 'time_limit': 600,
 'verbosity': 2}

Provided train_data has 7824 rows, 1 time series. Median time series length is 7824 (min=7824, max=7824). 
Provided tuning_data has 7848 rows, 1 time series. Median time series length is 7848 (min=7848, max=7848). 
	Setting num_val_windows = 0 (disabling backtesting on train_data) because tuning_data is provided.

Provided data contains following columns:
	target: 'EnergyNormalized'
	known_covariates:
		categorical:        ['TimeOfDay', 'DayOfTheWeek']
		continuous (float): ['Hour', 'Temperature', 'lag_168']
	past_covariates:
		categorical:        ['Season']
		continuous (float): ['ActiveEnergy(kWh)', 'Day', 'Month', 'Year', 'IsWeekend', 'IsHoliday', ...]
	static_features:
		categorical:        []
		continuous (float): ['PopulationDensity']

AutoGluon will ignore following non-numeric/non-informative columns:
	ignored covariates:      ['Date']

To learn how to fix incorrectly inferred types, please see documentation for TimeSeriesPredictor.fit

AutoGluon will gauge predictive performance using evaluation metric: 'WQL'
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
===================================================

Starting training. Start time is 2025-05-23 10:16:15
Models that will be trained: ['DirectTabular']
Training timeseries model DirectTabular. Training for up to 600.0s of the 600.0s of remaining time.
	84.44   s     = Training runtime
Training complete. Models trained: ['DirectTabular']
Total runtime: 84.46 s
Best model: DirectTabular
Model not specified in predict, will default to the model with the best validation score: DirectTabular
Model not specified in predict, will default to the model with the best validation score: DirectTabular
Model not specified in predict, will default to the model with the best validation score: DirectTabular
Beginning AutoGluon training... Time limit = 300s
AutoGluon will save models to 'D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\NARX_lag\modelo'
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
GPU Count:          0
Memory Avail:       2.86 GB / 15.93 GB (17.9%)
Disk Space Avail:   690.34 GB / 931.46 GB (74.1%)
===================================================
Setting presets to: medium_quality

Fitting with arguments:
{'enable_ensemble': True,
 'eval_metric': WQL,
 'freq': 'h',
 'hyperparameters': {'DirectTabular': {}},
 'known_covariates_names': ['Hour',
                            'TimeOfDay',
                            'Temperature',
                            'DayOfTheWeek',
                            'lag_168'],
 'num_val_windows': 1,
 'prediction_length': 24,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': True,
 'target': 'EnergyNormalized',
 'time_limit': 300,
 'verbosity': 2}

Provided train_data has 7824 rows, 1 time series. Median time series length is 7824 (min=7824, max=7824). 
Provided tuning_data has 7848 rows, 1 time series. Median time series length is 7848 (min=7848, max=7848). 
	Setting num_val_windows = 0 (disabling backtesting on train_data) because tuning_data is provided.

Provided data contains following columns:
	target: 'EnergyNormalized'
	known_covariates:
		categorical:        ['TimeOfDay', 'DayOfTheWeek']
		continuous (float): ['Hour', 'Temperature', 'lag_168']
	past_covariates:
		categorical:        ['Season']
		continuous (float): ['ActiveEnergy(kWh)', 'Day', 'Month', 'Year', 'IsWeekend', 'IsHoliday', ...]
	static_features:
		categorical:        []
		continuous (float): ['PopulationDensity']

AutoGluon will ignore following non-numeric/non-informative columns:
	ignored covariates:      ['Date']

To learn how to fix incorrectly inferred types, please see documentation for TimeSeriesPredictor.fit

AutoGluon will gauge predictive performance using evaluation metric: 'WQL'
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
===================================================

Starting training. Start time is 2025-05-23 10:24:33
Models that will be trained: ['DirectTabular']
Training timeseries model DirectTabular. Training for up to 300.0s of the 300.0s of remaining time.
	89.01   s     = Training runtime
Training complete. Models trained: ['DirectTabular']
Total runtime: 89.02 s
Best model: DirectTabular
Model not specified in predict, will default to the model with the best validation score: DirectTabular
Beginning AutoGluon training... Time limit = 3200s
AutoGluon will save models to 'D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\AutoML_lag\modelo'
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
GPU Count:          0
Memory Avail:       2.70 GB / 15.93 GB (16.9%)
Disk Space Avail:   690.27 GB / 931.46 GB (74.1%)
===================================================
Setting presets to: best

Fitting with arguments:
{'enable_ensemble': True,
 'eval_metric': WQL,
 'freq': 'h',
 'hyperparameters': 'default',
 'known_covariates_names': ['Hour',
                            'TimeOfDay',
                            'Temperature',
                            'DayOfTheWeek',
                            'lag_168'],
 'num_val_windows': 2,
 'prediction_length': 24,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'EnergyNormalized',
 'time_limit': 3200,
 'verbosity': 2}

Provided train_data has 7824 rows, 1 time series. Median time series length is 7824 (min=7824, max=7824). 
Provided tuning_data has 7848 rows, 1 time series. Median time series length is 7848 (min=7848, max=7848). 
	Setting num_val_windows = 0 (disabling backtesting on train_data) because tuning_data is provided.

Provided data contains following columns:
	target: 'EnergyNormalized'
	known_covariates:
		categorical:        ['TimeOfDay', 'DayOfTheWeek']
		continuous (float): ['Hour', 'Temperature', 'lag_168']
	past_covariates:
		categorical:        ['Season']
		continuous (float): ['ActiveEnergy(kWh)', 'Day', 'Month', 'Year', 'IsWeekend', 'IsHoliday', ...]
	static_features:
		categorical:        []
		continuous (float): ['PopulationDensity']

AutoGluon will ignore following non-numeric/non-informative columns:
	ignored covariates:      ['Date']

To learn how to fix incorrectly inferred types, please see documentation for TimeSeriesPredictor.fit

AutoGluon will gauge predictive performance using evaluation metric: 'WQL'
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
===================================================

Starting training. Start time is 2025-05-23 10:30:49
Models that will be trained: ['SeasonalNaive', 'RecursiveTabular', 'DirectTabular', 'NPTS', 'DynamicOptimizedTheta', 'AutoETS', 'ChronosZeroShot[bolt_base]', 'ChronosFineTuned[bolt_small]', 'TemporalFusionTransformer', 'DeepAR', 'PatchTST', 'TiDE']
Training timeseries model SeasonalNaive. Training for up to 246.2s of the 3200.0s of remaining time.
	Time limit exceeded... Skipping SeasonalNaive.
Training timeseries model RecursiveTabular. Training for up to 266.6s of the 3199.6s of remaining time.
	-0.2035       = Validation score (-WQL)
	1.60    s     = Training runtime
	1.57    s     = Validation (prediction) runtime
Training timeseries model DirectTabular. Training for up to 290.6s of the 3196.4s of remaining time.
	-0.0436       = Validation score (-WQL)
	85.86   s     = Training runtime
	0.53    s     = Validation (prediction) runtime
Training timeseries model NPTS. Training for up to 311.0s of the 3110.0s of remaining time.
	Time limit exceeded... Skipping NPTS.
Training timeseries model DynamicOptimizedTheta. Training for up to 345.5s of the 3109.8s of remaining time.
	Time limit exceeded... Skipping DynamicOptimizedTheta.
Training timeseries model AutoETS. Training for up to 388.7s of the 3109.6s of remaining time.
	Time limit exceeded... Skipping AutoETS.
Training timeseries model ChronosZeroShot[bolt_base]. Training for up to 444.2s of the 3109.4s of remaining time.
	-0.0460       = Validation score (-WQL)
	3.42    s     = Training runtime
	4.08    s     = Validation (prediction) runtime
Training timeseries model ChronosFineTuned[bolt_small]. Training for up to 517.0s of the 3101.8s of remaining time.
	Fine-tuning on the CPU detected. We recommend using a GPU for faster fine-tuning of Chronos.
	Warning: Exception caused ChronosFineTuned[bolt_small] to fail during training... Skipping this model.
	TrainingArguments.__init__() got an unexpected keyword argument 'evaluation_strategy'
Training timeseries model TemporalFusionTransformer. Training for up to 616.9s of the 3067.8s of remaining time.
	Warning: Exception caused TemporalFusionTransformer to fail during training... Skipping this model.
	name 'exit' is not defined
Training timeseries model DeepAR. Training for up to 764.3s of the 2893.0s of remaining time.
	Warning: Exception caused DeepAR to fail during training... Skipping this model.
	name 'exit' is not defined
Training timeseries model PatchTST. Training for up to 1145.4s of the 2890.8s of remaining time.
	Warning: Exception caused PatchTST to fail during training... Skipping this model.
	name 'exit' is not defined
Training timeseries model TiDE. Training for up to 2290.5s of the 2890.5s of remaining time.
	-0.0322       = Validation score (-WQL)
	375.67  s     = Training runtime
	0.07    s     = Validation (prediction) runtime
Fitting simple weighted ensemble.
	Ensemble weights: {'DirectTabular': 0.56, 'RecursiveTabular': 0.11, 'TiDE': 0.32}
	-0.0239       = Validation score (-WQL)
	0.29    s     = Training runtime
	2.18    s     = Validation (prediction) runtime
Training complete. Models trained: ['RecursiveTabular', 'DirectTabular', 'ChronosZeroShot[bolt_base]', 'TiDE', 'WeightedEnsemble']
Total runtime: 685.54 s
Best model: WeightedEnsemble
Best model score: -0.0239
