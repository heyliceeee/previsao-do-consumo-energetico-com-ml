Warning: path already exists! This predictor may overwrite an existing predictor! path="predicts/NARX/modelo"
Warning: path already exists! This predictor may overwrite an existing predictor! path="predicts/NARX/modelo"
Warning: path already exists! This predictor may overwrite an existing predictor! path="predicts/NARX/modelo"
Warning: path already exists! This predictor may overwrite an existing predictor! path="predicts/NARX/modelo"
Warning: path already exists! This predictor may overwrite an existing predictor! path="predicts/NARX/modelo"
Warning: path already exists! This predictor may overwrite an existing predictor! path="predicts/NARX/modelo"
Beginning AutoGluon training... Time limit = 300s
Beginning AutoGluon training... Time limit = 300s
Beginning AutoGluon training... Time limit = 300s
Beginning AutoGluon training... Time limit = 300s
AutoGluon will save models to 'D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\NARX\modelo'
AutoGluon will save models to 'D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\NARX\modelo'
AutoGluon will save models to 'D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\NARX\modelo'
AutoGluon will save models to 'D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\NARX\modelo'
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
GPU Count:          0
Memory Avail:       6.83 GB / 15.93 GB (42.9%)
Disk Space Avail:   698.62 GB / 931.46 GB (75.0%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
GPU Count:          0
Memory Avail:       6.83 GB / 15.93 GB (42.9%)
Disk Space Avail:   698.62 GB / 931.46 GB (75.0%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
GPU Count:          0
Memory Avail:       6.83 GB / 15.93 GB (42.9%)
Disk Space Avail:   698.62 GB / 931.46 GB (75.0%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
GPU Count:          0
Memory Avail:       6.83 GB / 15.93 GB (42.9%)
Disk Space Avail:   698.62 GB / 931.46 GB (75.0%)
===================================================
Setting presets to: medium_quality
Setting presets to: medium_quality
Setting presets to: medium_quality
Setting presets to: medium_quality

Fitting with arguments:

Fitting with arguments:

Fitting with arguments:

Fitting with arguments:
{'enable_ensemble': True,
 'eval_metric': WQL,
 'freq': 'h',
 'hyperparameters': {'DirectTabular': {}},
 'known_covariates_names': ['Hour', 'TimeOfDay', 'Temperature', 'DayOfTheWeek'],
 'num_val_windows': 1,
 'prediction_length': 24,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': True,
 'target': 'EnergyNormalized',
 'time_limit': 300,
 'verbosity': 2}

{'enable_ensemble': True,
 'eval_metric': WQL,
 'freq': 'h',
 'hyperparameters': {'DirectTabular': {}},
 'known_covariates_names': ['Hour', 'TimeOfDay', 'Temperature', 'DayOfTheWeek'],
 'num_val_windows': 1,
 'prediction_length': 24,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': True,
 'target': 'EnergyNormalized',
 'time_limit': 300,
 'verbosity': 2}

{'enable_ensemble': True,
 'eval_metric': WQL,
 'freq': 'h',
 'hyperparameters': {'DirectTabular': {}},
 'known_covariates_names': ['Hour', 'TimeOfDay', 'Temperature', 'DayOfTheWeek'],
 'num_val_windows': 1,
 'prediction_length': 24,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': True,
 'target': 'EnergyNormalized',
 'time_limit': 300,
 'verbosity': 2}

{'enable_ensemble': True,
 'eval_metric': WQL,
 'freq': 'h',
 'hyperparameters': {'DirectTabular': {}},
 'known_covariates_names': ['Hour', 'TimeOfDay', 'Temperature', 'DayOfTheWeek'],
 'num_val_windows': 1,
 'prediction_length': 24,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': True,
 'target': 'EnergyNormalized',
 'time_limit': 300,
 'verbosity': 2}

Provided train_data has 7992 rows, 1 time series. Median time series length is 7992 (min=7992, max=7992). 
Provided train_data has 7992 rows, 1 time series. Median time series length is 7992 (min=7992, max=7992). 
Provided train_data has 7992 rows, 1 time series. Median time series length is 7992 (min=7992, max=7992). 
Provided train_data has 7992 rows, 1 time series. Median time series length is 7992 (min=7992, max=7992). 
Provided tuning_data has 8016 rows, 1 time series. Median time series length is 8016 (min=8016, max=8016). 
Provided tuning_data has 8016 rows, 1 time series. Median time series length is 8016 (min=8016, max=8016). 
Provided tuning_data has 8016 rows, 1 time series. Median time series length is 8016 (min=8016, max=8016). 
Provided tuning_data has 8016 rows, 1 time series. Median time series length is 8016 (min=8016, max=8016). 
	Setting num_val_windows = 0 (disabling backtesting on train_data) because tuning_data is provided.
	Setting num_val_windows = 0 (disabling backtesting on train_data) because tuning_data is provided.
	Setting num_val_windows = 0 (disabling backtesting on train_data) because tuning_data is provided.
	Setting num_val_windows = 0 (disabling backtesting on train_data) because tuning_data is provided.

Provided data contains following columns:

Provided data contains following columns:

Provided data contains following columns:

Provided data contains following columns:
	target: 'EnergyNormalized'
	target: 'EnergyNormalized'
	target: 'EnergyNormalized'
	target: 'EnergyNormalized'
	known_covariates:
	known_covariates:
	known_covariates:
	known_covariates:
		categorical:        ['TimeOfDay', 'DayOfTheWeek']
		categorical:        ['TimeOfDay', 'DayOfTheWeek']
		categorical:        ['TimeOfDay', 'DayOfTheWeek']
		categorical:        ['TimeOfDay', 'DayOfTheWeek']
		continuous (float): ['Hour', 'Temperature']
		continuous (float): ['Hour', 'Temperature']
		continuous (float): ['Hour', 'Temperature']
		continuous (float): ['Hour', 'Temperature']
	past_covariates:
	past_covariates:
	past_covariates:
	past_covariates:
		categorical:        ['Season']
		categorical:        ['Season']
		categorical:        ['Season']
		categorical:        ['Season']
		continuous (float): ['ActiveEnergy(kWh)', 'Day', 'Month', 'Year', 'IsWeekend', 'IsHoliday', ...]
		continuous (float): ['ActiveEnergy(kWh)', 'Day', 'Month', 'Year', 'IsWeekend', 'IsHoliday', ...]
		continuous (float): ['ActiveEnergy(kWh)', 'Day', 'Month', 'Year', 'IsWeekend', 'IsHoliday', ...]
		continuous (float): ['ActiveEnergy(kWh)', 'Day', 'Month', 'Year', 'IsWeekend', 'IsHoliday', ...]
	static_features:
	static_features:
	static_features:
	static_features:
		categorical:        []
		categorical:        []
		categorical:        []
		categorical:        []
		continuous (float): ['PopulationDensity']
		continuous (float): ['PopulationDensity']
		continuous (float): ['PopulationDensity']
		continuous (float): ['PopulationDensity']

AutoGluon will ignore following non-numeric/non-informative columns:

AutoGluon will ignore following non-numeric/non-informative columns:

AutoGluon will ignore following non-numeric/non-informative columns:

AutoGluon will ignore following non-numeric/non-informative columns:
	ignored covariates:      ['Date']
	ignored covariates:      ['Date']
	ignored covariates:      ['Date']
	ignored covariates:      ['Date']

To learn how to fix incorrectly inferred types, please see documentation for TimeSeriesPredictor.fit

To learn how to fix incorrectly inferred types, please see documentation for TimeSeriesPredictor.fit

To learn how to fix incorrectly inferred types, please see documentation for TimeSeriesPredictor.fit

To learn how to fix incorrectly inferred types, please see documentation for TimeSeriesPredictor.fit

AutoGluon will gauge predictive performance using evaluation metric: 'WQL'

AutoGluon will gauge predictive performance using evaluation metric: 'WQL'

AutoGluon will gauge predictive performance using evaluation metric: 'WQL'

AutoGluon will gauge predictive performance using evaluation metric: 'WQL'
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
===================================================
===================================================
===================================================
===================================================

Starting training. Start time is 2025-05-05 10:12:32

Starting training. Start time is 2025-05-05 10:12:32

Starting training. Start time is 2025-05-05 10:12:32

Starting training. Start time is 2025-05-05 10:12:32
Models that will be trained: ['DirectTabular']
Models that will be trained: ['DirectTabular']
Models that will be trained: ['DirectTabular']
Models that will be trained: ['DirectTabular']
Training timeseries model DirectTabular. Training for up to 296.0s of the 296.0s of remaining time.
Training timeseries model DirectTabular. Training for up to 296.0s of the 296.0s of remaining time.
Training timeseries model DirectTabular. Training for up to 296.0s of the 296.0s of remaining time.
Training timeseries model DirectTabular. Training for up to 296.0s of the 296.0s of remaining time.
	Time limit adjusted due to model hyperparameters: 295.99s -> 266.39s (ag.max_time_limit=None, ag.max_time_limit_ratio=0.9, ag.min_time_limit=0)
	Time limit adjusted due to model hyperparameters: 295.99s -> 266.39s (ag.max_time_limit=None, ag.max_time_limit_ratio=0.9, ag.min_time_limit=0)
	Time limit adjusted due to model hyperparameters: 295.99s -> 266.39s (ag.max_time_limit=None, ag.max_time_limit_ratio=0.9, ag.min_time_limit=0)
	Time limit adjusted due to model hyperparameters: 295.99s -> 266.39s (ag.max_time_limit=None, ag.max_time_limit_ratio=0.9, ag.min_time_limit=0)
	61.32   s     = Training runtime
	61.32   s     = Training runtime
	61.32   s     = Training runtime
	61.32   s     = Training runtime
Training complete. Models trained: ['DirectTabular']
Training complete. Models trained: ['DirectTabular']
Training complete. Models trained: ['DirectTabular']
Training complete. Models trained: ['DirectTabular']
Total runtime: 65.39 s
Total runtime: 65.39 s
Total runtime: 65.39 s
Total runtime: 65.39 s
Best model: DirectTabular
Best model: DirectTabular
Best model: DirectTabular
Best model: DirectTabular
Beginning AutoGluon training... Time limit = 300s
Beginning AutoGluon training... Time limit = 300s
Beginning AutoGluon training... Time limit = 300s
Beginning AutoGluon training... Time limit = 300s
Beginning AutoGluon training... Time limit = 300s
AutoGluon will save models to 'D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\NARX\modelo'
AutoGluon will save models to 'D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\NARX\modelo'
AutoGluon will save models to 'D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\NARX\modelo'
AutoGluon will save models to 'D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\NARX\modelo'
AutoGluon will save models to 'D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\NARX\modelo'
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
GPU Count:          0
Memory Avail:       6.44 GB / 15.93 GB (40.5%)
Disk Space Avail:   698.56 GB / 931.46 GB (75.0%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
GPU Count:          0
Memory Avail:       6.44 GB / 15.93 GB (40.5%)
Disk Space Avail:   698.56 GB / 931.46 GB (75.0%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
GPU Count:          0
Memory Avail:       6.44 GB / 15.93 GB (40.5%)
Disk Space Avail:   698.56 GB / 931.46 GB (75.0%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
GPU Count:          0
Memory Avail:       6.44 GB / 15.93 GB (40.5%)
Disk Space Avail:   698.56 GB / 931.46 GB (75.0%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
GPU Count:          0
Memory Avail:       6.44 GB / 15.93 GB (40.5%)
Disk Space Avail:   698.56 GB / 931.46 GB (75.0%)
===================================================
Setting presets to: medium_quality
Setting presets to: medium_quality
Setting presets to: medium_quality
Setting presets to: medium_quality
Setting presets to: medium_quality

Fitting with arguments:

Fitting with arguments:

Fitting with arguments:

Fitting with arguments:

Fitting with arguments:
{'enable_ensemble': True,
 'eval_metric': WQL,
 'freq': 'h',
 'hyperparameters': {'DirectTabular': {}},
 'known_covariates_names': ['Hour', 'TimeOfDay', 'Temperature', 'DayOfTheWeek'],
 'num_val_windows': 1,
 'prediction_length': 24,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': True,
 'target': 'EnergyNormalized',
 'time_limit': 300,
 'verbosity': 2}

{'enable_ensemble': True,
 'eval_metric': WQL,
 'freq': 'h',
 'hyperparameters': {'DirectTabular': {}},
 'known_covariates_names': ['Hour', 'TimeOfDay', 'Temperature', 'DayOfTheWeek'],
 'num_val_windows': 1,
 'prediction_length': 24,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': True,
 'target': 'EnergyNormalized',
 'time_limit': 300,
 'verbosity': 2}

{'enable_ensemble': True,
 'eval_metric': WQL,
 'freq': 'h',
 'hyperparameters': {'DirectTabular': {}},
 'known_covariates_names': ['Hour', 'TimeOfDay', 'Temperature', 'DayOfTheWeek'],
 'num_val_windows': 1,
 'prediction_length': 24,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': True,
 'target': 'EnergyNormalized',
 'time_limit': 300,
 'verbosity': 2}

{'enable_ensemble': True,
 'eval_metric': WQL,
 'freq': 'h',
 'hyperparameters': {'DirectTabular': {}},
 'known_covariates_names': ['Hour', 'TimeOfDay', 'Temperature', 'DayOfTheWeek'],
 'num_val_windows': 1,
 'prediction_length': 24,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': True,
 'target': 'EnergyNormalized',
 'time_limit': 300,
 'verbosity': 2}

{'enable_ensemble': True,
 'eval_metric': WQL,
 'freq': 'h',
 'hyperparameters': {'DirectTabular': {}},
 'known_covariates_names': ['Hour', 'TimeOfDay', 'Temperature', 'DayOfTheWeek'],
 'num_val_windows': 1,
 'prediction_length': 24,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': True,
 'target': 'EnergyNormalized',
 'time_limit': 300,
 'verbosity': 2}

Provided train_data has 7992 rows, 1 time series. Median time series length is 7992 (min=7992, max=7992). 
Provided train_data has 7992 rows, 1 time series. Median time series length is 7992 (min=7992, max=7992). 
Provided train_data has 7992 rows, 1 time series. Median time series length is 7992 (min=7992, max=7992). 
Provided train_data has 7992 rows, 1 time series. Median time series length is 7992 (min=7992, max=7992). 
Provided train_data has 7992 rows, 1 time series. Median time series length is 7992 (min=7992, max=7992). 
Provided tuning_data has 8016 rows, 1 time series. Median time series length is 8016 (min=8016, max=8016). 
Provided tuning_data has 8016 rows, 1 time series. Median time series length is 8016 (min=8016, max=8016). 
Provided tuning_data has 8016 rows, 1 time series. Median time series length is 8016 (min=8016, max=8016). 
Provided tuning_data has 8016 rows, 1 time series. Median time series length is 8016 (min=8016, max=8016). 
Provided tuning_data has 8016 rows, 1 time series. Median time series length is 8016 (min=8016, max=8016). 
	Setting num_val_windows = 0 (disabling backtesting on train_data) because tuning_data is provided.
	Setting num_val_windows = 0 (disabling backtesting on train_data) because tuning_data is provided.
	Setting num_val_windows = 0 (disabling backtesting on train_data) because tuning_data is provided.
	Setting num_val_windows = 0 (disabling backtesting on train_data) because tuning_data is provided.
	Setting num_val_windows = 0 (disabling backtesting on train_data) because tuning_data is provided.

Provided data contains following columns:

Provided data contains following columns:

Provided data contains following columns:

Provided data contains following columns:

Provided data contains following columns:
	target: 'EnergyNormalized'
	target: 'EnergyNormalized'
	target: 'EnergyNormalized'
	target: 'EnergyNormalized'
	target: 'EnergyNormalized'
	known_covariates:
	known_covariates:
	known_covariates:
	known_covariates:
	known_covariates:
		categorical:        ['TimeOfDay', 'DayOfTheWeek']
		categorical:        ['TimeOfDay', 'DayOfTheWeek']
		categorical:        ['TimeOfDay', 'DayOfTheWeek']
		categorical:        ['TimeOfDay', 'DayOfTheWeek']
		categorical:        ['TimeOfDay', 'DayOfTheWeek']
		continuous (float): ['Hour', 'Temperature']
		continuous (float): ['Hour', 'Temperature']
		continuous (float): ['Hour', 'Temperature']
		continuous (float): ['Hour', 'Temperature']
		continuous (float): ['Hour', 'Temperature']
	past_covariates:
	past_covariates:
	past_covariates:
	past_covariates:
	past_covariates:
		categorical:        ['Season']
		categorical:        ['Season']
		categorical:        ['Season']
		categorical:        ['Season']
		categorical:        ['Season']
		continuous (float): ['ActiveEnergy(kWh)', 'Day', 'Month', 'Year', 'IsWeekend', 'IsHoliday', ...]
		continuous (float): ['ActiveEnergy(kWh)', 'Day', 'Month', 'Year', 'IsWeekend', 'IsHoliday', ...]
		continuous (float): ['ActiveEnergy(kWh)', 'Day', 'Month', 'Year', 'IsWeekend', 'IsHoliday', ...]
		continuous (float): ['ActiveEnergy(kWh)', 'Day', 'Month', 'Year', 'IsWeekend', 'IsHoliday', ...]
		continuous (float): ['ActiveEnergy(kWh)', 'Day', 'Month', 'Year', 'IsWeekend', 'IsHoliday', ...]
	static_features:
	static_features:
	static_features:
	static_features:
	static_features:
		categorical:        []
		categorical:        []
		categorical:        []
		categorical:        []
		categorical:        []
		continuous (float): ['PopulationDensity']
		continuous (float): ['PopulationDensity']
		continuous (float): ['PopulationDensity']
		continuous (float): ['PopulationDensity']
		continuous (float): ['PopulationDensity']

AutoGluon will ignore following non-numeric/non-informative columns:

AutoGluon will ignore following non-numeric/non-informative columns:

AutoGluon will ignore following non-numeric/non-informative columns:

AutoGluon will ignore following non-numeric/non-informative columns:

AutoGluon will ignore following non-numeric/non-informative columns:
	ignored covariates:      ['Date']
	ignored covariates:      ['Date']
	ignored covariates:      ['Date']
	ignored covariates:      ['Date']
	ignored covariates:      ['Date']

To learn how to fix incorrectly inferred types, please see documentation for TimeSeriesPredictor.fit

To learn how to fix incorrectly inferred types, please see documentation for TimeSeriesPredictor.fit

To learn how to fix incorrectly inferred types, please see documentation for TimeSeriesPredictor.fit

To learn how to fix incorrectly inferred types, please see documentation for TimeSeriesPredictor.fit

To learn how to fix incorrectly inferred types, please see documentation for TimeSeriesPredictor.fit

AutoGluon will gauge predictive performance using evaluation metric: 'WQL'

AutoGluon will gauge predictive performance using evaluation metric: 'WQL'

AutoGluon will gauge predictive performance using evaluation metric: 'WQL'

AutoGluon will gauge predictive performance using evaluation metric: 'WQL'

AutoGluon will gauge predictive performance using evaluation metric: 'WQL'
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
===================================================
===================================================
===================================================
===================================================
===================================================

Starting training. Start time is 2025-05-05 10:21:41

Starting training. Start time is 2025-05-05 10:21:41

Starting training. Start time is 2025-05-05 10:21:41

Starting training. Start time is 2025-05-05 10:21:41

Starting training. Start time is 2025-05-05 10:21:41
Models that will be trained: ['DirectTabular']
Models that will be trained: ['DirectTabular']
Models that will be trained: ['DirectTabular']
Models that will be trained: ['DirectTabular']
Models that will be trained: ['DirectTabular']
Training timeseries model DirectTabular. Training for up to 300.0s of the 300.0s of remaining time.
Training timeseries model DirectTabular. Training for up to 300.0s of the 300.0s of remaining time.
Training timeseries model DirectTabular. Training for up to 300.0s of the 300.0s of remaining time.
Training timeseries model DirectTabular. Training for up to 300.0s of the 300.0s of remaining time.
Training timeseries model DirectTabular. Training for up to 300.0s of the 300.0s of remaining time.
	57.96   s     = Training runtime
	57.96   s     = Training runtime
	57.96   s     = Training runtime
	57.96   s     = Training runtime
	57.96   s     = Training runtime
Training complete. Models trained: ['DirectTabular']
Training complete. Models trained: ['DirectTabular']
Training complete. Models trained: ['DirectTabular']
Training complete. Models trained: ['DirectTabular']
Training complete. Models trained: ['DirectTabular']
Total runtime: 57.98 s
Total runtime: 57.98 s
Total runtime: 57.98 s
Total runtime: 57.98 s
Total runtime: 57.98 s
Best model: DirectTabular
Best model: DirectTabular
Best model: DirectTabular
Best model: DirectTabular
Best model: DirectTabular
Beginning AutoGluon training... Time limit = 300s
Beginning AutoGluon training... Time limit = 300s
Beginning AutoGluon training... Time limit = 300s
Beginning AutoGluon training... Time limit = 300s
Beginning AutoGluon training... Time limit = 300s
Beginning AutoGluon training... Time limit = 300s
AutoGluon will save models to 'D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\NARX\modelo'
AutoGluon will save models to 'D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\NARX\modelo'
AutoGluon will save models to 'D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\NARX\modelo'
AutoGluon will save models to 'D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\NARX\modelo'
AutoGluon will save models to 'D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\NARX\modelo'
AutoGluon will save models to 'D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\NARX\modelo'
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
GPU Count:          0
Memory Avail:       6.29 GB / 15.93 GB (39.5%)
Disk Space Avail:   698.56 GB / 931.46 GB (75.0%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
GPU Count:          0
Memory Avail:       6.29 GB / 15.93 GB (39.5%)
Disk Space Avail:   698.56 GB / 931.46 GB (75.0%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
GPU Count:          0
Memory Avail:       6.29 GB / 15.93 GB (39.5%)
Disk Space Avail:   698.56 GB / 931.46 GB (75.0%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
GPU Count:          0
Memory Avail:       6.29 GB / 15.93 GB (39.5%)
Disk Space Avail:   698.56 GB / 931.46 GB (75.0%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
GPU Count:          0
Memory Avail:       6.29 GB / 15.93 GB (39.5%)
Disk Space Avail:   698.56 GB / 931.46 GB (75.0%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
GPU Count:          0
Memory Avail:       6.29 GB / 15.93 GB (39.5%)
Disk Space Avail:   698.56 GB / 931.46 GB (75.0%)
===================================================
Setting presets to: medium_quality
Setting presets to: medium_quality
Setting presets to: medium_quality
Setting presets to: medium_quality
Setting presets to: medium_quality
Setting presets to: medium_quality

Fitting with arguments:

Fitting with arguments:

Fitting with arguments:

Fitting with arguments:

Fitting with arguments:

Fitting with arguments:
{'enable_ensemble': True,
 'eval_metric': WQL,
 'freq': 'h',
 'hyperparameters': {'DirectTabular': {}},
 'known_covariates_names': ['Hour',
                            'TimeOfDay',
                            'Temperature',
                            'DayOfTheWeek',
                            'lag_1',
                            'lag_24'],
 'num_val_windows': 1,
 'prediction_length': 24,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': True,
 'target': 'EnergyNormalized',
 'time_limit': 300,
 'verbosity': 2}

{'enable_ensemble': True,
 'eval_metric': WQL,
 'freq': 'h',
 'hyperparameters': {'DirectTabular': {}},
 'known_covariates_names': ['Hour',
                            'TimeOfDay',
                            'Temperature',
                            'DayOfTheWeek',
                            'lag_1',
                            'lag_24'],
 'num_val_windows': 1,
 'prediction_length': 24,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': True,
 'target': 'EnergyNormalized',
 'time_limit': 300,
 'verbosity': 2}

{'enable_ensemble': True,
 'eval_metric': WQL,
 'freq': 'h',
 'hyperparameters': {'DirectTabular': {}},
 'known_covariates_names': ['Hour',
                            'TimeOfDay',
                            'Temperature',
                            'DayOfTheWeek',
                            'lag_1',
                            'lag_24'],
 'num_val_windows': 1,
 'prediction_length': 24,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': True,
 'target': 'EnergyNormalized',
 'time_limit': 300,
 'verbosity': 2}

{'enable_ensemble': True,
 'eval_metric': WQL,
 'freq': 'h',
 'hyperparameters': {'DirectTabular': {}},
 'known_covariates_names': ['Hour',
                            'TimeOfDay',
                            'Temperature',
                            'DayOfTheWeek',
                            'lag_1',
                            'lag_24'],
 'num_val_windows': 1,
 'prediction_length': 24,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': True,
 'target': 'EnergyNormalized',
 'time_limit': 300,
 'verbosity': 2}

{'enable_ensemble': True,
 'eval_metric': WQL,
 'freq': 'h',
 'hyperparameters': {'DirectTabular': {}},
 'known_covariates_names': ['Hour',
                            'TimeOfDay',
                            'Temperature',
                            'DayOfTheWeek',
                            'lag_1',
                            'lag_24'],
 'num_val_windows': 1,
 'prediction_length': 24,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': True,
 'target': 'EnergyNormalized',
 'time_limit': 300,
 'verbosity': 2}

{'enable_ensemble': True,
 'eval_metric': WQL,
 'freq': 'h',
 'hyperparameters': {'DirectTabular': {}},
 'known_covariates_names': ['Hour',
                            'TimeOfDay',
                            'Temperature',
                            'DayOfTheWeek',
                            'lag_1',
                            'lag_24'],
 'num_val_windows': 1,
 'prediction_length': 24,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': True,
 'target': 'EnergyNormalized',
 'time_limit': 300,
 'verbosity': 2}

Provided train_data has 7968 rows, 1 time series. Median time series length is 7968 (min=7968, max=7968). 
Provided train_data has 7968 rows, 1 time series. Median time series length is 7968 (min=7968, max=7968). 
Provided train_data has 7968 rows, 1 time series. Median time series length is 7968 (min=7968, max=7968). 
Provided train_data has 7968 rows, 1 time series. Median time series length is 7968 (min=7968, max=7968). 
Provided train_data has 7968 rows, 1 time series. Median time series length is 7968 (min=7968, max=7968). 
Provided train_data has 7968 rows, 1 time series. Median time series length is 7968 (min=7968, max=7968). 
Provided tuning_data has 7992 rows, 1 time series. Median time series length is 7992 (min=7992, max=7992). 
Provided tuning_data has 7992 rows, 1 time series. Median time series length is 7992 (min=7992, max=7992). 
Provided tuning_data has 7992 rows, 1 time series. Median time series length is 7992 (min=7992, max=7992). 
Provided tuning_data has 7992 rows, 1 time series. Median time series length is 7992 (min=7992, max=7992). 
Provided tuning_data has 7992 rows, 1 time series. Median time series length is 7992 (min=7992, max=7992). 
Provided tuning_data has 7992 rows, 1 time series. Median time series length is 7992 (min=7992, max=7992). 
	Setting num_val_windows = 0 (disabling backtesting on train_data) because tuning_data is provided.
	Setting num_val_windows = 0 (disabling backtesting on train_data) because tuning_data is provided.
	Setting num_val_windows = 0 (disabling backtesting on train_data) because tuning_data is provided.
	Setting num_val_windows = 0 (disabling backtesting on train_data) because tuning_data is provided.
	Setting num_val_windows = 0 (disabling backtesting on train_data) because tuning_data is provided.
	Setting num_val_windows = 0 (disabling backtesting on train_data) because tuning_data is provided.

Provided data contains following columns:

Provided data contains following columns:

Provided data contains following columns:

Provided data contains following columns:

Provided data contains following columns:

Provided data contains following columns:
	target: 'EnergyNormalized'
	target: 'EnergyNormalized'
	target: 'EnergyNormalized'
	target: 'EnergyNormalized'
	target: 'EnergyNormalized'
	target: 'EnergyNormalized'
	known_covariates:
	known_covariates:
	known_covariates:
	known_covariates:
	known_covariates:
	known_covariates:
		categorical:        ['TimeOfDay', 'DayOfTheWeek']
		categorical:        ['TimeOfDay', 'DayOfTheWeek']
		categorical:        ['TimeOfDay', 'DayOfTheWeek']
		categorical:        ['TimeOfDay', 'DayOfTheWeek']
		categorical:        ['TimeOfDay', 'DayOfTheWeek']
		categorical:        ['TimeOfDay', 'DayOfTheWeek']
		continuous (float): ['Hour', 'Temperature', 'lag_1', 'lag_24']
		continuous (float): ['Hour', 'Temperature', 'lag_1', 'lag_24']
		continuous (float): ['Hour', 'Temperature', 'lag_1', 'lag_24']
		continuous (float): ['Hour', 'Temperature', 'lag_1', 'lag_24']
		continuous (float): ['Hour', 'Temperature', 'lag_1', 'lag_24']
		continuous (float): ['Hour', 'Temperature', 'lag_1', 'lag_24']
	past_covariates:
	past_covariates:
	past_covariates:
	past_covariates:
	past_covariates:
	past_covariates:
		categorical:        ['Season']
		categorical:        ['Season']
		categorical:        ['Season']
		categorical:        ['Season']
		categorical:        ['Season']
		categorical:        ['Season']
		continuous (float): ['ActiveEnergy(kWh)', 'Day', 'Month', 'Year', 'IsWeekend', 'IsHoliday', ...]
		continuous (float): ['ActiveEnergy(kWh)', 'Day', 'Month', 'Year', 'IsWeekend', 'IsHoliday', ...]
		continuous (float): ['ActiveEnergy(kWh)', 'Day', 'Month', 'Year', 'IsWeekend', 'IsHoliday', ...]
		continuous (float): ['ActiveEnergy(kWh)', 'Day', 'Month', 'Year', 'IsWeekend', 'IsHoliday', ...]
		continuous (float): ['ActiveEnergy(kWh)', 'Day', 'Month', 'Year', 'IsWeekend', 'IsHoliday', ...]
		continuous (float): ['ActiveEnergy(kWh)', 'Day', 'Month', 'Year', 'IsWeekend', 'IsHoliday', ...]
	static_features:
	static_features:
	static_features:
	static_features:
	static_features:
	static_features:
		categorical:        []
		categorical:        []
		categorical:        []
		categorical:        []
		categorical:        []
		categorical:        []
		continuous (float): ['PopulationDensity']
		continuous (float): ['PopulationDensity']
		continuous (float): ['PopulationDensity']
		continuous (float): ['PopulationDensity']
		continuous (float): ['PopulationDensity']
		continuous (float): ['PopulationDensity']

AutoGluon will ignore following non-numeric/non-informative columns:

AutoGluon will ignore following non-numeric/non-informative columns:

AutoGluon will ignore following non-numeric/non-informative columns:

AutoGluon will ignore following non-numeric/non-informative columns:

AutoGluon will ignore following non-numeric/non-informative columns:

AutoGluon will ignore following non-numeric/non-informative columns:
	ignored covariates:      ['Date']
	ignored covariates:      ['Date']
	ignored covariates:      ['Date']
	ignored covariates:      ['Date']
	ignored covariates:      ['Date']
	ignored covariates:      ['Date']

To learn how to fix incorrectly inferred types, please see documentation for TimeSeriesPredictor.fit

To learn how to fix incorrectly inferred types, please see documentation for TimeSeriesPredictor.fit

To learn how to fix incorrectly inferred types, please see documentation for TimeSeriesPredictor.fit

To learn how to fix incorrectly inferred types, please see documentation for TimeSeriesPredictor.fit

To learn how to fix incorrectly inferred types, please see documentation for TimeSeriesPredictor.fit

To learn how to fix incorrectly inferred types, please see documentation for TimeSeriesPredictor.fit

AutoGluon will gauge predictive performance using evaluation metric: 'WQL'

AutoGluon will gauge predictive performance using evaluation metric: 'WQL'

AutoGluon will gauge predictive performance using evaluation metric: 'WQL'

AutoGluon will gauge predictive performance using evaluation metric: 'WQL'

AutoGluon will gauge predictive performance using evaluation metric: 'WQL'

AutoGluon will gauge predictive performance using evaluation metric: 'WQL'
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
===================================================
===================================================
===================================================
===================================================
===================================================
===================================================

Starting training. Start time is 2025-05-05 10:30:48

Starting training. Start time is 2025-05-05 10:30:48

Starting training. Start time is 2025-05-05 10:30:48

Starting training. Start time is 2025-05-05 10:30:48

Starting training. Start time is 2025-05-05 10:30:48

Starting training. Start time is 2025-05-05 10:30:48
Models that will be trained: ['DirectTabular']
Models that will be trained: ['DirectTabular']
Models that will be trained: ['DirectTabular']
Models that will be trained: ['DirectTabular']
Models that will be trained: ['DirectTabular']
Models that will be trained: ['DirectTabular']
Training timeseries model DirectTabular. Training for up to 300.0s of the 300.0s of remaining time.
Training timeseries model DirectTabular. Training for up to 300.0s of the 300.0s of remaining time.
Training timeseries model DirectTabular. Training for up to 300.0s of the 300.0s of remaining time.
Training timeseries model DirectTabular. Training for up to 300.0s of the 300.0s of remaining time.
Training timeseries model DirectTabular. Training for up to 300.0s of the 300.0s of remaining time.
Training timeseries model DirectTabular. Training for up to 300.0s of the 300.0s of remaining time.
	63.50   s     = Training runtime
	63.50   s     = Training runtime
	63.50   s     = Training runtime
	63.50   s     = Training runtime
	63.50   s     = Training runtime
	63.50   s     = Training runtime
Training complete. Models trained: ['DirectTabular']
Training complete. Models trained: ['DirectTabular']
Training complete. Models trained: ['DirectTabular']
Training complete. Models trained: ['DirectTabular']
Training complete. Models trained: ['DirectTabular']
Training complete. Models trained: ['DirectTabular']
Total runtime: 63.50 s
Total runtime: 63.50 s
Total runtime: 63.50 s
Total runtime: 63.50 s
Total runtime: 63.50 s
Total runtime: 63.50 s
Best model: DirectTabular
Best model: DirectTabular
Best model: DirectTabular
Best model: DirectTabular
Best model: DirectTabular
Best model: DirectTabular
Model not specified in predict, will default to the model with the best validation score: DirectTabular
Model not specified in predict, will default to the model with the best validation score: DirectTabular
Model not specified in predict, will default to the model with the best validation score: DirectTabular
Model not specified in predict, will default to the model with the best validation score: DirectTabular
Model not specified in predict, will default to the model with the best validation score: DirectTabular
Model not specified in predict, will default to the model with the best validation score: DirectTabular
Model not specified in predict, will default to the model with the best validation score: DirectTabular
Model not specified in predict, will default to the model with the best validation score: DirectTabular
Model not specified in predict, will default to the model with the best validation score: DirectTabular
Model not specified in predict, will default to the model with the best validation score: DirectTabular
Model not specified in predict, will default to the model with the best validation score: DirectTabular
Model not specified in predict, will default to the model with the best validation score: DirectTabular
Model not specified in predict, will default to the model with the best validation score: DirectTabular
Model not specified in predict, will default to the model with the best validation score: DirectTabular
Model not specified in predict, will default to the model with the best validation score: DirectTabular
Model not specified in predict, will default to the model with the best validation score: DirectTabular
Model not specified in predict, will default to the model with the best validation score: DirectTabular
Model not specified in predict, will default to the model with the best validation score: DirectTabular
Model not specified in predict, will default to the model with the best validation score: DirectTabular
Model not specified in predict, will default to the model with the best validation score: DirectTabular
Model not specified in predict, will default to the model with the best validation score: DirectTabular
Model not specified in predict, will default to the model with the best validation score: DirectTabular
Model not specified in predict, will default to the model with the best validation score: DirectTabular
Model not specified in predict, will default to the model with the best validation score: DirectTabular
Model not specified in predict, will default to the model with the best validation score: DirectTabular
Model not specified in predict, will default to the model with the best validation score: DirectTabular
Model not specified in predict, will default to the model with the best validation score: DirectTabular
Model not specified in predict, will default to the model with the best validation score: DirectTabular
Model not specified in predict, will default to the model with the best validation score: DirectTabular
Model not specified in predict, will default to the model with the best validation score: DirectTabular
Model not specified in predict, will default to the model with the best validation score: DirectTabular
Model not specified in predict, will default to the model with the best validation score: DirectTabular
Model not specified in predict, will default to the model with the best validation score: DirectTabular
Model not specified in predict, will default to the model with the best validation score: DirectTabular
Model not specified in predict, will default to the model with the best validation score: DirectTabular
Model not specified in predict, will default to the model with the best validation score: DirectTabular
Model not specified in predict, will default to the model with the best validation score: DirectTabular
Model not specified in predict, will default to the model with the best validation score: DirectTabular
Model not specified in predict, will default to the model with the best validation score: DirectTabular
Model not specified in predict, will default to the model with the best validation score: DirectTabular
Model not specified in predict, will default to the model with the best validation score: DirectTabular
Model not specified in predict, will default to the model with the best validation score: DirectTabular
Model not specified in predict, will default to the model with the best validation score: DirectTabular
Model not specified in predict, will default to the model with the best validation score: DirectTabular
Model not specified in predict, will default to the model with the best validation score: DirectTabular
Model not specified in predict, will default to the model with the best validation score: DirectTabular
Model not specified in predict, will default to the model with the best validation score: DirectTabular
Model not specified in predict, will default to the model with the best validation score: DirectTabular
Model not specified in predict, will default to the model with the best validation score: DirectTabular
Model not specified in predict, will default to the model with the best validation score: DirectTabular
Model not specified in predict, will default to the model with the best validation score: DirectTabular
Model not specified in predict, will default to the model with the best validation score: DirectTabular
Model not specified in predict, will default to the model with the best validation score: DirectTabular
Model not specified in predict, will default to the model with the best validation score: DirectTabular
Model not specified in predict, will default to the model with the best validation score: DirectTabular
Model not specified in predict, will default to the model with the best validation score: DirectTabular
Model not specified in predict, will default to the model with the best validation score: DirectTabular
Model not specified in predict, will default to the model with the best validation score: DirectTabular
Model not specified in predict, will default to the model with the best validation score: DirectTabular
Model not specified in predict, will default to the model with the best validation score: DirectTabular
Model not specified in predict, will default to the model with the best validation score: DirectTabular
Model not specified in predict, will default to the model with the best validation score: DirectTabular
Model not specified in predict, will default to the model with the best validation score: DirectTabular
Model not specified in predict, will default to the model with the best validation score: DirectTabular
Model not specified in predict, will default to the model with the best validation score: DirectTabular
Model not specified in predict, will default to the model with the best validation score: DirectTabular
Model not specified in predict, will default to the model with the best validation score: DirectTabular
Model not specified in predict, will default to the model with the best validation score: DirectTabular
Model not specified in predict, will default to the model with the best validation score: DirectTabular
Model not specified in predict, will default to the model with the best validation score: DirectTabular
Model not specified in predict, will default to the model with the best validation score: DirectTabular
Model not specified in predict, will default to the model with the best validation score: DirectTabular
Model not specified in predict, will default to the model with the best validation score: DirectTabular
Model not specified in predict, will default to the model with the best validation score: DirectTabular
Model not specified in predict, will default to the model with the best validation score: DirectTabular
Model not specified in predict, will default to the model with the best validation score: DirectTabular
Model not specified in predict, will default to the model with the best validation score: DirectTabular
Model not specified in predict, will default to the model with the best validation score: DirectTabular
