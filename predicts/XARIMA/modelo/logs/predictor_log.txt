Beginning AutoGluon training... Time limit = 300s
AutoGluon will save models to 'D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\XARIMA\modelo'
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
GPU Count:          0
Memory Avail:       1.73 GB / 15.93 GB (10.9%)
Disk Space Avail:   702.80 GB / 931.46 GB (75.5%)
===================================================
Setting presets to: medium_quality

Fitting with arguments:
{'enable_ensemble': True,
 'eval_metric': WQL,
 'freq': 'h',
 'hyperparameters': {'ARIMAModel': {'covariate_regressor': 'CAT',
                                    'target_scaler': 'standard'}},
 'known_covariates_names': ['Hour',
                            'DayOfTheWeek',
                            'Month',
                            'Season',
                            'IsWeekend',
                            'IsHoliday',
                            'Temperature'],
 'num_val_windows': 1,
 'prediction_length': 24,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'EnergyNormalized',
 'time_limit': 300,
 'verbosity': 2}

Provided train_data has 7992 rows, 1 time series. Median time series length is 7992 (min=7992, max=7992). 
Provided tuning_data has 8016 rows, 1 time series. Median time series length is 8016 (min=8016, max=8016). 
	Setting num_val_windows = 0 (disabling backtesting on train_data) because tuning_data is provided.

Provided data contains following columns:
	target: 'EnergyNormalized'
	known_covariates:
		categorical:        ['DayOfTheWeek', 'Season']
		continuous (float): ['Hour', 'Month', 'IsWeekend', 'IsHoliday', 'Temperature']
	past_covariates:
		categorical:        ['TimeOfDay']
		continuous (float): ['ActiveEnergy(kWh)', 'Day', 'Year', 'PopulationDensity', 'EnergyStandardized']
	static_features:
		categorical:        []
		continuous (float): ['PopulationDensity']

AutoGluon will ignore following non-numeric/non-informative columns:
	ignored covariates:      ['Date']

To learn how to fix incorrectly inferred types, please see documentation for TimeSeriesPredictor.fit

AutoGluon will gauge predictive performance using evaluation metric: 'WQL'
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
===================================================

Starting training. Start time is 2025-04-20 22:09:27
Models that will be trained: ['ARIMA']
Training timeseries model ARIMA. Training for up to 300.0s of the 300.0s of remaining time.
	-0.0808       = Validation score (-WQL)
	24.13   s     = Training runtime
	2.72    s     = Validation (prediction) runtime
Not fitting ensemble as only 1 model was trained.
Training complete. Models trained: ['ARIMA']
Total runtime: 26.87 s
Best model: ARIMA
Best model score: -0.0808
Model not specified in predict, will default to the model with the best validation score: ARIMA
Model not specified in predict, will default to the model with the best validation score: ARIMA
Loading predictor from path D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\XARIMA\modelo
Model not specified in predict, will default to the model with the best validation score: ARIMA
Model not specified in predict, will default to the model with the best validation score: ARIMA
Beginning AutoGluon training... Time limit = 300s
AutoGluon will save models to 'D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\XARIMA\modelo'
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
GPU Count:          0
Memory Avail:       4.48 GB / 15.93 GB (28.1%)
Disk Space Avail:   701.42 GB / 931.46 GB (75.3%)
===================================================
Setting presets to: medium_quality

Fitting with arguments:
{'enable_ensemble': True,
 'eval_metric': WQL,
 'freq': 'h',
 'hyperparameters': {'ARIMAModel': {'covariate_regressor': 'CAT',
                                    'target_scaler': 'standard'}},
 'known_covariates_names': ['Hour',
                            'Day',
                            'Month',
                            'Year',
                            'IsWeekend',
                            'TimeOfDay',
                            'DayOfTheWeek',
                            'Season',
                            'IsHoliday',
                            'PopulationDensity',
                            'Temperature'],
 'num_val_windows': 1,
 'prediction_length': 24,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'EnergyNormalized',
 'time_limit': 300,
 'verbosity': 2}

Provided train_data has 7992 rows, 1 time series. Median time series length is 7992 (min=7992, max=7992). 
Provided tuning_data has 8016 rows, 1 time series. Median time series length is 8016 (min=8016, max=8016). 
	Setting num_val_windows = 0 (disabling backtesting on train_data) because tuning_data is provided.

Provided data contains following columns:
	target: 'EnergyNormalized'
	known_covariates:
		categorical:        ['TimeOfDay', 'DayOfTheWeek', 'Season']
		continuous (float): ['Hour', 'Day', 'Month', 'Year', 'IsWeekend', 'IsHoliday', ...]
	past_covariates:
		categorical:        []
		continuous (float): ['ActiveEnergy(kWh)', 'EnergyStandardized']
	static_features:
		categorical:        []
		continuous (float): ['PopulationDensity']

AutoGluon will ignore following non-numeric/non-informative columns:
	ignored covariates:      ['Date']

To learn how to fix incorrectly inferred types, please see documentation for TimeSeriesPredictor.fit

AutoGluon will gauge predictive performance using evaluation metric: 'WQL'
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
===================================================

Starting training. Start time is 2025-04-23 10:18:31
Models that will be trained: ['ARIMA']
Training timeseries model ARIMA. Training for up to 299.9s of the 299.9s of remaining time.
	-0.0507       = Validation score (-WQL)
	20.80   s     = Training runtime
	8.27    s     = Validation (prediction) runtime
Not fitting ensemble as only 1 model was trained.
Training complete. Models trained: ['ARIMA']
Total runtime: 29.28 s
Best model: ARIMA
Best model score: -0.0507
Model not specified in predict, will default to the model with the best validation score: ARIMA
Model not specified in predict, will default to the model with the best validation score: ARIMA
Warning: path already exists! This predictor may overwrite an existing predictor! path="predicts/linearRegression/modelo"
Preset alias specified: 'medium' maps to 'medium_quality'.
Verbosity: 2 (Standard Logging)
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
Memory Avail:       4.64 GB / 15.93 GB (29.2%)
Disk Space Avail:   701.42 GB / 931.46 GB (75.3%)
===================================================
Presets specified: ['medium']
Beginning AutoGluon training ... Time limit = 300s
AutoGluon will save models to "D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo"
Train Data Rows:    7992
Train Data Columns: 11
Tuning Data Rows:    24
Tuning Data Columns: 11
Label Column:       EnergyNormalized
AutoGluon infers your prediction problem is: 'regression' (because dtype of label-column == float and many unique label-values observed).
	Label info (max, min, mean, stddev): (0.1517218738549846, 0.005890280091559903, 0.06812, 0.02939)
	If 'regression' is not the correct problem_type, please manually specify the problem_type parameter during Predictor init (You may specify problem_type as one of: ['binary', 'multiclass', 'regression', 'quantile'])
Problem Type:       regression
Preprocessing data ...
Using Feature Generators to preprocess the data ...
Fitting AutoMLPipelineFeatureGenerator...
	Available Memory:                    4755.56 MB
	Train Data (Original)  Memory Usage: 1.84 MB (0.0% of available memory)
	Inferring data type of each feature based on column values. Set feature_metadata_in to manually specify special dtypes of the features.
	Stage 1 Generators:
		Fitting AsTypeFeatureGenerator...
			Note: Converting 3 features to boolean dtype as they only contain 2 unique values.
	Stage 2 Generators:
		Fitting FillNaFeatureGenerator...
	Stage 3 Generators:
		Fitting IdentityFeatureGenerator...
		Fitting CategoryFeatureGenerator...
			Fitting CategoryMemoryMinimizeFeatureGenerator...
	Stage 4 Generators:
		Fitting DropUniqueFeatureGenerator...
	Stage 5 Generators:
		Fitting DropDuplicatesFeatureGenerator...
	Useless Original Features (Count: 1): ['PopulationDensity']
		These features carry no predictive signal and should be manually investigated.
		This is typically a feature which has the same value for all rows.
		These features do not need to be present at inference time.
	Types of features in original data (raw dtype, special dtypes):
		('float', [])  : 1 | ['Temperature']
		('int', [])    : 6 | ['Hour', 'Day', 'Month', 'Year', 'IsWeekend', ...]
		('object', []) : 3 | ['TimeOfDay', 'DayOfTheWeek', 'Season']
	Types of features in processed data (raw dtype, special dtypes):
		('category', [])  : 3 | ['TimeOfDay', 'DayOfTheWeek', 'Season']
		('float', [])     : 1 | ['Temperature']
		('int', [])       : 3 | ['Hour', 'Day', 'Month']
		('int', ['bool']) : 3 | ['Year', 'IsWeekend', 'IsHoliday']
	0.1s = Fit runtime
	10 features in original data used to generate 10 features in processed data.
	Train Data (Processed) Memory Usage: 0.20 MB (0.0% of available memory)
Data preprocessing and feature engineering runtime = 0.08s ...
AutoGluon will gauge predictive performance using evaluation metric: 'mean_absolute_error'
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	To change this, specify the eval_metric parameter of Predictor()
User-specified model hyperparameters to be fit:
{
	'LR': [{}],
}
Fitting 1 L1 models, fit_strategy="sequential" ...
Fitting model: LinearModel ... Training model for up to 299.92s of the 299.92s of remaining time.
	-0.0128	 = Validation score   (-mean_absolute_error)
	0.04s	 = Training   runtime
	0.0s	 = Validation runtime
Fitting model: WeightedEnsemble_L2 ... Training model for up to 299.92s of the 299.87s of remaining time.
	Ensemble Weights: {'LinearModel': 1.0}
	-0.0128	 = Validation score   (-mean_absolute_error)
	0.01s	 = Training   runtime
	0.0s	 = Validation runtime
AutoGluon training complete, total runtime = 0.2s ... Best model: WeightedEnsemble_L2 | Estimated inference throughput: 4352.8 rows/s (24 batch size)
TabularPredictor saved. To load, use: predictor = TabularPredictor.load("D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo")
TabularPredictor saved. To load, use: predictor = TabularPredictor.load("D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo")
These features in provided data are not utilized by the predictor and will be ignored: ['PopulationDensity']
Computing feature importance via permutation shuffling for 10 features using 24 rows with 5 shuffle sets...
	0.47s	= Expected runtime (0.09s per shuffle set)
	0.09s	= Actual runtime (Completed 5 of 5 shuffle sets)
Warning: path already exists! This predictor may overwrite an existing predictor! path="predicts/linearRegression/modelo"
Preset alias specified: 'medium' maps to 'medium_quality'.
Verbosity: 2 (Standard Logging)
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
Memory Avail:       4.42 GB / 15.93 GB (27.7%)
Disk Space Avail:   701.42 GB / 931.46 GB (75.3%)
===================================================
Presets specified: ['medium']
Beginning AutoGluon training ... Time limit = 300s
AutoGluon will save models to "D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo"
Train Data Rows:    7992
Train Data Columns: 2
Tuning Data Rows:    24
Tuning Data Columns: 2
Label Column:       EnergyNormalized
AutoGluon infers your prediction problem is: 'regression' (because dtype of label-column == float and many unique label-values observed).
	Label info (max, min, mean, stddev): (0.1517218738549846, 0.005890280091559903, 0.06812, 0.02939)
	If 'regression' is not the correct problem_type, please manually specify the problem_type parameter during Predictor init (You may specify problem_type as one of: ['binary', 'multiclass', 'regression', 'quantile'])
Problem Type:       regression
Preprocessing data ...
Using Feature Generators to preprocess the data ...
Fitting AutoMLPipelineFeatureGenerator...
	Available Memory:                    4525.10 MB
	Train Data (Original)  Memory Usage: 0.54 MB (0.0% of available memory)
	Inferring data type of each feature based on column values. Set feature_metadata_in to manually specify special dtypes of the features.
	Stage 1 Generators:
		Fitting AsTypeFeatureGenerator...
	Stage 2 Generators:
		Fitting FillNaFeatureGenerator...
	Stage 3 Generators:
		Fitting IdentityFeatureGenerator...
		Fitting CategoryFeatureGenerator...
			Fitting CategoryMemoryMinimizeFeatureGenerator...
	Stage 4 Generators:
		Fitting DropUniqueFeatureGenerator...
	Stage 5 Generators:
		Fitting DropDuplicatesFeatureGenerator...
	Types of features in original data (raw dtype, special dtypes):
		('int', [])    : 1 | ['Hour']
		('object', []) : 1 | ['TimeOfDay']
	Types of features in processed data (raw dtype, special dtypes):
		('category', []) : 1 | ['TimeOfDay']
		('int', [])      : 1 | ['Hour']
	0.0s = Fit runtime
	2 features in original data used to generate 2 features in processed data.
	Train Data (Processed) Memory Usage: 0.04 MB (0.0% of available memory)
Data preprocessing and feature engineering runtime = 0.06s ...
AutoGluon will gauge predictive performance using evaluation metric: 'mean_absolute_error'
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	To change this, specify the eval_metric parameter of Predictor()
User-specified model hyperparameters to be fit:
{
	'LR': [{}],
}
Fitting 1 L1 models, fit_strategy="sequential" ...
Fitting model: LinearModel ... Training model for up to 299.94s of the 299.94s of remaining time.
	-0.0197	 = Validation score   (-mean_absolute_error)
	0.02s	 = Training   runtime
	0.0s	 = Validation runtime
Fitting model: WeightedEnsemble_L2 ... Training model for up to 299.94s of the 299.92s of remaining time.
	Ensemble Weights: {'LinearModel': 1.0}
	-0.0197	 = Validation score   (-mean_absolute_error)
	0.01s	 = Training   runtime
	0.0s	 = Validation runtime
AutoGluon training complete, total runtime = 0.12s ... Best model: WeightedEnsemble_L2 | Estimated inference throughput: 11962.4 rows/s (24 batch size)
TabularPredictor saved. To load, use: predictor = TabularPredictor.load("D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo")
TabularPredictor saved. To load, use: predictor = TabularPredictor.load("D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo")
Warning: path already exists! This predictor may overwrite an existing predictor! path="predicts/XARIMA/modelo"
Beginning AutoGluon training... Time limit = 300s
Beginning AutoGluon training... Time limit = 300s
AutoGluon will save models to 'D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\XARIMA\modelo'
AutoGluon will save models to 'D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\XARIMA\modelo'
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
GPU Count:          0
Memory Avail:       4.40 GB / 15.93 GB (27.7%)
Disk Space Avail:   701.42 GB / 931.46 GB (75.3%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
GPU Count:          0
Memory Avail:       4.40 GB / 15.93 GB (27.7%)
Disk Space Avail:   701.42 GB / 931.46 GB (75.3%)
===================================================
Setting presets to: medium_quality
Setting presets to: medium_quality

Fitting with arguments:

Fitting with arguments:
{'enable_ensemble': True,
 'eval_metric': WQL,
 'freq': 'h',
 'hyperparameters': {'ARIMAModel': {'covariate_regressor': 'CAT',
                                    'target_scaler': 'standard'}},
 'known_covariates_names': ['Hour', 'TimeOfDay'],
 'num_val_windows': 1,
 'prediction_length': 24,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'EnergyNormalized',
 'time_limit': 300,
 'verbosity': 2}

{'enable_ensemble': True,
 'eval_metric': WQL,
 'freq': 'h',
 'hyperparameters': {'ARIMAModel': {'covariate_regressor': 'CAT',
                                    'target_scaler': 'standard'}},
 'known_covariates_names': ['Hour', 'TimeOfDay'],
 'num_val_windows': 1,
 'prediction_length': 24,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'EnergyNormalized',
 'time_limit': 300,
 'verbosity': 2}

Provided train_data has 7992 rows, 1 time series. Median time series length is 7992 (min=7992, max=7992). 
Provided train_data has 7992 rows, 1 time series. Median time series length is 7992 (min=7992, max=7992). 
Provided tuning_data has 8016 rows, 1 time series. Median time series length is 8016 (min=8016, max=8016). 
Provided tuning_data has 8016 rows, 1 time series. Median time series length is 8016 (min=8016, max=8016). 
	Setting num_val_windows = 0 (disabling backtesting on train_data) because tuning_data is provided.
	Setting num_val_windows = 0 (disabling backtesting on train_data) because tuning_data is provided.

Provided data contains following columns:

Provided data contains following columns:
	target: 'EnergyNormalized'
	target: 'EnergyNormalized'
	known_covariates:
	known_covariates:
		categorical:        ['TimeOfDay']
		categorical:        ['TimeOfDay']
		continuous (float): ['Hour']
		continuous (float): ['Hour']
	past_covariates:
	past_covariates:
		categorical:        ['DayOfTheWeek', 'Season']
		categorical:        ['DayOfTheWeek', 'Season']
		continuous (float): ['ActiveEnergy(kWh)', 'Day', 'Month', 'Year', 'IsWeekend', 'IsHoliday', ...]
		continuous (float): ['ActiveEnergy(kWh)', 'Day', 'Month', 'Year', 'IsWeekend', 'IsHoliday', ...]
	static_features:
	static_features:
		categorical:        []
		categorical:        []
		continuous (float): ['PopulationDensity']
		continuous (float): ['PopulationDensity']

AutoGluon will ignore following non-numeric/non-informative columns:

AutoGluon will ignore following non-numeric/non-informative columns:
	ignored covariates:      ['Date']
	ignored covariates:      ['Date']

To learn how to fix incorrectly inferred types, please see documentation for TimeSeriesPredictor.fit

To learn how to fix incorrectly inferred types, please see documentation for TimeSeriesPredictor.fit

AutoGluon will gauge predictive performance using evaluation metric: 'WQL'

AutoGluon will gauge predictive performance using evaluation metric: 'WQL'
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
===================================================
===================================================

Starting training. Start time is 2025-04-23 10:37:05

Starting training. Start time is 2025-04-23 10:37:05
Models that will be trained: ['ARIMA']
Models that will be trained: ['ARIMA']
Training timeseries model ARIMA. Training for up to 300.0s of the 300.0s of remaining time.
Training timeseries model ARIMA. Training for up to 300.0s of the 300.0s of remaining time.
Warning: No name was specified for model, defaulting to class name: CatBoostModel
Warning: No name was specified for model, defaulting to class name: CatBoostModel
No path specified. Models will be saved in: "AutogluonModels\ag-20250423_093705CatBoostModel"
No path specified. Models will be saved in: "AutogluonModels\ag-20250423_093705CatBoostModel"
Warning: No path was specified for model, defaulting to: D:\githubProjects\previsao-do-consumo-energetico-com-ml\AutogluonModels\ag-20250423_093705
Warning: No path was specified for model, defaulting to: D:\githubProjects\previsao-do-consumo-energetico-com-ml\AutogluonModels\ag-20250423_093705
	-0.2945       = Validation score (-WQL)
	-0.2945       = Validation score (-WQL)
	19.89   s     = Training runtime
	19.89   s     = Training runtime
	2.49    s     = Validation (prediction) runtime
	2.49    s     = Validation (prediction) runtime
Not fitting ensemble as only 1 model was trained.
Not fitting ensemble as only 1 model was trained.
Training complete. Models trained: ['ARIMA']
Training complete. Models trained: ['ARIMA']
Total runtime: 22.42 s
Total runtime: 22.42 s
Best model: ARIMA
Best model: ARIMA
Best model score: -0.2945
Best model score: -0.2945
Model not specified in predict, will default to the model with the best validation score: ARIMA
Model not specified in predict, will default to the model with the best validation score: ARIMA
Model not specified in predict, will default to the model with the best validation score: ARIMA
Model not specified in predict, will default to the model with the best validation score: ARIMA
Warning: path already exists! This predictor may overwrite an existing predictor! path="predicts/XARIMA/modelo"
Warning: path already exists! This predictor may overwrite an existing predictor! path="predicts/XARIMA/modelo"
Beginning AutoGluon training... Time limit = 300s
Beginning AutoGluon training... Time limit = 300s
Beginning AutoGluon training... Time limit = 300s
AutoGluon will save models to 'D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\XARIMA\modelo'
AutoGluon will save models to 'D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\XARIMA\modelo'
AutoGluon will save models to 'D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\XARIMA\modelo'
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
GPU Count:          0
Memory Avail:       4.38 GB / 15.93 GB (27.5%)
Disk Space Avail:   701.42 GB / 931.46 GB (75.3%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
GPU Count:          0
Memory Avail:       4.38 GB / 15.93 GB (27.5%)
Disk Space Avail:   701.42 GB / 931.46 GB (75.3%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
GPU Count:          0
Memory Avail:       4.38 GB / 15.93 GB (27.5%)
Disk Space Avail:   701.42 GB / 931.46 GB (75.3%)
===================================================
Setting presets to: medium_quality
Setting presets to: medium_quality
Setting presets to: medium_quality

Fitting with arguments:

Fitting with arguments:

Fitting with arguments:
{'enable_ensemble': True,
 'eval_metric': WQL,
 'freq': 'h',
 'hyperparameters': {'ARIMAModel': {'covariate_regressor': 'CAT',
                                    'target_scaler': 'standard'}},
 'known_covariates_names': ['Hour', 'TimeOfDay', 'Temperature'],
 'num_val_windows': 1,
 'prediction_length': 24,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'EnergyNormalized',
 'time_limit': 300,
 'verbosity': 2}

{'enable_ensemble': True,
 'eval_metric': WQL,
 'freq': 'h',
 'hyperparameters': {'ARIMAModel': {'covariate_regressor': 'CAT',
                                    'target_scaler': 'standard'}},
 'known_covariates_names': ['Hour', 'TimeOfDay', 'Temperature'],
 'num_val_windows': 1,
 'prediction_length': 24,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'EnergyNormalized',
 'time_limit': 300,
 'verbosity': 2}

{'enable_ensemble': True,
 'eval_metric': WQL,
 'freq': 'h',
 'hyperparameters': {'ARIMAModel': {'covariate_regressor': 'CAT',
                                    'target_scaler': 'standard'}},
 'known_covariates_names': ['Hour', 'TimeOfDay', 'Temperature'],
 'num_val_windows': 1,
 'prediction_length': 24,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'EnergyNormalized',
 'time_limit': 300,
 'verbosity': 2}

Provided train_data has 7992 rows, 1 time series. Median time series length is 7992 (min=7992, max=7992). 
Provided train_data has 7992 rows, 1 time series. Median time series length is 7992 (min=7992, max=7992). 
Provided train_data has 7992 rows, 1 time series. Median time series length is 7992 (min=7992, max=7992). 
Provided tuning_data has 8016 rows, 1 time series. Median time series length is 8016 (min=8016, max=8016). 
Provided tuning_data has 8016 rows, 1 time series. Median time series length is 8016 (min=8016, max=8016). 
Provided tuning_data has 8016 rows, 1 time series. Median time series length is 8016 (min=8016, max=8016). 
	Setting num_val_windows = 0 (disabling backtesting on train_data) because tuning_data is provided.
	Setting num_val_windows = 0 (disabling backtesting on train_data) because tuning_data is provided.
	Setting num_val_windows = 0 (disabling backtesting on train_data) because tuning_data is provided.

Provided data contains following columns:

Provided data contains following columns:

Provided data contains following columns:
	target: 'EnergyNormalized'
	target: 'EnergyNormalized'
	target: 'EnergyNormalized'
	known_covariates:
	known_covariates:
	known_covariates:
		categorical:        ['TimeOfDay']
		categorical:        ['TimeOfDay']
		categorical:        ['TimeOfDay']
		continuous (float): ['Hour', 'Temperature']
		continuous (float): ['Hour', 'Temperature']
		continuous (float): ['Hour', 'Temperature']
	past_covariates:
	past_covariates:
	past_covariates:
		categorical:        ['DayOfTheWeek', 'Season']
		categorical:        ['DayOfTheWeek', 'Season']
		categorical:        ['DayOfTheWeek', 'Season']
		continuous (float): ['ActiveEnergy(kWh)', 'Day', 'Month', 'Year', 'IsWeekend', 'IsHoliday', ...]
		continuous (float): ['ActiveEnergy(kWh)', 'Day', 'Month', 'Year', 'IsWeekend', 'IsHoliday', ...]
		continuous (float): ['ActiveEnergy(kWh)', 'Day', 'Month', 'Year', 'IsWeekend', 'IsHoliday', ...]
	static_features:
	static_features:
	static_features:
		categorical:        []
		categorical:        []
		categorical:        []
		continuous (float): ['PopulationDensity']
		continuous (float): ['PopulationDensity']
		continuous (float): ['PopulationDensity']

AutoGluon will ignore following non-numeric/non-informative columns:

AutoGluon will ignore following non-numeric/non-informative columns:

AutoGluon will ignore following non-numeric/non-informative columns:
	ignored covariates:      ['Date']
	ignored covariates:      ['Date']
	ignored covariates:      ['Date']

To learn how to fix incorrectly inferred types, please see documentation for TimeSeriesPredictor.fit

To learn how to fix incorrectly inferred types, please see documentation for TimeSeriesPredictor.fit

To learn how to fix incorrectly inferred types, please see documentation for TimeSeriesPredictor.fit

AutoGluon will gauge predictive performance using evaluation metric: 'WQL'

AutoGluon will gauge predictive performance using evaluation metric: 'WQL'

AutoGluon will gauge predictive performance using evaluation metric: 'WQL'
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
===================================================
===================================================
===================================================

Starting training. Start time is 2025-04-23 10:46:45

Starting training. Start time is 2025-04-23 10:46:45

Starting training. Start time is 2025-04-23 10:46:45
Models that will be trained: ['ARIMA']
Models that will be trained: ['ARIMA']
Models that will be trained: ['ARIMA']
Training timeseries model ARIMA. Training for up to 300.0s of the 300.0s of remaining time.
Training timeseries model ARIMA. Training for up to 300.0s of the 300.0s of remaining time.
Training timeseries model ARIMA. Training for up to 300.0s of the 300.0s of remaining time.
Warning: No name was specified for model, defaulting to class name: CatBoostModel
Warning: No name was specified for model, defaulting to class name: CatBoostModel
Warning: No name was specified for model, defaulting to class name: CatBoostModel
No path specified. Models will be saved in: "AutogluonModels\ag-20250423_094645CatBoostModel"
No path specified. Models will be saved in: "AutogluonModels\ag-20250423_094645CatBoostModel"
No path specified. Models will be saved in: "AutogluonModels\ag-20250423_094645CatBoostModel"
Warning: No path was specified for model, defaulting to: D:\githubProjects\previsao-do-consumo-energetico-com-ml\AutogluonModels\ag-20250423_094645
Warning: No path was specified for model, defaulting to: D:\githubProjects\previsao-do-consumo-energetico-com-ml\AutogluonModels\ag-20250423_094645
Warning: No path was specified for model, defaulting to: D:\githubProjects\previsao-do-consumo-energetico-com-ml\AutogluonModels\ag-20250423_094645
	-0.2291       = Validation score (-WQL)
	-0.2291       = Validation score (-WQL)
	-0.2291       = Validation score (-WQL)
	8.63    s     = Training runtime
	8.63    s     = Training runtime
	8.63    s     = Training runtime
	2.71    s     = Validation (prediction) runtime
	2.71    s     = Validation (prediction) runtime
	2.71    s     = Validation (prediction) runtime
Not fitting ensemble as only 1 model was trained.
Not fitting ensemble as only 1 model was trained.
Not fitting ensemble as only 1 model was trained.
Training complete. Models trained: ['ARIMA']
Training complete. Models trained: ['ARIMA']
Training complete. Models trained: ['ARIMA']
Total runtime: 11.37 s
Total runtime: 11.37 s
Total runtime: 11.37 s
Best model: ARIMA
Best model: ARIMA
Best model: ARIMA
Best model score: -0.2291
Best model score: -0.2291
Best model score: -0.2291
Model not specified in predict, will default to the model with the best validation score: ARIMA
Model not specified in predict, will default to the model with the best validation score: ARIMA
Model not specified in predict, will default to the model with the best validation score: ARIMA
Model not specified in predict, will default to the model with the best validation score: ARIMA
Model not specified in predict, will default to the model with the best validation score: ARIMA
Model not specified in predict, will default to the model with the best validation score: ARIMA
Warning: path already exists! This predictor may overwrite an existing predictor! path="predicts/XARIMA/modelo"
Warning: path already exists! This predictor may overwrite an existing predictor! path="predicts/XARIMA/modelo"
Warning: path already exists! This predictor may overwrite an existing predictor! path="predicts/XARIMA/modelo"
Beginning AutoGluon training... Time limit = 300s
Beginning AutoGluon training... Time limit = 300s
Beginning AutoGluon training... Time limit = 300s
Beginning AutoGluon training... Time limit = 300s
AutoGluon will save models to 'D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\XARIMA\modelo'
AutoGluon will save models to 'D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\XARIMA\modelo'
AutoGluon will save models to 'D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\XARIMA\modelo'
AutoGluon will save models to 'D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\XARIMA\modelo'
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
GPU Count:          0
Memory Avail:       3.80 GB / 15.93 GB (23.8%)
Disk Space Avail:   701.42 GB / 931.46 GB (75.3%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
GPU Count:          0
Memory Avail:       3.80 GB / 15.93 GB (23.8%)
Disk Space Avail:   701.42 GB / 931.46 GB (75.3%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
GPU Count:          0
Memory Avail:       3.80 GB / 15.93 GB (23.8%)
Disk Space Avail:   701.42 GB / 931.46 GB (75.3%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
GPU Count:          0
Memory Avail:       3.80 GB / 15.93 GB (23.8%)
Disk Space Avail:   701.42 GB / 931.46 GB (75.3%)
===================================================
Setting presets to: medium_quality
Setting presets to: medium_quality
Setting presets to: medium_quality
Setting presets to: medium_quality

Fitting with arguments:

Fitting with arguments:

Fitting with arguments:

Fitting with arguments:
{'enable_ensemble': True,
 'eval_metric': WQL,
 'freq': 'h',
 'hyperparameters': {'ARIMAModel': {'covariate_regressor': 'CAT',
                                    'target_scaler': 'standard'}},
 'known_covariates_names': ['Hour', 'TimeOfDay', 'Temperature', 'DayOfWeek '],
 'num_val_windows': 1,
 'prediction_length': 24,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'EnergyNormalized',
 'time_limit': 300,
 'verbosity': 2}

{'enable_ensemble': True,
 'eval_metric': WQL,
 'freq': 'h',
 'hyperparameters': {'ARIMAModel': {'covariate_regressor': 'CAT',
                                    'target_scaler': 'standard'}},
 'known_covariates_names': ['Hour', 'TimeOfDay', 'Temperature', 'DayOfWeek '],
 'num_val_windows': 1,
 'prediction_length': 24,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'EnergyNormalized',
 'time_limit': 300,
 'verbosity': 2}

{'enable_ensemble': True,
 'eval_metric': WQL,
 'freq': 'h',
 'hyperparameters': {'ARIMAModel': {'covariate_regressor': 'CAT',
                                    'target_scaler': 'standard'}},
 'known_covariates_names': ['Hour', 'TimeOfDay', 'Temperature', 'DayOfWeek '],
 'num_val_windows': 1,
 'prediction_length': 24,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'EnergyNormalized',
 'time_limit': 300,
 'verbosity': 2}

{'enable_ensemble': True,
 'eval_metric': WQL,
 'freq': 'h',
 'hyperparameters': {'ARIMAModel': {'covariate_regressor': 'CAT',
                                    'target_scaler': 'standard'}},
 'known_covariates_names': ['Hour', 'TimeOfDay', 'Temperature', 'DayOfWeek '],
 'num_val_windows': 1,
 'prediction_length': 24,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'EnergyNormalized',
 'time_limit': 300,
 'verbosity': 2}

Provided train_data has 7992 rows, 1 time series. Median time series length is 7992 (min=7992, max=7992). 
Provided train_data has 7992 rows, 1 time series. Median time series length is 7992 (min=7992, max=7992). 
Provided train_data has 7992 rows, 1 time series. Median time series length is 7992 (min=7992, max=7992). 
Provided train_data has 7992 rows, 1 time series. Median time series length is 7992 (min=7992, max=7992). 
Provided tuning_data has 8016 rows, 1 time series. Median time series length is 8016 (min=8016, max=8016). 
Provided tuning_data has 8016 rows, 1 time series. Median time series length is 8016 (min=8016, max=8016). 
Provided tuning_data has 8016 rows, 1 time series. Median time series length is 8016 (min=8016, max=8016). 
Provided tuning_data has 8016 rows, 1 time series. Median time series length is 8016 (min=8016, max=8016). 
	Setting num_val_windows = 0 (disabling backtesting on train_data) because tuning_data is provided.
	Setting num_val_windows = 0 (disabling backtesting on train_data) because tuning_data is provided.
	Setting num_val_windows = 0 (disabling backtesting on train_data) because tuning_data is provided.
	Setting num_val_windows = 0 (disabling backtesting on train_data) because tuning_data is provided.
Warning: path already exists! This predictor may overwrite an existing predictor! path="predicts/XARIMA/modelo"
Warning: path already exists! This predictor may overwrite an existing predictor! path="predicts/XARIMA/modelo"
Warning: path already exists! This predictor may overwrite an existing predictor! path="predicts/XARIMA/modelo"
Warning: path already exists! This predictor may overwrite an existing predictor! path="predicts/XARIMA/modelo"
Beginning AutoGluon training... Time limit = 300s
Beginning AutoGluon training... Time limit = 300s
Beginning AutoGluon training... Time limit = 300s
Beginning AutoGluon training... Time limit = 300s
Beginning AutoGluon training... Time limit = 300s
AutoGluon will save models to 'D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\XARIMA\modelo'
AutoGluon will save models to 'D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\XARIMA\modelo'
AutoGluon will save models to 'D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\XARIMA\modelo'
AutoGluon will save models to 'D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\XARIMA\modelo'
AutoGluon will save models to 'D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\XARIMA\modelo'
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
GPU Count:          0
Memory Avail:       3.67 GB / 15.93 GB (23.0%)
Disk Space Avail:   701.42 GB / 931.46 GB (75.3%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
GPU Count:          0
Memory Avail:       3.67 GB / 15.93 GB (23.0%)
Disk Space Avail:   701.42 GB / 931.46 GB (75.3%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
GPU Count:          0
Memory Avail:       3.67 GB / 15.93 GB (23.0%)
Disk Space Avail:   701.42 GB / 931.46 GB (75.3%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
GPU Count:          0
Memory Avail:       3.67 GB / 15.93 GB (23.0%)
Disk Space Avail:   701.42 GB / 931.46 GB (75.3%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
GPU Count:          0
Memory Avail:       3.67 GB / 15.93 GB (23.0%)
Disk Space Avail:   701.42 GB / 931.46 GB (75.3%)
===================================================
Setting presets to: medium_quality
Setting presets to: medium_quality
Setting presets to: medium_quality
Setting presets to: medium_quality
Setting presets to: medium_quality

Fitting with arguments:

Fitting with arguments:

Fitting with arguments:

Fitting with arguments:

Fitting with arguments:
{'enable_ensemble': True,
 'eval_metric': WQL,
 'freq': 'h',
 'hyperparameters': {'ARIMAModel': {'covariate_regressor': 'CAT',
                                    'target_scaler': 'standard'}},
 'known_covariates_names': ['Hour', 'TimeOfDay', 'Temperature', 'DayOfWeek'],
 'num_val_windows': 1,
 'prediction_length': 24,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'EnergyNormalized',
 'time_limit': 300,
 'verbosity': 2}

{'enable_ensemble': True,
 'eval_metric': WQL,
 'freq': 'h',
 'hyperparameters': {'ARIMAModel': {'covariate_regressor': 'CAT',
                                    'target_scaler': 'standard'}},
 'known_covariates_names': ['Hour', 'TimeOfDay', 'Temperature', 'DayOfWeek'],
 'num_val_windows': 1,
 'prediction_length': 24,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'EnergyNormalized',
 'time_limit': 300,
 'verbosity': 2}

{'enable_ensemble': True,
 'eval_metric': WQL,
 'freq': 'h',
 'hyperparameters': {'ARIMAModel': {'covariate_regressor': 'CAT',
                                    'target_scaler': 'standard'}},
 'known_covariates_names': ['Hour', 'TimeOfDay', 'Temperature', 'DayOfWeek'],
 'num_val_windows': 1,
 'prediction_length': 24,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'EnergyNormalized',
 'time_limit': 300,
 'verbosity': 2}

{'enable_ensemble': True,
 'eval_metric': WQL,
 'freq': 'h',
 'hyperparameters': {'ARIMAModel': {'covariate_regressor': 'CAT',
                                    'target_scaler': 'standard'}},
 'known_covariates_names': ['Hour', 'TimeOfDay', 'Temperature', 'DayOfWeek'],
 'num_val_windows': 1,
 'prediction_length': 24,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'EnergyNormalized',
 'time_limit': 300,
 'verbosity': 2}

{'enable_ensemble': True,
 'eval_metric': WQL,
 'freq': 'h',
 'hyperparameters': {'ARIMAModel': {'covariate_regressor': 'CAT',
                                    'target_scaler': 'standard'}},
 'known_covariates_names': ['Hour', 'TimeOfDay', 'Temperature', 'DayOfWeek'],
 'num_val_windows': 1,
 'prediction_length': 24,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'EnergyNormalized',
 'time_limit': 300,
 'verbosity': 2}

Provided train_data has 7992 rows, 1 time series. Median time series length is 7992 (min=7992, max=7992). 
Provided train_data has 7992 rows, 1 time series. Median time series length is 7992 (min=7992, max=7992). 
Provided train_data has 7992 rows, 1 time series. Median time series length is 7992 (min=7992, max=7992). 
Provided train_data has 7992 rows, 1 time series. Median time series length is 7992 (min=7992, max=7992). 
Provided train_data has 7992 rows, 1 time series. Median time series length is 7992 (min=7992, max=7992). 
Provided tuning_data has 8016 rows, 1 time series. Median time series length is 8016 (min=8016, max=8016). 
Provided tuning_data has 8016 rows, 1 time series. Median time series length is 8016 (min=8016, max=8016). 
Provided tuning_data has 8016 rows, 1 time series. Median time series length is 8016 (min=8016, max=8016). 
Provided tuning_data has 8016 rows, 1 time series. Median time series length is 8016 (min=8016, max=8016). 
Provided tuning_data has 8016 rows, 1 time series. Median time series length is 8016 (min=8016, max=8016). 
	Setting num_val_windows = 0 (disabling backtesting on train_data) because tuning_data is provided.
	Setting num_val_windows = 0 (disabling backtesting on train_data) because tuning_data is provided.
	Setting num_val_windows = 0 (disabling backtesting on train_data) because tuning_data is provided.
	Setting num_val_windows = 0 (disabling backtesting on train_data) because tuning_data is provided.
	Setting num_val_windows = 0 (disabling backtesting on train_data) because tuning_data is provided.
Warning: path already exists! This predictor may overwrite an existing predictor! path="predicts/XARIMA/modelo"
Warning: path already exists! This predictor may overwrite an existing predictor! path="predicts/XARIMA/modelo"
Warning: path already exists! This predictor may overwrite an existing predictor! path="predicts/XARIMA/modelo"
Warning: path already exists! This predictor may overwrite an existing predictor! path="predicts/XARIMA/modelo"
Warning: path already exists! This predictor may overwrite an existing predictor! path="predicts/XARIMA/modelo"
Beginning AutoGluon training... Time limit = 300s
Beginning AutoGluon training... Time limit = 300s
Beginning AutoGluon training... Time limit = 300s
Beginning AutoGluon training... Time limit = 300s
Beginning AutoGluon training... Time limit = 300s
Beginning AutoGluon training... Time limit = 300s
AutoGluon will save models to 'D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\XARIMA\modelo'
AutoGluon will save models to 'D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\XARIMA\modelo'
AutoGluon will save models to 'D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\XARIMA\modelo'
AutoGluon will save models to 'D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\XARIMA\modelo'
AutoGluon will save models to 'D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\XARIMA\modelo'
AutoGluon will save models to 'D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\XARIMA\modelo'
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
GPU Count:          0
Memory Avail:       3.53 GB / 15.93 GB (22.2%)
Disk Space Avail:   701.42 GB / 931.46 GB (75.3%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
GPU Count:          0
Memory Avail:       3.53 GB / 15.93 GB (22.2%)
Disk Space Avail:   701.42 GB / 931.46 GB (75.3%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
GPU Count:          0
Memory Avail:       3.53 GB / 15.93 GB (22.2%)
Disk Space Avail:   701.42 GB / 931.46 GB (75.3%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
GPU Count:          0
Memory Avail:       3.53 GB / 15.93 GB (22.2%)
Disk Space Avail:   701.42 GB / 931.46 GB (75.3%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
GPU Count:          0
Memory Avail:       3.53 GB / 15.93 GB (22.2%)
Disk Space Avail:   701.42 GB / 931.46 GB (75.3%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
GPU Count:          0
Memory Avail:       3.53 GB / 15.93 GB (22.2%)
Disk Space Avail:   701.42 GB / 931.46 GB (75.3%)
===================================================
Setting presets to: medium_quality
Setting presets to: medium_quality
Setting presets to: medium_quality
Setting presets to: medium_quality
Setting presets to: medium_quality
Setting presets to: medium_quality

Fitting with arguments:

Fitting with arguments:

Fitting with arguments:

Fitting with arguments:

Fitting with arguments:

Fitting with arguments:
{'enable_ensemble': True,
 'eval_metric': WQL,
 'freq': 'h',
 'hyperparameters': {'ARIMAModel': {'covariate_regressor': 'CAT',
                                    'target_scaler': 'standard'}},
 'known_covariates_names': ['Hour', 'TimeOfDay', 'Temperature', 'DayOfTheWeek'],
 'num_val_windows': 1,
 'prediction_length': 24,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'EnergyNormalized',
 'time_limit': 300,
 'verbosity': 2}

{'enable_ensemble': True,
 'eval_metric': WQL,
 'freq': 'h',
 'hyperparameters': {'ARIMAModel': {'covariate_regressor': 'CAT',
                                    'target_scaler': 'standard'}},
 'known_covariates_names': ['Hour', 'TimeOfDay', 'Temperature', 'DayOfTheWeek'],
 'num_val_windows': 1,
 'prediction_length': 24,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'EnergyNormalized',
 'time_limit': 300,
 'verbosity': 2}

{'enable_ensemble': True,
 'eval_metric': WQL,
 'freq': 'h',
 'hyperparameters': {'ARIMAModel': {'covariate_regressor': 'CAT',
                                    'target_scaler': 'standard'}},
 'known_covariates_names': ['Hour', 'TimeOfDay', 'Temperature', 'DayOfTheWeek'],
 'num_val_windows': 1,
 'prediction_length': 24,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'EnergyNormalized',
 'time_limit': 300,
 'verbosity': 2}

{'enable_ensemble': True,
 'eval_metric': WQL,
 'freq': 'h',
 'hyperparameters': {'ARIMAModel': {'covariate_regressor': 'CAT',
                                    'target_scaler': 'standard'}},
 'known_covariates_names': ['Hour', 'TimeOfDay', 'Temperature', 'DayOfTheWeek'],
 'num_val_windows': 1,
 'prediction_length': 24,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'EnergyNormalized',
 'time_limit': 300,
 'verbosity': 2}

{'enable_ensemble': True,
 'eval_metric': WQL,
 'freq': 'h',
 'hyperparameters': {'ARIMAModel': {'covariate_regressor': 'CAT',
                                    'target_scaler': 'standard'}},
 'known_covariates_names': ['Hour', 'TimeOfDay', 'Temperature', 'DayOfTheWeek'],
 'num_val_windows': 1,
 'prediction_length': 24,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'EnergyNormalized',
 'time_limit': 300,
 'verbosity': 2}

{'enable_ensemble': True,
 'eval_metric': WQL,
 'freq': 'h',
 'hyperparameters': {'ARIMAModel': {'covariate_regressor': 'CAT',
                                    'target_scaler': 'standard'}},
 'known_covariates_names': ['Hour', 'TimeOfDay', 'Temperature', 'DayOfTheWeek'],
 'num_val_windows': 1,
 'prediction_length': 24,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'EnergyNormalized',
 'time_limit': 300,
 'verbosity': 2}

Provided train_data has 7992 rows, 1 time series. Median time series length is 7992 (min=7992, max=7992). 
Provided train_data has 7992 rows, 1 time series. Median time series length is 7992 (min=7992, max=7992). 
Provided train_data has 7992 rows, 1 time series. Median time series length is 7992 (min=7992, max=7992). 
Provided train_data has 7992 rows, 1 time series. Median time series length is 7992 (min=7992, max=7992). 
Provided train_data has 7992 rows, 1 time series. Median time series length is 7992 (min=7992, max=7992). 
Provided train_data has 7992 rows, 1 time series. Median time series length is 7992 (min=7992, max=7992). 
Provided tuning_data has 8016 rows, 1 time series. Median time series length is 8016 (min=8016, max=8016). 
Provided tuning_data has 8016 rows, 1 time series. Median time series length is 8016 (min=8016, max=8016). 
Provided tuning_data has 8016 rows, 1 time series. Median time series length is 8016 (min=8016, max=8016). 
Provided tuning_data has 8016 rows, 1 time series. Median time series length is 8016 (min=8016, max=8016). 
Provided tuning_data has 8016 rows, 1 time series. Median time series length is 8016 (min=8016, max=8016). 
Provided tuning_data has 8016 rows, 1 time series. Median time series length is 8016 (min=8016, max=8016). 
	Setting num_val_windows = 0 (disabling backtesting on train_data) because tuning_data is provided.
	Setting num_val_windows = 0 (disabling backtesting on train_data) because tuning_data is provided.
	Setting num_val_windows = 0 (disabling backtesting on train_data) because tuning_data is provided.
	Setting num_val_windows = 0 (disabling backtesting on train_data) because tuning_data is provided.
	Setting num_val_windows = 0 (disabling backtesting on train_data) because tuning_data is provided.
	Setting num_val_windows = 0 (disabling backtesting on train_data) because tuning_data is provided.

Provided data contains following columns:

Provided data contains following columns:

Provided data contains following columns:

Provided data contains following columns:

Provided data contains following columns:

Provided data contains following columns:
	target: 'EnergyNormalized'
	target: 'EnergyNormalized'
	target: 'EnergyNormalized'
	target: 'EnergyNormalized'
	target: 'EnergyNormalized'
	target: 'EnergyNormalized'
	known_covariates:
	known_covariates:
	known_covariates:
	known_covariates:
	known_covariates:
	known_covariates:
		categorical:        ['TimeOfDay', 'DayOfTheWeek']
		categorical:        ['TimeOfDay', 'DayOfTheWeek']
		categorical:        ['TimeOfDay', 'DayOfTheWeek']
		categorical:        ['TimeOfDay', 'DayOfTheWeek']
		categorical:        ['TimeOfDay', 'DayOfTheWeek']
		categorical:        ['TimeOfDay', 'DayOfTheWeek']
		continuous (float): ['Hour', 'Temperature']
		continuous (float): ['Hour', 'Temperature']
		continuous (float): ['Hour', 'Temperature']
		continuous (float): ['Hour', 'Temperature']
		continuous (float): ['Hour', 'Temperature']
		continuous (float): ['Hour', 'Temperature']
	past_covariates:
	past_covariates:
	past_covariates:
	past_covariates:
	past_covariates:
	past_covariates:
		categorical:        ['Season']
		categorical:        ['Season']
		categorical:        ['Season']
		categorical:        ['Season']
		categorical:        ['Season']
		categorical:        ['Season']
		continuous (float): ['ActiveEnergy(kWh)', 'Day', 'Month', 'Year', 'IsWeekend', 'IsHoliday', ...]
		continuous (float): ['ActiveEnergy(kWh)', 'Day', 'Month', 'Year', 'IsWeekend', 'IsHoliday', ...]
		continuous (float): ['ActiveEnergy(kWh)', 'Day', 'Month', 'Year', 'IsWeekend', 'IsHoliday', ...]
		continuous (float): ['ActiveEnergy(kWh)', 'Day', 'Month', 'Year', 'IsWeekend', 'IsHoliday', ...]
		continuous (float): ['ActiveEnergy(kWh)', 'Day', 'Month', 'Year', 'IsWeekend', 'IsHoliday', ...]
		continuous (float): ['ActiveEnergy(kWh)', 'Day', 'Month', 'Year', 'IsWeekend', 'IsHoliday', ...]
	static_features:
	static_features:
	static_features:
	static_features:
	static_features:
	static_features:
		categorical:        []
		categorical:        []
		categorical:        []
		categorical:        []
		categorical:        []
		categorical:        []
		continuous (float): ['PopulationDensity']
		continuous (float): ['PopulationDensity']
		continuous (float): ['PopulationDensity']
		continuous (float): ['PopulationDensity']
		continuous (float): ['PopulationDensity']
		continuous (float): ['PopulationDensity']

AutoGluon will ignore following non-numeric/non-informative columns:

AutoGluon will ignore following non-numeric/non-informative columns:

AutoGluon will ignore following non-numeric/non-informative columns:

AutoGluon will ignore following non-numeric/non-informative columns:

AutoGluon will ignore following non-numeric/non-informative columns:

AutoGluon will ignore following non-numeric/non-informative columns:
	ignored covariates:      ['Date']
	ignored covariates:      ['Date']
	ignored covariates:      ['Date']
	ignored covariates:      ['Date']
	ignored covariates:      ['Date']
	ignored covariates:      ['Date']

To learn how to fix incorrectly inferred types, please see documentation for TimeSeriesPredictor.fit

To learn how to fix incorrectly inferred types, please see documentation for TimeSeriesPredictor.fit

To learn how to fix incorrectly inferred types, please see documentation for TimeSeriesPredictor.fit

To learn how to fix incorrectly inferred types, please see documentation for TimeSeriesPredictor.fit

To learn how to fix incorrectly inferred types, please see documentation for TimeSeriesPredictor.fit

To learn how to fix incorrectly inferred types, please see documentation for TimeSeriesPredictor.fit

AutoGluon will gauge predictive performance using evaluation metric: 'WQL'

AutoGluon will gauge predictive performance using evaluation metric: 'WQL'

AutoGluon will gauge predictive performance using evaluation metric: 'WQL'

AutoGluon will gauge predictive performance using evaluation metric: 'WQL'

AutoGluon will gauge predictive performance using evaluation metric: 'WQL'

AutoGluon will gauge predictive performance using evaluation metric: 'WQL'
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
===================================================
===================================================
===================================================
===================================================
===================================================
===================================================

Starting training. Start time is 2025-04-23 10:48:37

Starting training. Start time is 2025-04-23 10:48:37

Starting training. Start time is 2025-04-23 10:48:37

Starting training. Start time is 2025-04-23 10:48:37

Starting training. Start time is 2025-04-23 10:48:37

Starting training. Start time is 2025-04-23 10:48:37
Models that will be trained: ['ARIMA']
Models that will be trained: ['ARIMA']
Models that will be trained: ['ARIMA']
Models that will be trained: ['ARIMA']
Models that will be trained: ['ARIMA']
Models that will be trained: ['ARIMA']
Training timeseries model ARIMA. Training for up to 300.0s of the 300.0s of remaining time.
Training timeseries model ARIMA. Training for up to 300.0s of the 300.0s of remaining time.
Training timeseries model ARIMA. Training for up to 300.0s of the 300.0s of remaining time.
Training timeseries model ARIMA. Training for up to 300.0s of the 300.0s of remaining time.
Training timeseries model ARIMA. Training for up to 300.0s of the 300.0s of remaining time.
Training timeseries model ARIMA. Training for up to 300.0s of the 300.0s of remaining time.
Warning: No name was specified for model, defaulting to class name: CatBoostModel
Warning: No name was specified for model, defaulting to class name: CatBoostModel
Warning: No name was specified for model, defaulting to class name: CatBoostModel
Warning: No name was specified for model, defaulting to class name: CatBoostModel
Warning: No name was specified for model, defaulting to class name: CatBoostModel
Warning: No name was specified for model, defaulting to class name: CatBoostModel
No path specified. Models will be saved in: "AutogluonModels\ag-20250423_094837CatBoostModel"
No path specified. Models will be saved in: "AutogluonModels\ag-20250423_094837CatBoostModel"
No path specified. Models will be saved in: "AutogluonModels\ag-20250423_094837CatBoostModel"
No path specified. Models will be saved in: "AutogluonModels\ag-20250423_094837CatBoostModel"
No path specified. Models will be saved in: "AutogluonModels\ag-20250423_094837CatBoostModel"
No path specified. Models will be saved in: "AutogluonModels\ag-20250423_094837CatBoostModel"
Warning: No path was specified for model, defaulting to: D:\githubProjects\previsao-do-consumo-energetico-com-ml\AutogluonModels\ag-20250423_094837
Warning: No path was specified for model, defaulting to: D:\githubProjects\previsao-do-consumo-energetico-com-ml\AutogluonModels\ag-20250423_094837
Warning: No path was specified for model, defaulting to: D:\githubProjects\previsao-do-consumo-energetico-com-ml\AutogluonModels\ag-20250423_094837
Warning: No path was specified for model, defaulting to: D:\githubProjects\previsao-do-consumo-energetico-com-ml\AutogluonModels\ag-20250423_094837
Warning: No path was specified for model, defaulting to: D:\githubProjects\previsao-do-consumo-energetico-com-ml\AutogluonModels\ag-20250423_094837
Warning: No path was specified for model, defaulting to: D:\githubProjects\previsao-do-consumo-energetico-com-ml\AutogluonModels\ag-20250423_094837
	-0.0852       = Validation score (-WQL)
	-0.0852       = Validation score (-WQL)
	-0.0852       = Validation score (-WQL)
	-0.0852       = Validation score (-WQL)
	-0.0852       = Validation score (-WQL)
	-0.0852       = Validation score (-WQL)
	14.06   s     = Training runtime
	14.06   s     = Training runtime
	14.06   s     = Training runtime
	14.06   s     = Training runtime
	14.06   s     = Training runtime
	14.06   s     = Training runtime
	2.19    s     = Validation (prediction) runtime
	2.19    s     = Validation (prediction) runtime
	2.19    s     = Validation (prediction) runtime
	2.19    s     = Validation (prediction) runtime
	2.19    s     = Validation (prediction) runtime
	2.19    s     = Validation (prediction) runtime
Not fitting ensemble as only 1 model was trained.
Not fitting ensemble as only 1 model was trained.
Not fitting ensemble as only 1 model was trained.
Not fitting ensemble as only 1 model was trained.
Not fitting ensemble as only 1 model was trained.
Not fitting ensemble as only 1 model was trained.
Training complete. Models trained: ['ARIMA']
Training complete. Models trained: ['ARIMA']
Training complete. Models trained: ['ARIMA']
Training complete. Models trained: ['ARIMA']
Training complete. Models trained: ['ARIMA']
Training complete. Models trained: ['ARIMA']
Total runtime: 16.28 s
Total runtime: 16.28 s
Total runtime: 16.28 s
Total runtime: 16.28 s
Total runtime: 16.28 s
Total runtime: 16.28 s
Best model: ARIMA
Best model: ARIMA
Best model: ARIMA
Best model: ARIMA
Best model: ARIMA
Best model: ARIMA
Best model score: -0.0852
Best model score: -0.0852
Best model score: -0.0852
Best model score: -0.0852
Best model score: -0.0852
Best model score: -0.0852
Model not specified in predict, will default to the model with the best validation score: ARIMA
Model not specified in predict, will default to the model with the best validation score: ARIMA
Model not specified in predict, will default to the model with the best validation score: ARIMA
Model not specified in predict, will default to the model with the best validation score: ARIMA
Model not specified in predict, will default to the model with the best validation score: ARIMA
Model not specified in predict, will default to the model with the best validation score: ARIMA
Model not specified in predict, will default to the model with the best validation score: ARIMA
Model not specified in predict, will default to the model with the best validation score: ARIMA
Model not specified in predict, will default to the model with the best validation score: ARIMA
Model not specified in predict, will default to the model with the best validation score: ARIMA
Model not specified in predict, will default to the model with the best validation score: ARIMA
Model not specified in predict, will default to the model with the best validation score: ARIMA
Warning: path already exists! This predictor may overwrite an existing predictor! path="predicts/linearRegression/modelo"
Warning: path already exists! This predictor may overwrite an existing predictor! path="predicts/linearRegression/modelo"
Warning: path already exists! This predictor may overwrite an existing predictor! path="predicts/linearRegression/modelo"
Warning: path already exists! This predictor may overwrite an existing predictor! path="predicts/linearRegression/modelo"
Warning: path already exists! This predictor may overwrite an existing predictor! path="predicts/linearRegression/modelo"
Warning: path already exists! This predictor may overwrite an existing predictor! path="predicts/linearRegression/modelo"
Preset alias specified: 'medium' maps to 'medium_quality'.
Preset alias specified: 'medium' maps to 'medium_quality'.
Preset alias specified: 'medium' maps to 'medium_quality'.
Preset alias specified: 'medium' maps to 'medium_quality'.
Preset alias specified: 'medium' maps to 'medium_quality'.
Preset alias specified: 'medium' maps to 'medium_quality'.
Verbosity: 2 (Standard Logging)
Verbosity: 2 (Standard Logging)
Verbosity: 2 (Standard Logging)
Verbosity: 2 (Standard Logging)
Verbosity: 2 (Standard Logging)
Verbosity: 2 (Standard Logging)
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
Memory Avail:       3.26 GB / 15.93 GB (20.5%)
Disk Space Avail:   701.42 GB / 931.46 GB (75.3%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
Memory Avail:       3.26 GB / 15.93 GB (20.5%)
Disk Space Avail:   701.42 GB / 931.46 GB (75.3%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
Memory Avail:       3.26 GB / 15.93 GB (20.5%)
Disk Space Avail:   701.42 GB / 931.46 GB (75.3%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
Memory Avail:       3.26 GB / 15.93 GB (20.5%)
Disk Space Avail:   701.42 GB / 931.46 GB (75.3%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
Memory Avail:       3.26 GB / 15.93 GB (20.5%)
Disk Space Avail:   701.42 GB / 931.46 GB (75.3%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
Memory Avail:       3.26 GB / 15.93 GB (20.5%)
Disk Space Avail:   701.42 GB / 931.46 GB (75.3%)
===================================================
Presets specified: ['medium']
Presets specified: ['medium']
Presets specified: ['medium']
Presets specified: ['medium']
Presets specified: ['medium']
Presets specified: ['medium']
Beginning AutoGluon training ... Time limit = 300s
Beginning AutoGluon training ... Time limit = 300s
Beginning AutoGluon training ... Time limit = 300s
Beginning AutoGluon training ... Time limit = 300s
Beginning AutoGluon training ... Time limit = 300s
Beginning AutoGluon training ... Time limit = 300s
AutoGluon will save models to "D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo"
AutoGluon will save models to "D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo"
AutoGluon will save models to "D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo"
AutoGluon will save models to "D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo"
AutoGluon will save models to "D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo"
AutoGluon will save models to "D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo"
Train Data Rows:    7992
Train Data Rows:    7992
Train Data Rows:    7992
Train Data Rows:    7992
Train Data Rows:    7992
Train Data Rows:    7992
Train Data Columns: 4
Train Data Columns: 4
Train Data Columns: 4
Train Data Columns: 4
Train Data Columns: 4
Train Data Columns: 4
Tuning Data Rows:    24
Tuning Data Rows:    24
Tuning Data Rows:    24
Tuning Data Rows:    24
Tuning Data Rows:    24
Tuning Data Rows:    24
Tuning Data Columns: 4
Tuning Data Columns: 4
Tuning Data Columns: 4
Tuning Data Columns: 4
Tuning Data Columns: 4
Tuning Data Columns: 4
Label Column:       EnergyNormalized
Label Column:       EnergyNormalized
Label Column:       EnergyNormalized
Label Column:       EnergyNormalized
Label Column:       EnergyNormalized
Label Column:       EnergyNormalized
AutoGluon infers your prediction problem is: 'regression' (because dtype of label-column == float and many unique label-values observed).
AutoGluon infers your prediction problem is: 'regression' (because dtype of label-column == float and many unique label-values observed).
AutoGluon infers your prediction problem is: 'regression' (because dtype of label-column == float and many unique label-values observed).
AutoGluon infers your prediction problem is: 'regression' (because dtype of label-column == float and many unique label-values observed).
AutoGluon infers your prediction problem is: 'regression' (because dtype of label-column == float and many unique label-values observed).
AutoGluon infers your prediction problem is: 'regression' (because dtype of label-column == float and many unique label-values observed).
	Label info (max, min, mean, stddev): (0.1517218738549846, 0.005890280091559903, 0.06812, 0.02939)
	Label info (max, min, mean, stddev): (0.1517218738549846, 0.005890280091559903, 0.06812, 0.02939)
	Label info (max, min, mean, stddev): (0.1517218738549846, 0.005890280091559903, 0.06812, 0.02939)
	Label info (max, min, mean, stddev): (0.1517218738549846, 0.005890280091559903, 0.06812, 0.02939)
	Label info (max, min, mean, stddev): (0.1517218738549846, 0.005890280091559903, 0.06812, 0.02939)
	Label info (max, min, mean, stddev): (0.1517218738549846, 0.005890280091559903, 0.06812, 0.02939)
	If 'regression' is not the correct problem_type, please manually specify the problem_type parameter during Predictor init (You may specify problem_type as one of: ['binary', 'multiclass', 'regression', 'quantile'])
	If 'regression' is not the correct problem_type, please manually specify the problem_type parameter during Predictor init (You may specify problem_type as one of: ['binary', 'multiclass', 'regression', 'quantile'])
	If 'regression' is not the correct problem_type, please manually specify the problem_type parameter during Predictor init (You may specify problem_type as one of: ['binary', 'multiclass', 'regression', 'quantile'])
	If 'regression' is not the correct problem_type, please manually specify the problem_type parameter during Predictor init (You may specify problem_type as one of: ['binary', 'multiclass', 'regression', 'quantile'])
	If 'regression' is not the correct problem_type, please manually specify the problem_type parameter during Predictor init (You may specify problem_type as one of: ['binary', 'multiclass', 'regression', 'quantile'])
	If 'regression' is not the correct problem_type, please manually specify the problem_type parameter during Predictor init (You may specify problem_type as one of: ['binary', 'multiclass', 'regression', 'quantile'])
Problem Type:       regression
Problem Type:       regression
Problem Type:       regression
Problem Type:       regression
Problem Type:       regression
Problem Type:       regression
Preprocessing data ...
Preprocessing data ...
Preprocessing data ...
Preprocessing data ...
Preprocessing data ...
Preprocessing data ...
Using Feature Generators to preprocess the data ...
Using Feature Generators to preprocess the data ...
Using Feature Generators to preprocess the data ...
Using Feature Generators to preprocess the data ...
Using Feature Generators to preprocess the data ...
Using Feature Generators to preprocess the data ...
Fitting AutoMLPipelineFeatureGenerator...
Fitting AutoMLPipelineFeatureGenerator...
Fitting AutoMLPipelineFeatureGenerator...
Fitting AutoMLPipelineFeatureGenerator...
Fitting AutoMLPipelineFeatureGenerator...
Fitting AutoMLPipelineFeatureGenerator...
	Available Memory:                    3343.67 MB
	Available Memory:                    3343.67 MB
	Available Memory:                    3343.67 MB
	Available Memory:                    3343.67 MB
	Available Memory:                    3343.67 MB
	Available Memory:                    3343.67 MB
	Train Data (Original)  Memory Usage: 1.14 MB (0.0% of available memory)
	Train Data (Original)  Memory Usage: 1.14 MB (0.0% of available memory)
	Train Data (Original)  Memory Usage: 1.14 MB (0.0% of available memory)
	Train Data (Original)  Memory Usage: 1.14 MB (0.0% of available memory)
	Train Data (Original)  Memory Usage: 1.14 MB (0.0% of available memory)
	Train Data (Original)  Memory Usage: 1.14 MB (0.0% of available memory)
	Inferring data type of each feature based on column values. Set feature_metadata_in to manually specify special dtypes of the features.
	Inferring data type of each feature based on column values. Set feature_metadata_in to manually specify special dtypes of the features.
	Inferring data type of each feature based on column values. Set feature_metadata_in to manually specify special dtypes of the features.
	Inferring data type of each feature based on column values. Set feature_metadata_in to manually specify special dtypes of the features.
	Inferring data type of each feature based on column values. Set feature_metadata_in to manually specify special dtypes of the features.
	Inferring data type of each feature based on column values. Set feature_metadata_in to manually specify special dtypes of the features.
	Stage 1 Generators:
	Stage 1 Generators:
	Stage 1 Generators:
	Stage 1 Generators:
	Stage 1 Generators:
	Stage 1 Generators:
		Fitting AsTypeFeatureGenerator...
		Fitting AsTypeFeatureGenerator...
		Fitting AsTypeFeatureGenerator...
		Fitting AsTypeFeatureGenerator...
		Fitting AsTypeFeatureGenerator...
		Fitting AsTypeFeatureGenerator...
	Stage 2 Generators:
	Stage 2 Generators:
	Stage 2 Generators:
	Stage 2 Generators:
	Stage 2 Generators:
	Stage 2 Generators:
		Fitting FillNaFeatureGenerator...
		Fitting FillNaFeatureGenerator...
		Fitting FillNaFeatureGenerator...
		Fitting FillNaFeatureGenerator...
		Fitting FillNaFeatureGenerator...
		Fitting FillNaFeatureGenerator...
	Stage 3 Generators:
	Stage 3 Generators:
	Stage 3 Generators:
	Stage 3 Generators:
	Stage 3 Generators:
	Stage 3 Generators:
		Fitting IdentityFeatureGenerator...
		Fitting IdentityFeatureGenerator...
		Fitting IdentityFeatureGenerator...
		Fitting IdentityFeatureGenerator...
		Fitting IdentityFeatureGenerator...
		Fitting IdentityFeatureGenerator...
		Fitting CategoryFeatureGenerator...
		Fitting CategoryFeatureGenerator...
		Fitting CategoryFeatureGenerator...
		Fitting CategoryFeatureGenerator...
		Fitting CategoryFeatureGenerator...
		Fitting CategoryFeatureGenerator...
			Fitting CategoryMemoryMinimizeFeatureGenerator...
			Fitting CategoryMemoryMinimizeFeatureGenerator...
			Fitting CategoryMemoryMinimizeFeatureGenerator...
			Fitting CategoryMemoryMinimizeFeatureGenerator...
			Fitting CategoryMemoryMinimizeFeatureGenerator...
			Fitting CategoryMemoryMinimizeFeatureGenerator...
	Stage 4 Generators:
	Stage 4 Generators:
	Stage 4 Generators:
	Stage 4 Generators:
	Stage 4 Generators:
	Stage 4 Generators:
		Fitting DropUniqueFeatureGenerator...
		Fitting DropUniqueFeatureGenerator...
		Fitting DropUniqueFeatureGenerator...
		Fitting DropUniqueFeatureGenerator...
		Fitting DropUniqueFeatureGenerator...
		Fitting DropUniqueFeatureGenerator...
	Stage 5 Generators:
	Stage 5 Generators:
	Stage 5 Generators:
	Stage 5 Generators:
	Stage 5 Generators:
	Stage 5 Generators:
		Fitting DropDuplicatesFeatureGenerator...
		Fitting DropDuplicatesFeatureGenerator...
		Fitting DropDuplicatesFeatureGenerator...
		Fitting DropDuplicatesFeatureGenerator...
		Fitting DropDuplicatesFeatureGenerator...
		Fitting DropDuplicatesFeatureGenerator...
	Types of features in original data (raw dtype, special dtypes):
	Types of features in original data (raw dtype, special dtypes):
	Types of features in original data (raw dtype, special dtypes):
	Types of features in original data (raw dtype, special dtypes):
	Types of features in original data (raw dtype, special dtypes):
	Types of features in original data (raw dtype, special dtypes):
		('float', [])  : 1 | ['Temperature']
		('float', [])  : 1 | ['Temperature']
		('float', [])  : 1 | ['Temperature']
		('float', [])  : 1 | ['Temperature']
		('float', [])  : 1 | ['Temperature']
		('float', [])  : 1 | ['Temperature']
		('int', [])    : 1 | ['Hour']
		('int', [])    : 1 | ['Hour']
		('int', [])    : 1 | ['Hour']
		('int', [])    : 1 | ['Hour']
		('int', [])    : 1 | ['Hour']
		('int', [])    : 1 | ['Hour']
		('object', []) : 2 | ['TimeOfDay', 'DayOfTheWeek']
		('object', []) : 2 | ['TimeOfDay', 'DayOfTheWeek']
		('object', []) : 2 | ['TimeOfDay', 'DayOfTheWeek']
		('object', []) : 2 | ['TimeOfDay', 'DayOfTheWeek']
		('object', []) : 2 | ['TimeOfDay', 'DayOfTheWeek']
		('object', []) : 2 | ['TimeOfDay', 'DayOfTheWeek']
	Types of features in processed data (raw dtype, special dtypes):
	Types of features in processed data (raw dtype, special dtypes):
	Types of features in processed data (raw dtype, special dtypes):
	Types of features in processed data (raw dtype, special dtypes):
	Types of features in processed data (raw dtype, special dtypes):
	Types of features in processed data (raw dtype, special dtypes):
		('category', []) : 2 | ['TimeOfDay', 'DayOfTheWeek']
		('category', []) : 2 | ['TimeOfDay', 'DayOfTheWeek']
		('category', []) : 2 | ['TimeOfDay', 'DayOfTheWeek']
		('category', []) : 2 | ['TimeOfDay', 'DayOfTheWeek']
		('category', []) : 2 | ['TimeOfDay', 'DayOfTheWeek']
		('category', []) : 2 | ['TimeOfDay', 'DayOfTheWeek']
		('float', [])    : 1 | ['Temperature']
		('float', [])    : 1 | ['Temperature']
		('float', [])    : 1 | ['Temperature']
		('float', [])    : 1 | ['Temperature']
		('float', [])    : 1 | ['Temperature']
		('float', [])    : 1 | ['Temperature']
		('int', [])      : 1 | ['Hour']
		('int', [])      : 1 | ['Hour']
		('int', [])      : 1 | ['Hour']
		('int', [])      : 1 | ['Hour']
		('int', [])      : 1 | ['Hour']
		('int', [])      : 1 | ['Hour']
	0.1s = Fit runtime
	0.1s = Fit runtime
	0.1s = Fit runtime
	0.1s = Fit runtime
	0.1s = Fit runtime
	0.1s = Fit runtime
	4 features in original data used to generate 4 features in processed data.
	4 features in original data used to generate 4 features in processed data.
	4 features in original data used to generate 4 features in processed data.
	4 features in original data used to generate 4 features in processed data.
	4 features in original data used to generate 4 features in processed data.
	4 features in original data used to generate 4 features in processed data.
	Train Data (Processed) Memory Usage: 0.11 MB (0.0% of available memory)
	Train Data (Processed) Memory Usage: 0.11 MB (0.0% of available memory)
	Train Data (Processed) Memory Usage: 0.11 MB (0.0% of available memory)
	Train Data (Processed) Memory Usage: 0.11 MB (0.0% of available memory)
	Train Data (Processed) Memory Usage: 0.11 MB (0.0% of available memory)
	Train Data (Processed) Memory Usage: 0.11 MB (0.0% of available memory)
Data preprocessing and feature engineering runtime = 0.08s ...
Data preprocessing and feature engineering runtime = 0.08s ...
Data preprocessing and feature engineering runtime = 0.08s ...
Data preprocessing and feature engineering runtime = 0.08s ...
Data preprocessing and feature engineering runtime = 0.08s ...
Data preprocessing and feature engineering runtime = 0.08s ...
AutoGluon will gauge predictive performance using evaluation metric: 'mean_absolute_error'
AutoGluon will gauge predictive performance using evaluation metric: 'mean_absolute_error'
AutoGluon will gauge predictive performance using evaluation metric: 'mean_absolute_error'
AutoGluon will gauge predictive performance using evaluation metric: 'mean_absolute_error'
AutoGluon will gauge predictive performance using evaluation metric: 'mean_absolute_error'
AutoGluon will gauge predictive performance using evaluation metric: 'mean_absolute_error'
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	To change this, specify the eval_metric parameter of Predictor()
	To change this, specify the eval_metric parameter of Predictor()
	To change this, specify the eval_metric parameter of Predictor()
	To change this, specify the eval_metric parameter of Predictor()
	To change this, specify the eval_metric parameter of Predictor()
	To change this, specify the eval_metric parameter of Predictor()
User-specified model hyperparameters to be fit:
{
	'LR': [{}],
}
User-specified model hyperparameters to be fit:
{
	'LR': [{}],
}
User-specified model hyperparameters to be fit:
{
	'LR': [{}],
}
User-specified model hyperparameters to be fit:
{
	'LR': [{}],
}
User-specified model hyperparameters to be fit:
{
	'LR': [{}],
}
User-specified model hyperparameters to be fit:
{
	'LR': [{}],
}
Fitting 1 L1 models, fit_strategy="sequential" ...
Fitting 1 L1 models, fit_strategy="sequential" ...
Fitting 1 L1 models, fit_strategy="sequential" ...
Fitting 1 L1 models, fit_strategy="sequential" ...
Fitting 1 L1 models, fit_strategy="sequential" ...
Fitting 1 L1 models, fit_strategy="sequential" ...
Fitting model: LinearModel ... Training model for up to 299.92s of the 299.92s of remaining time.
Fitting model: LinearModel ... Training model for up to 299.92s of the 299.92s of remaining time.
Fitting model: LinearModel ... Training model for up to 299.92s of the 299.92s of remaining time.
Fitting model: LinearModel ... Training model for up to 299.92s of the 299.92s of remaining time.
Fitting model: LinearModel ... Training model for up to 299.92s of the 299.92s of remaining time.
Fitting model: LinearModel ... Training model for up to 299.92s of the 299.92s of remaining time.
	-0.0124	 = Validation score   (-mean_absolute_error)
	-0.0124	 = Validation score   (-mean_absolute_error)
	-0.0124	 = Validation score   (-mean_absolute_error)
	-0.0124	 = Validation score   (-mean_absolute_error)
	-0.0124	 = Validation score   (-mean_absolute_error)
	-0.0124	 = Validation score   (-mean_absolute_error)
	0.02s	 = Training   runtime
	0.02s	 = Training   runtime
	0.02s	 = Training   runtime
	0.02s	 = Training   runtime
	0.02s	 = Training   runtime
	0.02s	 = Training   runtime
	0.0s	 = Validation runtime
	0.0s	 = Validation runtime
	0.0s	 = Validation runtime
	0.0s	 = Validation runtime
	0.0s	 = Validation runtime
	0.0s	 = Validation runtime
Fitting model: WeightedEnsemble_L2 ... Training model for up to 299.92s of the 299.90s of remaining time.
Fitting model: WeightedEnsemble_L2 ... Training model for up to 299.92s of the 299.90s of remaining time.
Fitting model: WeightedEnsemble_L2 ... Training model for up to 299.92s of the 299.90s of remaining time.
Fitting model: WeightedEnsemble_L2 ... Training model for up to 299.92s of the 299.90s of remaining time.
Fitting model: WeightedEnsemble_L2 ... Training model for up to 299.92s of the 299.90s of remaining time.
Fitting model: WeightedEnsemble_L2 ... Training model for up to 299.92s of the 299.90s of remaining time.
	Ensemble Weights: {'LinearModel': 1.0}
	Ensemble Weights: {'LinearModel': 1.0}
	Ensemble Weights: {'LinearModel': 1.0}
	Ensemble Weights: {'LinearModel': 1.0}
	Ensemble Weights: {'LinearModel': 1.0}
	Ensemble Weights: {'LinearModel': 1.0}
	-0.0124	 = Validation score   (-mean_absolute_error)
	-0.0124	 = Validation score   (-mean_absolute_error)
	-0.0124	 = Validation score   (-mean_absolute_error)
	-0.0124	 = Validation score   (-mean_absolute_error)
	-0.0124	 = Validation score   (-mean_absolute_error)
	-0.0124	 = Validation score   (-mean_absolute_error)
	0.01s	 = Training   runtime
	0.01s	 = Training   runtime
	0.01s	 = Training   runtime
	0.01s	 = Training   runtime
	0.01s	 = Training   runtime
	0.01s	 = Training   runtime
	0.0s	 = Validation runtime
	0.0s	 = Validation runtime
	0.0s	 = Validation runtime
	0.0s	 = Validation runtime
	0.0s	 = Validation runtime
	0.0s	 = Validation runtime
AutoGluon training complete, total runtime = 0.14s ... Best model: WeightedEnsemble_L2 | Estimated inference throughput: 5998.6 rows/s (24 batch size)
AutoGluon training complete, total runtime = 0.14s ... Best model: WeightedEnsemble_L2 | Estimated inference throughput: 5998.6 rows/s (24 batch size)
AutoGluon training complete, total runtime = 0.14s ... Best model: WeightedEnsemble_L2 | Estimated inference throughput: 5998.6 rows/s (24 batch size)
AutoGluon training complete, total runtime = 0.14s ... Best model: WeightedEnsemble_L2 | Estimated inference throughput: 5998.6 rows/s (24 batch size)
AutoGluon training complete, total runtime = 0.14s ... Best model: WeightedEnsemble_L2 | Estimated inference throughput: 5998.6 rows/s (24 batch size)
AutoGluon training complete, total runtime = 0.14s ... Best model: WeightedEnsemble_L2 | Estimated inference throughput: 5998.6 rows/s (24 batch size)
TabularPredictor saved. To load, use: predictor = TabularPredictor.load("D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo")
TabularPredictor saved. To load, use: predictor = TabularPredictor.load("D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo")
TabularPredictor saved. To load, use: predictor = TabularPredictor.load("D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo")
TabularPredictor saved. To load, use: predictor = TabularPredictor.load("D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo")
TabularPredictor saved. To load, use: predictor = TabularPredictor.load("D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo")
TabularPredictor saved. To load, use: predictor = TabularPredictor.load("D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo")
TabularPredictor saved. To load, use: predictor = TabularPredictor.load("D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo")
TabularPredictor saved. To load, use: predictor = TabularPredictor.load("D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo")
TabularPredictor saved. To load, use: predictor = TabularPredictor.load("D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo")
TabularPredictor saved. To load, use: predictor = TabularPredictor.load("D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo")
TabularPredictor saved. To load, use: predictor = TabularPredictor.load("D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo")
TabularPredictor saved. To load, use: predictor = TabularPredictor.load("D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo")
Warning: path already exists! This predictor may overwrite an existing predictor! path="predicts/XARIMA/modelo"
Warning: path already exists! This predictor may overwrite an existing predictor! path="predicts/XARIMA/modelo"
Warning: path already exists! This predictor may overwrite an existing predictor! path="predicts/XARIMA/modelo"
Warning: path already exists! This predictor may overwrite an existing predictor! path="predicts/XARIMA/modelo"
Warning: path already exists! This predictor may overwrite an existing predictor! path="predicts/XARIMA/modelo"
Warning: path already exists! This predictor may overwrite an existing predictor! path="predicts/XARIMA/modelo"
Beginning AutoGluon training... Time limit = 300s
Beginning AutoGluon training... Time limit = 300s
Beginning AutoGluon training... Time limit = 300s
Beginning AutoGluon training... Time limit = 300s
Beginning AutoGluon training... Time limit = 300s
Beginning AutoGluon training... Time limit = 300s
Beginning AutoGluon training... Time limit = 300s
AutoGluon will save models to 'D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\XARIMA\modelo'
AutoGluon will save models to 'D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\XARIMA\modelo'
AutoGluon will save models to 'D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\XARIMA\modelo'
AutoGluon will save models to 'D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\XARIMA\modelo'
AutoGluon will save models to 'D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\XARIMA\modelo'
AutoGluon will save models to 'D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\XARIMA\modelo'
AutoGluon will save models to 'D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\XARIMA\modelo'
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
GPU Count:          0
Memory Avail:       3.57 GB / 15.93 GB (22.4%)
Disk Space Avail:   701.42 GB / 931.46 GB (75.3%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
GPU Count:          0
Memory Avail:       3.57 GB / 15.93 GB (22.4%)
Disk Space Avail:   701.42 GB / 931.46 GB (75.3%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
GPU Count:          0
Memory Avail:       3.57 GB / 15.93 GB (22.4%)
Disk Space Avail:   701.42 GB / 931.46 GB (75.3%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
GPU Count:          0
Memory Avail:       3.57 GB / 15.93 GB (22.4%)
Disk Space Avail:   701.42 GB / 931.46 GB (75.3%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
GPU Count:          0
Memory Avail:       3.57 GB / 15.93 GB (22.4%)
Disk Space Avail:   701.42 GB / 931.46 GB (75.3%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
GPU Count:          0
Memory Avail:       3.57 GB / 15.93 GB (22.4%)
Disk Space Avail:   701.42 GB / 931.46 GB (75.3%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
GPU Count:          0
Memory Avail:       3.57 GB / 15.93 GB (22.4%)
Disk Space Avail:   701.42 GB / 931.46 GB (75.3%)
===================================================
Setting presets to: medium_quality
Setting presets to: medium_quality
Setting presets to: medium_quality
Setting presets to: medium_quality
Setting presets to: medium_quality
Setting presets to: medium_quality
Setting presets to: medium_quality

Fitting with arguments:

Fitting with arguments:

Fitting with arguments:

Fitting with arguments:

Fitting with arguments:

Fitting with arguments:

Fitting with arguments:
{'enable_ensemble': True,
 'eval_metric': WQL,
 'freq': 'h',
 'hyperparameters': {'ARIMAModel': {'covariate_regressor': 'CAT',
                                    'target_scaler': 'standard'}},
 'known_covariates_names': ['Hour', 'TimeOfDay', 'Temperature', 'DayOfTheWeek'],
 'num_val_windows': 1,
 'prediction_length': 24,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'EnergyNormalized',
 'time_limit': 300,
 'verbosity': 2}

{'enable_ensemble': True,
 'eval_metric': WQL,
 'freq': 'h',
 'hyperparameters': {'ARIMAModel': {'covariate_regressor': 'CAT',
                                    'target_scaler': 'standard'}},
 'known_covariates_names': ['Hour', 'TimeOfDay', 'Temperature', 'DayOfTheWeek'],
 'num_val_windows': 1,
 'prediction_length': 24,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'EnergyNormalized',
 'time_limit': 300,
 'verbosity': 2}

{'enable_ensemble': True,
 'eval_metric': WQL,
 'freq': 'h',
 'hyperparameters': {'ARIMAModel': {'covariate_regressor': 'CAT',
                                    'target_scaler': 'standard'}},
 'known_covariates_names': ['Hour', 'TimeOfDay', 'Temperature', 'DayOfTheWeek'],
 'num_val_windows': 1,
 'prediction_length': 24,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'EnergyNormalized',
 'time_limit': 300,
 'verbosity': 2}

{'enable_ensemble': True,
 'eval_metric': WQL,
 'freq': 'h',
 'hyperparameters': {'ARIMAModel': {'covariate_regressor': 'CAT',
                                    'target_scaler': 'standard'}},
 'known_covariates_names': ['Hour', 'TimeOfDay', 'Temperature', 'DayOfTheWeek'],
 'num_val_windows': 1,
 'prediction_length': 24,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'EnergyNormalized',
 'time_limit': 300,
 'verbosity': 2}

{'enable_ensemble': True,
 'eval_metric': WQL,
 'freq': 'h',
 'hyperparameters': {'ARIMAModel': {'covariate_regressor': 'CAT',
                                    'target_scaler': 'standard'}},
 'known_covariates_names': ['Hour', 'TimeOfDay', 'Temperature', 'DayOfTheWeek'],
 'num_val_windows': 1,
 'prediction_length': 24,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'EnergyNormalized',
 'time_limit': 300,
 'verbosity': 2}

{'enable_ensemble': True,
 'eval_metric': WQL,
 'freq': 'h',
 'hyperparameters': {'ARIMAModel': {'covariate_regressor': 'CAT',
                                    'target_scaler': 'standard'}},
 'known_covariates_names': ['Hour', 'TimeOfDay', 'Temperature', 'DayOfTheWeek'],
 'num_val_windows': 1,
 'prediction_length': 24,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'EnergyNormalized',
 'time_limit': 300,
 'verbosity': 2}

{'enable_ensemble': True,
 'eval_metric': WQL,
 'freq': 'h',
 'hyperparameters': {'ARIMAModel': {'covariate_regressor': 'CAT',
                                    'target_scaler': 'standard'}},
 'known_covariates_names': ['Hour', 'TimeOfDay', 'Temperature', 'DayOfTheWeek'],
 'num_val_windows': 1,
 'prediction_length': 24,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'EnergyNormalized',
 'time_limit': 300,
 'verbosity': 2}

Provided train_data has 7992 rows, 1 time series. Median time series length is 7992 (min=7992, max=7992). 
Provided train_data has 7992 rows, 1 time series. Median time series length is 7992 (min=7992, max=7992). 
Provided train_data has 7992 rows, 1 time series. Median time series length is 7992 (min=7992, max=7992). 
Provided train_data has 7992 rows, 1 time series. Median time series length is 7992 (min=7992, max=7992). 
Provided train_data has 7992 rows, 1 time series. Median time series length is 7992 (min=7992, max=7992). 
Provided train_data has 7992 rows, 1 time series. Median time series length is 7992 (min=7992, max=7992). 
Provided train_data has 7992 rows, 1 time series. Median time series length is 7992 (min=7992, max=7992). 
Provided tuning_data has 8016 rows, 1 time series. Median time series length is 8016 (min=8016, max=8016). 
Provided tuning_data has 8016 rows, 1 time series. Median time series length is 8016 (min=8016, max=8016). 
Provided tuning_data has 8016 rows, 1 time series. Median time series length is 8016 (min=8016, max=8016). 
Provided tuning_data has 8016 rows, 1 time series. Median time series length is 8016 (min=8016, max=8016). 
Provided tuning_data has 8016 rows, 1 time series. Median time series length is 8016 (min=8016, max=8016). 
Provided tuning_data has 8016 rows, 1 time series. Median time series length is 8016 (min=8016, max=8016). 
Provided tuning_data has 8016 rows, 1 time series. Median time series length is 8016 (min=8016, max=8016). 
	Setting num_val_windows = 0 (disabling backtesting on train_data) because tuning_data is provided.
	Setting num_val_windows = 0 (disabling backtesting on train_data) because tuning_data is provided.
	Setting num_val_windows = 0 (disabling backtesting on train_data) because tuning_data is provided.
	Setting num_val_windows = 0 (disabling backtesting on train_data) because tuning_data is provided.
	Setting num_val_windows = 0 (disabling backtesting on train_data) because tuning_data is provided.
	Setting num_val_windows = 0 (disabling backtesting on train_data) because tuning_data is provided.
	Setting num_val_windows = 0 (disabling backtesting on train_data) because tuning_data is provided.

Provided data contains following columns:

Provided data contains following columns:

Provided data contains following columns:

Provided data contains following columns:

Provided data contains following columns:

Provided data contains following columns:

Provided data contains following columns:
	target: 'EnergyNormalized'
	target: 'EnergyNormalized'
	target: 'EnergyNormalized'
	target: 'EnergyNormalized'
	target: 'EnergyNormalized'
	target: 'EnergyNormalized'
	target: 'EnergyNormalized'
	known_covariates:
	known_covariates:
	known_covariates:
	known_covariates:
	known_covariates:
	known_covariates:
	known_covariates:
		categorical:        ['TimeOfDay', 'DayOfTheWeek']
		categorical:        ['TimeOfDay', 'DayOfTheWeek']
		categorical:        ['TimeOfDay', 'DayOfTheWeek']
		categorical:        ['TimeOfDay', 'DayOfTheWeek']
		categorical:        ['TimeOfDay', 'DayOfTheWeek']
		categorical:        ['TimeOfDay', 'DayOfTheWeek']
		categorical:        ['TimeOfDay', 'DayOfTheWeek']
		continuous (float): ['Hour', 'Temperature']
		continuous (float): ['Hour', 'Temperature']
		continuous (float): ['Hour', 'Temperature']
		continuous (float): ['Hour', 'Temperature']
		continuous (float): ['Hour', 'Temperature']
		continuous (float): ['Hour', 'Temperature']
		continuous (float): ['Hour', 'Temperature']
	past_covariates:
	past_covariates:
	past_covariates:
	past_covariates:
	past_covariates:
	past_covariates:
	past_covariates:
		categorical:        ['Season']
		categorical:        ['Season']
		categorical:        ['Season']
		categorical:        ['Season']
		categorical:        ['Season']
		categorical:        ['Season']
		categorical:        ['Season']
		continuous (float): ['ActiveEnergy(kWh)', 'Day', 'Month', 'Year', 'IsWeekend', 'IsHoliday', ...]
		continuous (float): ['ActiveEnergy(kWh)', 'Day', 'Month', 'Year', 'IsWeekend', 'IsHoliday', ...]
		continuous (float): ['ActiveEnergy(kWh)', 'Day', 'Month', 'Year', 'IsWeekend', 'IsHoliday', ...]
		continuous (float): ['ActiveEnergy(kWh)', 'Day', 'Month', 'Year', 'IsWeekend', 'IsHoliday', ...]
		continuous (float): ['ActiveEnergy(kWh)', 'Day', 'Month', 'Year', 'IsWeekend', 'IsHoliday', ...]
		continuous (float): ['ActiveEnergy(kWh)', 'Day', 'Month', 'Year', 'IsWeekend', 'IsHoliday', ...]
		continuous (float): ['ActiveEnergy(kWh)', 'Day', 'Month', 'Year', 'IsWeekend', 'IsHoliday', ...]
	static_features:
	static_features:
	static_features:
	static_features:
	static_features:
	static_features:
	static_features:
		categorical:        []
		categorical:        []
		categorical:        []
		categorical:        []
		categorical:        []
		categorical:        []
		categorical:        []
		continuous (float): ['PopulationDensity']
		continuous (float): ['PopulationDensity']
		continuous (float): ['PopulationDensity']
		continuous (float): ['PopulationDensity']
		continuous (float): ['PopulationDensity']
		continuous (float): ['PopulationDensity']
		continuous (float): ['PopulationDensity']

AutoGluon will ignore following non-numeric/non-informative columns:

AutoGluon will ignore following non-numeric/non-informative columns:

AutoGluon will ignore following non-numeric/non-informative columns:

AutoGluon will ignore following non-numeric/non-informative columns:

AutoGluon will ignore following non-numeric/non-informative columns:

AutoGluon will ignore following non-numeric/non-informative columns:

AutoGluon will ignore following non-numeric/non-informative columns:
	ignored covariates:      ['Date']
	ignored covariates:      ['Date']
	ignored covariates:      ['Date']
	ignored covariates:      ['Date']
	ignored covariates:      ['Date']
	ignored covariates:      ['Date']
	ignored covariates:      ['Date']

To learn how to fix incorrectly inferred types, please see documentation for TimeSeriesPredictor.fit

To learn how to fix incorrectly inferred types, please see documentation for TimeSeriesPredictor.fit

To learn how to fix incorrectly inferred types, please see documentation for TimeSeriesPredictor.fit

To learn how to fix incorrectly inferred types, please see documentation for TimeSeriesPredictor.fit

To learn how to fix incorrectly inferred types, please see documentation for TimeSeriesPredictor.fit

To learn how to fix incorrectly inferred types, please see documentation for TimeSeriesPredictor.fit

To learn how to fix incorrectly inferred types, please see documentation for TimeSeriesPredictor.fit

AutoGluon will gauge predictive performance using evaluation metric: 'WQL'

AutoGluon will gauge predictive performance using evaluation metric: 'WQL'

AutoGluon will gauge predictive performance using evaluation metric: 'WQL'

AutoGluon will gauge predictive performance using evaluation metric: 'WQL'

AutoGluon will gauge predictive performance using evaluation metric: 'WQL'

AutoGluon will gauge predictive performance using evaluation metric: 'WQL'

AutoGluon will gauge predictive performance using evaluation metric: 'WQL'
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
===================================================
===================================================
===================================================
===================================================
===================================================
===================================================
===================================================

Starting training. Start time is 2025-04-23 10:55:50

Starting training. Start time is 2025-04-23 10:55:50

Starting training. Start time is 2025-04-23 10:55:50

Starting training. Start time is 2025-04-23 10:55:50

Starting training. Start time is 2025-04-23 10:55:50

Starting training. Start time is 2025-04-23 10:55:50

Starting training. Start time is 2025-04-23 10:55:50
Models that will be trained: ['ARIMA']
Models that will be trained: ['ARIMA']
Models that will be trained: ['ARIMA']
Models that will be trained: ['ARIMA']
Models that will be trained: ['ARIMA']
Models that will be trained: ['ARIMA']
Models that will be trained: ['ARIMA']
Training timeseries model ARIMA. Training for up to 300.0s of the 300.0s of remaining time.
Training timeseries model ARIMA. Training for up to 300.0s of the 300.0s of remaining time.
Training timeseries model ARIMA. Training for up to 300.0s of the 300.0s of remaining time.
Training timeseries model ARIMA. Training for up to 300.0s of the 300.0s of remaining time.
Training timeseries model ARIMA. Training for up to 300.0s of the 300.0s of remaining time.
Training timeseries model ARIMA. Training for up to 300.0s of the 300.0s of remaining time.
Training timeseries model ARIMA. Training for up to 300.0s of the 300.0s of remaining time.
Warning: No name was specified for model, defaulting to class name: CatBoostModel
Warning: No name was specified for model, defaulting to class name: CatBoostModel
Warning: No name was specified for model, defaulting to class name: CatBoostModel
Warning: No name was specified for model, defaulting to class name: CatBoostModel
Warning: No name was specified for model, defaulting to class name: CatBoostModel
Warning: No name was specified for model, defaulting to class name: CatBoostModel
Warning: No name was specified for model, defaulting to class name: CatBoostModel
No path specified. Models will be saved in: "AutogluonModels\ag-20250423_095550CatBoostModel"
No path specified. Models will be saved in: "AutogluonModels\ag-20250423_095550CatBoostModel"
No path specified. Models will be saved in: "AutogluonModels\ag-20250423_095550CatBoostModel"
No path specified. Models will be saved in: "AutogluonModels\ag-20250423_095550CatBoostModel"
No path specified. Models will be saved in: "AutogluonModels\ag-20250423_095550CatBoostModel"
No path specified. Models will be saved in: "AutogluonModels\ag-20250423_095550CatBoostModel"
No path specified. Models will be saved in: "AutogluonModels\ag-20250423_095550CatBoostModel"
Warning: No path was specified for model, defaulting to: D:\githubProjects\previsao-do-consumo-energetico-com-ml\AutogluonModels\ag-20250423_095550
Warning: No path was specified for model, defaulting to: D:\githubProjects\previsao-do-consumo-energetico-com-ml\AutogluonModels\ag-20250423_095550
Warning: No path was specified for model, defaulting to: D:\githubProjects\previsao-do-consumo-energetico-com-ml\AutogluonModels\ag-20250423_095550
Warning: No path was specified for model, defaulting to: D:\githubProjects\previsao-do-consumo-energetico-com-ml\AutogluonModels\ag-20250423_095550
Warning: No path was specified for model, defaulting to: D:\githubProjects\previsao-do-consumo-energetico-com-ml\AutogluonModels\ag-20250423_095550
Warning: No path was specified for model, defaulting to: D:\githubProjects\previsao-do-consumo-energetico-com-ml\AutogluonModels\ag-20250423_095550
Warning: No path was specified for model, defaulting to: D:\githubProjects\previsao-do-consumo-energetico-com-ml\AutogluonModels\ag-20250423_095550
	-0.0852       = Validation score (-WQL)
	-0.0852       = Validation score (-WQL)
	-0.0852       = Validation score (-WQL)
	-0.0852       = Validation score (-WQL)
	-0.0852       = Validation score (-WQL)
	-0.0852       = Validation score (-WQL)
	-0.0852       = Validation score (-WQL)
	14.08   s     = Training runtime
	14.08   s     = Training runtime
	14.08   s     = Training runtime
	14.08   s     = Training runtime
	14.08   s     = Training runtime
	14.08   s     = Training runtime
	14.08   s     = Training runtime
	2.51    s     = Validation (prediction) runtime
	2.51    s     = Validation (prediction) runtime
	2.51    s     = Validation (prediction) runtime
	2.51    s     = Validation (prediction) runtime
	2.51    s     = Validation (prediction) runtime
	2.51    s     = Validation (prediction) runtime
	2.51    s     = Validation (prediction) runtime
Not fitting ensemble as only 1 model was trained.
Not fitting ensemble as only 1 model was trained.
Not fitting ensemble as only 1 model was trained.
Not fitting ensemble as only 1 model was trained.
Not fitting ensemble as only 1 model was trained.
Not fitting ensemble as only 1 model was trained.
Not fitting ensemble as only 1 model was trained.
Training complete. Models trained: ['ARIMA']
Training complete. Models trained: ['ARIMA']
Training complete. Models trained: ['ARIMA']
Training complete. Models trained: ['ARIMA']
Training complete. Models trained: ['ARIMA']
Training complete. Models trained: ['ARIMA']
Training complete. Models trained: ['ARIMA']
Total runtime: 16.62 s
Total runtime: 16.62 s
Total runtime: 16.62 s
Total runtime: 16.62 s
Total runtime: 16.62 s
Total runtime: 16.62 s
Total runtime: 16.62 s
Best model: ARIMA
Best model: ARIMA
Best model: ARIMA
Best model: ARIMA
Best model: ARIMA
Best model: ARIMA
Best model: ARIMA
Best model score: -0.0852
Best model score: -0.0852
Best model score: -0.0852
Best model score: -0.0852
Best model score: -0.0852
Best model score: -0.0852
Best model score: -0.0852
Model not specified in predict, will default to the model with the best validation score: ARIMA
Model not specified in predict, will default to the model with the best validation score: ARIMA
Model not specified in predict, will default to the model with the best validation score: ARIMA
Model not specified in predict, will default to the model with the best validation score: ARIMA
Model not specified in predict, will default to the model with the best validation score: ARIMA
Model not specified in predict, will default to the model with the best validation score: ARIMA
Model not specified in predict, will default to the model with the best validation score: ARIMA
Model not specified in predict, will default to the model with the best validation score: ARIMA
Model not specified in predict, will default to the model with the best validation score: ARIMA
Model not specified in predict, will default to the model with the best validation score: ARIMA
Model not specified in predict, will default to the model with the best validation score: ARIMA
Model not specified in predict, will default to the model with the best validation score: ARIMA
Model not specified in predict, will default to the model with the best validation score: ARIMA
Model not specified in predict, will default to the model with the best validation score: ARIMA
Warning: path already exists! This predictor may overwrite an existing predictor! path="predicts/linearRegression/modelo"
Warning: path already exists! This predictor may overwrite an existing predictor! path="predicts/linearRegression/modelo"
Warning: path already exists! This predictor may overwrite an existing predictor! path="predicts/linearRegression/modelo"
Warning: path already exists! This predictor may overwrite an existing predictor! path="predicts/linearRegression/modelo"
Warning: path already exists! This predictor may overwrite an existing predictor! path="predicts/linearRegression/modelo"
Warning: path already exists! This predictor may overwrite an existing predictor! path="predicts/linearRegression/modelo"
Warning: path already exists! This predictor may overwrite an existing predictor! path="predicts/linearRegression/modelo"
Preset alias specified: 'medium' maps to 'medium_quality'.
Preset alias specified: 'medium' maps to 'medium_quality'.
Preset alias specified: 'medium' maps to 'medium_quality'.
Preset alias specified: 'medium' maps to 'medium_quality'.
Preset alias specified: 'medium' maps to 'medium_quality'.
Preset alias specified: 'medium' maps to 'medium_quality'.
Preset alias specified: 'medium' maps to 'medium_quality'.
Verbosity: 2 (Standard Logging)
Verbosity: 2 (Standard Logging)
Verbosity: 2 (Standard Logging)
Verbosity: 2 (Standard Logging)
Verbosity: 2 (Standard Logging)
Verbosity: 2 (Standard Logging)
Verbosity: 2 (Standard Logging)
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
Memory Avail:       3.07 GB / 15.93 GB (19.3%)
Disk Space Avail:   701.42 GB / 931.46 GB (75.3%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
Memory Avail:       3.07 GB / 15.93 GB (19.3%)
Disk Space Avail:   701.42 GB / 931.46 GB (75.3%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
Memory Avail:       3.07 GB / 15.93 GB (19.3%)
Disk Space Avail:   701.42 GB / 931.46 GB (75.3%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
Memory Avail:       3.07 GB / 15.93 GB (19.3%)
Disk Space Avail:   701.42 GB / 931.46 GB (75.3%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
Memory Avail:       3.07 GB / 15.93 GB (19.3%)
Disk Space Avail:   701.42 GB / 931.46 GB (75.3%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
Memory Avail:       3.07 GB / 15.93 GB (19.3%)
Disk Space Avail:   701.42 GB / 931.46 GB (75.3%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
Memory Avail:       3.07 GB / 15.93 GB (19.3%)
Disk Space Avail:   701.42 GB / 931.46 GB (75.3%)
===================================================
Presets specified: ['medium']
Presets specified: ['medium']
Presets specified: ['medium']
Presets specified: ['medium']
Presets specified: ['medium']
Presets specified: ['medium']
Presets specified: ['medium']
Beginning AutoGluon training ... Time limit = 300s
Beginning AutoGluon training ... Time limit = 300s
Beginning AutoGluon training ... Time limit = 300s
Beginning AutoGluon training ... Time limit = 300s
Beginning AutoGluon training ... Time limit = 300s
Beginning AutoGluon training ... Time limit = 300s
Beginning AutoGluon training ... Time limit = 300s
AutoGluon will save models to "D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo"
AutoGluon will save models to "D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo"
AutoGluon will save models to "D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo"
AutoGluon will save models to "D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo"
AutoGluon will save models to "D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo"
AutoGluon will save models to "D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo"
AutoGluon will save models to "D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo"
Train Data Rows:    7992
Train Data Rows:    7992
Train Data Rows:    7992
Train Data Rows:    7992
Train Data Rows:    7992
Train Data Rows:    7992
Train Data Rows:    7992
Train Data Columns: 4
Train Data Columns: 4
Train Data Columns: 4
Train Data Columns: 4
Train Data Columns: 4
Train Data Columns: 4
Train Data Columns: 4
Tuning Data Rows:    24
Tuning Data Rows:    24
Tuning Data Rows:    24
Tuning Data Rows:    24
Tuning Data Rows:    24
Tuning Data Rows:    24
Tuning Data Rows:    24
Tuning Data Columns: 4
Tuning Data Columns: 4
Tuning Data Columns: 4
Tuning Data Columns: 4
Tuning Data Columns: 4
Tuning Data Columns: 4
Tuning Data Columns: 4
Label Column:       EnergyNormalized
Label Column:       EnergyNormalized
Label Column:       EnergyNormalized
Label Column:       EnergyNormalized
Label Column:       EnergyNormalized
Label Column:       EnergyNormalized
Label Column:       EnergyNormalized
AutoGluon infers your prediction problem is: 'regression' (because dtype of label-column == float and many unique label-values observed).
AutoGluon infers your prediction problem is: 'regression' (because dtype of label-column == float and many unique label-values observed).
AutoGluon infers your prediction problem is: 'regression' (because dtype of label-column == float and many unique label-values observed).
AutoGluon infers your prediction problem is: 'regression' (because dtype of label-column == float and many unique label-values observed).
AutoGluon infers your prediction problem is: 'regression' (because dtype of label-column == float and many unique label-values observed).
AutoGluon infers your prediction problem is: 'regression' (because dtype of label-column == float and many unique label-values observed).
AutoGluon infers your prediction problem is: 'regression' (because dtype of label-column == float and many unique label-values observed).
	Label info (max, min, mean, stddev): (0.1517218738549846, 0.005890280091559903, 0.06812, 0.02939)
	Label info (max, min, mean, stddev): (0.1517218738549846, 0.005890280091559903, 0.06812, 0.02939)
	Label info (max, min, mean, stddev): (0.1517218738549846, 0.005890280091559903, 0.06812, 0.02939)
	Label info (max, min, mean, stddev): (0.1517218738549846, 0.005890280091559903, 0.06812, 0.02939)
	Label info (max, min, mean, stddev): (0.1517218738549846, 0.005890280091559903, 0.06812, 0.02939)
	Label info (max, min, mean, stddev): (0.1517218738549846, 0.005890280091559903, 0.06812, 0.02939)
	Label info (max, min, mean, stddev): (0.1517218738549846, 0.005890280091559903, 0.06812, 0.02939)
	If 'regression' is not the correct problem_type, please manually specify the problem_type parameter during Predictor init (You may specify problem_type as one of: ['binary', 'multiclass', 'regression', 'quantile'])
	If 'regression' is not the correct problem_type, please manually specify the problem_type parameter during Predictor init (You may specify problem_type as one of: ['binary', 'multiclass', 'regression', 'quantile'])
	If 'regression' is not the correct problem_type, please manually specify the problem_type parameter during Predictor init (You may specify problem_type as one of: ['binary', 'multiclass', 'regression', 'quantile'])
	If 'regression' is not the correct problem_type, please manually specify the problem_type parameter during Predictor init (You may specify problem_type as one of: ['binary', 'multiclass', 'regression', 'quantile'])
	If 'regression' is not the correct problem_type, please manually specify the problem_type parameter during Predictor init (You may specify problem_type as one of: ['binary', 'multiclass', 'regression', 'quantile'])
	If 'regression' is not the correct problem_type, please manually specify the problem_type parameter during Predictor init (You may specify problem_type as one of: ['binary', 'multiclass', 'regression', 'quantile'])
	If 'regression' is not the correct problem_type, please manually specify the problem_type parameter during Predictor init (You may specify problem_type as one of: ['binary', 'multiclass', 'regression', 'quantile'])
Problem Type:       regression
Problem Type:       regression
Problem Type:       regression
Problem Type:       regression
Problem Type:       regression
Problem Type:       regression
Problem Type:       regression
Preprocessing data ...
Preprocessing data ...
Preprocessing data ...
Preprocessing data ...
Preprocessing data ...
Preprocessing data ...
Preprocessing data ...
Using Feature Generators to preprocess the data ...
Using Feature Generators to preprocess the data ...
Using Feature Generators to preprocess the data ...
Using Feature Generators to preprocess the data ...
Using Feature Generators to preprocess the data ...
Using Feature Generators to preprocess the data ...
Using Feature Generators to preprocess the data ...
Fitting AutoMLPipelineFeatureGenerator...
Fitting AutoMLPipelineFeatureGenerator...
Fitting AutoMLPipelineFeatureGenerator...
Fitting AutoMLPipelineFeatureGenerator...
Fitting AutoMLPipelineFeatureGenerator...
Fitting AutoMLPipelineFeatureGenerator...
Fitting AutoMLPipelineFeatureGenerator...
	Available Memory:                    3141.57 MB
	Available Memory:                    3141.57 MB
	Available Memory:                    3141.57 MB
	Available Memory:                    3141.57 MB
	Available Memory:                    3141.57 MB
	Available Memory:                    3141.57 MB
	Available Memory:                    3141.57 MB
	Train Data (Original)  Memory Usage: 1.14 MB (0.0% of available memory)
	Train Data (Original)  Memory Usage: 1.14 MB (0.0% of available memory)
	Train Data (Original)  Memory Usage: 1.14 MB (0.0% of available memory)
	Train Data (Original)  Memory Usage: 1.14 MB (0.0% of available memory)
	Train Data (Original)  Memory Usage: 1.14 MB (0.0% of available memory)
	Train Data (Original)  Memory Usage: 1.14 MB (0.0% of available memory)
	Train Data (Original)  Memory Usage: 1.14 MB (0.0% of available memory)
	Inferring data type of each feature based on column values. Set feature_metadata_in to manually specify special dtypes of the features.
	Inferring data type of each feature based on column values. Set feature_metadata_in to manually specify special dtypes of the features.
	Inferring data type of each feature based on column values. Set feature_metadata_in to manually specify special dtypes of the features.
	Inferring data type of each feature based on column values. Set feature_metadata_in to manually specify special dtypes of the features.
	Inferring data type of each feature based on column values. Set feature_metadata_in to manually specify special dtypes of the features.
	Inferring data type of each feature based on column values. Set feature_metadata_in to manually specify special dtypes of the features.
	Inferring data type of each feature based on column values. Set feature_metadata_in to manually specify special dtypes of the features.
	Stage 1 Generators:
	Stage 1 Generators:
	Stage 1 Generators:
	Stage 1 Generators:
	Stage 1 Generators:
	Stage 1 Generators:
	Stage 1 Generators:
		Fitting AsTypeFeatureGenerator...
		Fitting AsTypeFeatureGenerator...
		Fitting AsTypeFeatureGenerator...
		Fitting AsTypeFeatureGenerator...
		Fitting AsTypeFeatureGenerator...
		Fitting AsTypeFeatureGenerator...
		Fitting AsTypeFeatureGenerator...
	Stage 2 Generators:
	Stage 2 Generators:
	Stage 2 Generators:
	Stage 2 Generators:
	Stage 2 Generators:
	Stage 2 Generators:
	Stage 2 Generators:
		Fitting FillNaFeatureGenerator...
		Fitting FillNaFeatureGenerator...
		Fitting FillNaFeatureGenerator...
		Fitting FillNaFeatureGenerator...
		Fitting FillNaFeatureGenerator...
		Fitting FillNaFeatureGenerator...
		Fitting FillNaFeatureGenerator...
	Stage 3 Generators:
	Stage 3 Generators:
	Stage 3 Generators:
	Stage 3 Generators:
	Stage 3 Generators:
	Stage 3 Generators:
	Stage 3 Generators:
		Fitting IdentityFeatureGenerator...
		Fitting IdentityFeatureGenerator...
		Fitting IdentityFeatureGenerator...
		Fitting IdentityFeatureGenerator...
		Fitting IdentityFeatureGenerator...
		Fitting IdentityFeatureGenerator...
		Fitting IdentityFeatureGenerator...
		Fitting CategoryFeatureGenerator...
		Fitting CategoryFeatureGenerator...
		Fitting CategoryFeatureGenerator...
		Fitting CategoryFeatureGenerator...
		Fitting CategoryFeatureGenerator...
		Fitting CategoryFeatureGenerator...
		Fitting CategoryFeatureGenerator...
			Fitting CategoryMemoryMinimizeFeatureGenerator...
			Fitting CategoryMemoryMinimizeFeatureGenerator...
			Fitting CategoryMemoryMinimizeFeatureGenerator...
			Fitting CategoryMemoryMinimizeFeatureGenerator...
			Fitting CategoryMemoryMinimizeFeatureGenerator...
			Fitting CategoryMemoryMinimizeFeatureGenerator...
			Fitting CategoryMemoryMinimizeFeatureGenerator...
	Stage 4 Generators:
	Stage 4 Generators:
	Stage 4 Generators:
	Stage 4 Generators:
	Stage 4 Generators:
	Stage 4 Generators:
	Stage 4 Generators:
		Fitting DropUniqueFeatureGenerator...
		Fitting DropUniqueFeatureGenerator...
		Fitting DropUniqueFeatureGenerator...
		Fitting DropUniqueFeatureGenerator...
		Fitting DropUniqueFeatureGenerator...
		Fitting DropUniqueFeatureGenerator...
		Fitting DropUniqueFeatureGenerator...
	Stage 5 Generators:
	Stage 5 Generators:
	Stage 5 Generators:
	Stage 5 Generators:
	Stage 5 Generators:
	Stage 5 Generators:
	Stage 5 Generators:
		Fitting DropDuplicatesFeatureGenerator...
		Fitting DropDuplicatesFeatureGenerator...
		Fitting DropDuplicatesFeatureGenerator...
		Fitting DropDuplicatesFeatureGenerator...
		Fitting DropDuplicatesFeatureGenerator...
		Fitting DropDuplicatesFeatureGenerator...
		Fitting DropDuplicatesFeatureGenerator...
	Types of features in original data (raw dtype, special dtypes):
	Types of features in original data (raw dtype, special dtypes):
	Types of features in original data (raw dtype, special dtypes):
	Types of features in original data (raw dtype, special dtypes):
	Types of features in original data (raw dtype, special dtypes):
	Types of features in original data (raw dtype, special dtypes):
	Types of features in original data (raw dtype, special dtypes):
		('float', [])  : 1 | ['Temperature']
		('float', [])  : 1 | ['Temperature']
		('float', [])  : 1 | ['Temperature']
		('float', [])  : 1 | ['Temperature']
		('float', [])  : 1 | ['Temperature']
		('float', [])  : 1 | ['Temperature']
		('float', [])  : 1 | ['Temperature']
		('int', [])    : 1 | ['Hour']
		('int', [])    : 1 | ['Hour']
		('int', [])    : 1 | ['Hour']
		('int', [])    : 1 | ['Hour']
		('int', [])    : 1 | ['Hour']
		('int', [])    : 1 | ['Hour']
		('int', [])    : 1 | ['Hour']
		('object', []) : 2 | ['TimeOfDay', 'DayOfTheWeek']
		('object', []) : 2 | ['TimeOfDay', 'DayOfTheWeek']
		('object', []) : 2 | ['TimeOfDay', 'DayOfTheWeek']
		('object', []) : 2 | ['TimeOfDay', 'DayOfTheWeek']
		('object', []) : 2 | ['TimeOfDay', 'DayOfTheWeek']
		('object', []) : 2 | ['TimeOfDay', 'DayOfTheWeek']
		('object', []) : 2 | ['TimeOfDay', 'DayOfTheWeek']
	Types of features in processed data (raw dtype, special dtypes):
	Types of features in processed data (raw dtype, special dtypes):
	Types of features in processed data (raw dtype, special dtypes):
	Types of features in processed data (raw dtype, special dtypes):
	Types of features in processed data (raw dtype, special dtypes):
	Types of features in processed data (raw dtype, special dtypes):
	Types of features in processed data (raw dtype, special dtypes):
		('category', []) : 2 | ['TimeOfDay', 'DayOfTheWeek']
		('category', []) : 2 | ['TimeOfDay', 'DayOfTheWeek']
		('category', []) : 2 | ['TimeOfDay', 'DayOfTheWeek']
		('category', []) : 2 | ['TimeOfDay', 'DayOfTheWeek']
		('category', []) : 2 | ['TimeOfDay', 'DayOfTheWeek']
		('category', []) : 2 | ['TimeOfDay', 'DayOfTheWeek']
		('category', []) : 2 | ['TimeOfDay', 'DayOfTheWeek']
		('float', [])    : 1 | ['Temperature']
		('float', [])    : 1 | ['Temperature']
		('float', [])    : 1 | ['Temperature']
		('float', [])    : 1 | ['Temperature']
		('float', [])    : 1 | ['Temperature']
		('float', [])    : 1 | ['Temperature']
		('float', [])    : 1 | ['Temperature']
		('int', [])      : 1 | ['Hour']
		('int', [])      : 1 | ['Hour']
		('int', [])      : 1 | ['Hour']
		('int', [])      : 1 | ['Hour']
		('int', [])      : 1 | ['Hour']
		('int', [])      : 1 | ['Hour']
		('int', [])      : 1 | ['Hour']
	0.1s = Fit runtime
	0.1s = Fit runtime
	0.1s = Fit runtime
	0.1s = Fit runtime
	0.1s = Fit runtime
	0.1s = Fit runtime
	0.1s = Fit runtime
	4 features in original data used to generate 4 features in processed data.
	4 features in original data used to generate 4 features in processed data.
	4 features in original data used to generate 4 features in processed data.
	4 features in original data used to generate 4 features in processed data.
	4 features in original data used to generate 4 features in processed data.
	4 features in original data used to generate 4 features in processed data.
	4 features in original data used to generate 4 features in processed data.
	Train Data (Processed) Memory Usage: 0.11 MB (0.0% of available memory)
	Train Data (Processed) Memory Usage: 0.11 MB (0.0% of available memory)
	Train Data (Processed) Memory Usage: 0.11 MB (0.0% of available memory)
	Train Data (Processed) Memory Usage: 0.11 MB (0.0% of available memory)
	Train Data (Processed) Memory Usage: 0.11 MB (0.0% of available memory)
	Train Data (Processed) Memory Usage: 0.11 MB (0.0% of available memory)
	Train Data (Processed) Memory Usage: 0.11 MB (0.0% of available memory)
Data preprocessing and feature engineering runtime = 0.08s ...
Data preprocessing and feature engineering runtime = 0.08s ...
Data preprocessing and feature engineering runtime = 0.08s ...
Data preprocessing and feature engineering runtime = 0.08s ...
Data preprocessing and feature engineering runtime = 0.08s ...
Data preprocessing and feature engineering runtime = 0.08s ...
Data preprocessing and feature engineering runtime = 0.08s ...
AutoGluon will gauge predictive performance using evaluation metric: 'mean_absolute_error'
AutoGluon will gauge predictive performance using evaluation metric: 'mean_absolute_error'
AutoGluon will gauge predictive performance using evaluation metric: 'mean_absolute_error'
AutoGluon will gauge predictive performance using evaluation metric: 'mean_absolute_error'
AutoGluon will gauge predictive performance using evaluation metric: 'mean_absolute_error'
AutoGluon will gauge predictive performance using evaluation metric: 'mean_absolute_error'
AutoGluon will gauge predictive performance using evaluation metric: 'mean_absolute_error'
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	To change this, specify the eval_metric parameter of Predictor()
	To change this, specify the eval_metric parameter of Predictor()
	To change this, specify the eval_metric parameter of Predictor()
	To change this, specify the eval_metric parameter of Predictor()
	To change this, specify the eval_metric parameter of Predictor()
	To change this, specify the eval_metric parameter of Predictor()
	To change this, specify the eval_metric parameter of Predictor()
User-specified model hyperparameters to be fit:
{
	'LR': [{}],
}
User-specified model hyperparameters to be fit:
{
	'LR': [{}],
}
User-specified model hyperparameters to be fit:
{
	'LR': [{}],
}
User-specified model hyperparameters to be fit:
{
	'LR': [{}],
}
User-specified model hyperparameters to be fit:
{
	'LR': [{}],
}
User-specified model hyperparameters to be fit:
{
	'LR': [{}],
}
User-specified model hyperparameters to be fit:
{
	'LR': [{}],
}
Fitting 1 L1 models, fit_strategy="sequential" ...
Fitting 1 L1 models, fit_strategy="sequential" ...
Fitting 1 L1 models, fit_strategy="sequential" ...
Fitting 1 L1 models, fit_strategy="sequential" ...
Fitting 1 L1 models, fit_strategy="sequential" ...
Fitting 1 L1 models, fit_strategy="sequential" ...
Fitting 1 L1 models, fit_strategy="sequential" ...
Fitting model: LinearModel ... Training model for up to 299.92s of the 299.92s of remaining time.
Fitting model: LinearModel ... Training model for up to 299.92s of the 299.92s of remaining time.
Fitting model: LinearModel ... Training model for up to 299.92s of the 299.92s of remaining time.
Fitting model: LinearModel ... Training model for up to 299.92s of the 299.92s of remaining time.
Fitting model: LinearModel ... Training model for up to 299.92s of the 299.92s of remaining time.
Fitting model: LinearModel ... Training model for up to 299.92s of the 299.92s of remaining time.
Fitting model: LinearModel ... Training model for up to 299.92s of the 299.92s of remaining time.
	-0.0124	 = Validation score   (-mean_absolute_error)
	-0.0124	 = Validation score   (-mean_absolute_error)
	-0.0124	 = Validation score   (-mean_absolute_error)
	-0.0124	 = Validation score   (-mean_absolute_error)
	-0.0124	 = Validation score   (-mean_absolute_error)
	-0.0124	 = Validation score   (-mean_absolute_error)
	-0.0124	 = Validation score   (-mean_absolute_error)
	0.02s	 = Training   runtime
	0.02s	 = Training   runtime
	0.02s	 = Training   runtime
	0.02s	 = Training   runtime
	0.02s	 = Training   runtime
	0.02s	 = Training   runtime
	0.02s	 = Training   runtime
	0.0s	 = Validation runtime
	0.0s	 = Validation runtime
	0.0s	 = Validation runtime
	0.0s	 = Validation runtime
	0.0s	 = Validation runtime
	0.0s	 = Validation runtime
	0.0s	 = Validation runtime
Fitting model: WeightedEnsemble_L2 ... Training model for up to 299.92s of the 299.89s of remaining time.
Fitting model: WeightedEnsemble_L2 ... Training model for up to 299.92s of the 299.89s of remaining time.
Fitting model: WeightedEnsemble_L2 ... Training model for up to 299.92s of the 299.89s of remaining time.
Fitting model: WeightedEnsemble_L2 ... Training model for up to 299.92s of the 299.89s of remaining time.
Fitting model: WeightedEnsemble_L2 ... Training model for up to 299.92s of the 299.89s of remaining time.
Fitting model: WeightedEnsemble_L2 ... Training model for up to 299.92s of the 299.89s of remaining time.
Fitting model: WeightedEnsemble_L2 ... Training model for up to 299.92s of the 299.89s of remaining time.
	Ensemble Weights: {'LinearModel': 1.0}
	Ensemble Weights: {'LinearModel': 1.0}
	Ensemble Weights: {'LinearModel': 1.0}
	Ensemble Weights: {'LinearModel': 1.0}
	Ensemble Weights: {'LinearModel': 1.0}
	Ensemble Weights: {'LinearModel': 1.0}
	Ensemble Weights: {'LinearModel': 1.0}
	-0.0124	 = Validation score   (-mean_absolute_error)
	-0.0124	 = Validation score   (-mean_absolute_error)
	-0.0124	 = Validation score   (-mean_absolute_error)
	-0.0124	 = Validation score   (-mean_absolute_error)
	-0.0124	 = Validation score   (-mean_absolute_error)
	-0.0124	 = Validation score   (-mean_absolute_error)
	-0.0124	 = Validation score   (-mean_absolute_error)
	0.01s	 = Training   runtime
	0.01s	 = Training   runtime
	0.01s	 = Training   runtime
	0.01s	 = Training   runtime
	0.01s	 = Training   runtime
	0.01s	 = Training   runtime
	0.01s	 = Training   runtime
	0.0s	 = Validation runtime
	0.0s	 = Validation runtime
	0.0s	 = Validation runtime
	0.0s	 = Validation runtime
	0.0s	 = Validation runtime
	0.0s	 = Validation runtime
	0.0s	 = Validation runtime
AutoGluon training complete, total runtime = 0.13s ... Best model: WeightedEnsemble_L2 | Estimated inference throughput: 11840.0 rows/s (24 batch size)
AutoGluon training complete, total runtime = 0.13s ... Best model: WeightedEnsemble_L2 | Estimated inference throughput: 11840.0 rows/s (24 batch size)
AutoGluon training complete, total runtime = 0.13s ... Best model: WeightedEnsemble_L2 | Estimated inference throughput: 11840.0 rows/s (24 batch size)
AutoGluon training complete, total runtime = 0.13s ... Best model: WeightedEnsemble_L2 | Estimated inference throughput: 11840.0 rows/s (24 batch size)
AutoGluon training complete, total runtime = 0.13s ... Best model: WeightedEnsemble_L2 | Estimated inference throughput: 11840.0 rows/s (24 batch size)
AutoGluon training complete, total runtime = 0.13s ... Best model: WeightedEnsemble_L2 | Estimated inference throughput: 11840.0 rows/s (24 batch size)
AutoGluon training complete, total runtime = 0.13s ... Best model: WeightedEnsemble_L2 | Estimated inference throughput: 11840.0 rows/s (24 batch size)
TabularPredictor saved. To load, use: predictor = TabularPredictor.load("D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo")
TabularPredictor saved. To load, use: predictor = TabularPredictor.load("D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo")
TabularPredictor saved. To load, use: predictor = TabularPredictor.load("D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo")
TabularPredictor saved. To load, use: predictor = TabularPredictor.load("D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo")
TabularPredictor saved. To load, use: predictor = TabularPredictor.load("D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo")
TabularPredictor saved. To load, use: predictor = TabularPredictor.load("D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo")
TabularPredictor saved. To load, use: predictor = TabularPredictor.load("D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo")
TabularPredictor saved. To load, use: predictor = TabularPredictor.load("D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo")
TabularPredictor saved. To load, use: predictor = TabularPredictor.load("D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo")
TabularPredictor saved. To load, use: predictor = TabularPredictor.load("D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo")
TabularPredictor saved. To load, use: predictor = TabularPredictor.load("D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo")
TabularPredictor saved. To load, use: predictor = TabularPredictor.load("D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo")
TabularPredictor saved. To load, use: predictor = TabularPredictor.load("D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo")
TabularPredictor saved. To load, use: predictor = TabularPredictor.load("D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo")
Warning: path already exists! This predictor may overwrite an existing predictor! path="predicts/XARIMA/modelo"
Warning: path already exists! This predictor may overwrite an existing predictor! path="predicts/XARIMA/modelo"
Warning: path already exists! This predictor may overwrite an existing predictor! path="predicts/XARIMA/modelo"
Warning: path already exists! This predictor may overwrite an existing predictor! path="predicts/XARIMA/modelo"
Warning: path already exists! This predictor may overwrite an existing predictor! path="predicts/XARIMA/modelo"
Warning: path already exists! This predictor may overwrite an existing predictor! path="predicts/XARIMA/modelo"
Warning: path already exists! This predictor may overwrite an existing predictor! path="predicts/XARIMA/modelo"
Beginning AutoGluon training... Time limit = 300s
Beginning AutoGluon training... Time limit = 300s
Beginning AutoGluon training... Time limit = 300s
Beginning AutoGluon training... Time limit = 300s
Beginning AutoGluon training... Time limit = 300s
Beginning AutoGluon training... Time limit = 300s
Beginning AutoGluon training... Time limit = 300s
Beginning AutoGluon training... Time limit = 300s
AutoGluon will save models to 'D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\XARIMA\modelo'
AutoGluon will save models to 'D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\XARIMA\modelo'
AutoGluon will save models to 'D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\XARIMA\modelo'
AutoGluon will save models to 'D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\XARIMA\modelo'
AutoGluon will save models to 'D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\XARIMA\modelo'
AutoGluon will save models to 'D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\XARIMA\modelo'
AutoGluon will save models to 'D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\XARIMA\modelo'
AutoGluon will save models to 'D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\XARIMA\modelo'
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
GPU Count:          0
Memory Avail:       3.78 GB / 15.93 GB (23.7%)
Disk Space Avail:   701.42 GB / 931.46 GB (75.3%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
GPU Count:          0
Memory Avail:       3.78 GB / 15.93 GB (23.7%)
Disk Space Avail:   701.42 GB / 931.46 GB (75.3%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
GPU Count:          0
Memory Avail:       3.78 GB / 15.93 GB (23.7%)
Disk Space Avail:   701.42 GB / 931.46 GB (75.3%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
GPU Count:          0
Memory Avail:       3.78 GB / 15.93 GB (23.7%)
Disk Space Avail:   701.42 GB / 931.46 GB (75.3%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
GPU Count:          0
Memory Avail:       3.78 GB / 15.93 GB (23.7%)
Disk Space Avail:   701.42 GB / 931.46 GB (75.3%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
GPU Count:          0
Memory Avail:       3.78 GB / 15.93 GB (23.7%)
Disk Space Avail:   701.42 GB / 931.46 GB (75.3%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
GPU Count:          0
Memory Avail:       3.78 GB / 15.93 GB (23.7%)
Disk Space Avail:   701.42 GB / 931.46 GB (75.3%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
GPU Count:          0
Memory Avail:       3.78 GB / 15.93 GB (23.7%)
Disk Space Avail:   701.42 GB / 931.46 GB (75.3%)
===================================================
Setting presets to: medium_quality
Setting presets to: medium_quality
Setting presets to: medium_quality
Setting presets to: medium_quality
Setting presets to: medium_quality
Setting presets to: medium_quality
Setting presets to: medium_quality
Setting presets to: medium_quality

Fitting with arguments:

Fitting with arguments:

Fitting with arguments:

Fitting with arguments:

Fitting with arguments:

Fitting with arguments:

Fitting with arguments:

Fitting with arguments:
{'enable_ensemble': True,
 'eval_metric': WQL,
 'freq': 'h',
 'hyperparameters': {'ARIMAModel': {'covariate_regressor': 'CAT',
                                    'target_scaler': 'standard'}},
 'known_covariates_names': ['Hour', 'TimeOfDay', 'Temperature', 'DayOfTheWeek'],
 'num_val_windows': 1,
 'prediction_length': 24,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'EnergyNormalized',
 'time_limit': 300,
 'verbosity': 2}

{'enable_ensemble': True,
 'eval_metric': WQL,
 'freq': 'h',
 'hyperparameters': {'ARIMAModel': {'covariate_regressor': 'CAT',
                                    'target_scaler': 'standard'}},
 'known_covariates_names': ['Hour', 'TimeOfDay', 'Temperature', 'DayOfTheWeek'],
 'num_val_windows': 1,
 'prediction_length': 24,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'EnergyNormalized',
 'time_limit': 300,
 'verbosity': 2}

{'enable_ensemble': True,
 'eval_metric': WQL,
 'freq': 'h',
 'hyperparameters': {'ARIMAModel': {'covariate_regressor': 'CAT',
                                    'target_scaler': 'standard'}},
 'known_covariates_names': ['Hour', 'TimeOfDay', 'Temperature', 'DayOfTheWeek'],
 'num_val_windows': 1,
 'prediction_length': 24,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'EnergyNormalized',
 'time_limit': 300,
 'verbosity': 2}

{'enable_ensemble': True,
 'eval_metric': WQL,
 'freq': 'h',
 'hyperparameters': {'ARIMAModel': {'covariate_regressor': 'CAT',
                                    'target_scaler': 'standard'}},
 'known_covariates_names': ['Hour', 'TimeOfDay', 'Temperature', 'DayOfTheWeek'],
 'num_val_windows': 1,
 'prediction_length': 24,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'EnergyNormalized',
 'time_limit': 300,
 'verbosity': 2}

{'enable_ensemble': True,
 'eval_metric': WQL,
 'freq': 'h',
 'hyperparameters': {'ARIMAModel': {'covariate_regressor': 'CAT',
                                    'target_scaler': 'standard'}},
 'known_covariates_names': ['Hour', 'TimeOfDay', 'Temperature', 'DayOfTheWeek'],
 'num_val_windows': 1,
 'prediction_length': 24,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'EnergyNormalized',
 'time_limit': 300,
 'verbosity': 2}

{'enable_ensemble': True,
 'eval_metric': WQL,
 'freq': 'h',
 'hyperparameters': {'ARIMAModel': {'covariate_regressor': 'CAT',
                                    'target_scaler': 'standard'}},
 'known_covariates_names': ['Hour', 'TimeOfDay', 'Temperature', 'DayOfTheWeek'],
 'num_val_windows': 1,
 'prediction_length': 24,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'EnergyNormalized',
 'time_limit': 300,
 'verbosity': 2}

{'enable_ensemble': True,
 'eval_metric': WQL,
 'freq': 'h',
 'hyperparameters': {'ARIMAModel': {'covariate_regressor': 'CAT',
                                    'target_scaler': 'standard'}},
 'known_covariates_names': ['Hour', 'TimeOfDay', 'Temperature', 'DayOfTheWeek'],
 'num_val_windows': 1,
 'prediction_length': 24,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'EnergyNormalized',
 'time_limit': 300,
 'verbosity': 2}

{'enable_ensemble': True,
 'eval_metric': WQL,
 'freq': 'h',
 'hyperparameters': {'ARIMAModel': {'covariate_regressor': 'CAT',
                                    'target_scaler': 'standard'}},
 'known_covariates_names': ['Hour', 'TimeOfDay', 'Temperature', 'DayOfTheWeek'],
 'num_val_windows': 1,
 'prediction_length': 24,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'EnergyNormalized',
 'time_limit': 300,
 'verbosity': 2}

Provided train_data has 7992 rows, 1 time series. Median time series length is 7992 (min=7992, max=7992). 
Provided train_data has 7992 rows, 1 time series. Median time series length is 7992 (min=7992, max=7992). 
Provided train_data has 7992 rows, 1 time series. Median time series length is 7992 (min=7992, max=7992). 
Provided train_data has 7992 rows, 1 time series. Median time series length is 7992 (min=7992, max=7992). 
Provided train_data has 7992 rows, 1 time series. Median time series length is 7992 (min=7992, max=7992). 
Provided train_data has 7992 rows, 1 time series. Median time series length is 7992 (min=7992, max=7992). 
Provided train_data has 7992 rows, 1 time series. Median time series length is 7992 (min=7992, max=7992). 
Provided train_data has 7992 rows, 1 time series. Median time series length is 7992 (min=7992, max=7992). 
Provided tuning_data has 8016 rows, 1 time series. Median time series length is 8016 (min=8016, max=8016). 
Provided tuning_data has 8016 rows, 1 time series. Median time series length is 8016 (min=8016, max=8016). 
Provided tuning_data has 8016 rows, 1 time series. Median time series length is 8016 (min=8016, max=8016). 
Provided tuning_data has 8016 rows, 1 time series. Median time series length is 8016 (min=8016, max=8016). 
Provided tuning_data has 8016 rows, 1 time series. Median time series length is 8016 (min=8016, max=8016). 
Provided tuning_data has 8016 rows, 1 time series. Median time series length is 8016 (min=8016, max=8016). 
Provided tuning_data has 8016 rows, 1 time series. Median time series length is 8016 (min=8016, max=8016). 
Provided tuning_data has 8016 rows, 1 time series. Median time series length is 8016 (min=8016, max=8016). 
	Setting num_val_windows = 0 (disabling backtesting on train_data) because tuning_data is provided.
	Setting num_val_windows = 0 (disabling backtesting on train_data) because tuning_data is provided.
	Setting num_val_windows = 0 (disabling backtesting on train_data) because tuning_data is provided.
	Setting num_val_windows = 0 (disabling backtesting on train_data) because tuning_data is provided.
	Setting num_val_windows = 0 (disabling backtesting on train_data) because tuning_data is provided.
	Setting num_val_windows = 0 (disabling backtesting on train_data) because tuning_data is provided.
	Setting num_val_windows = 0 (disabling backtesting on train_data) because tuning_data is provided.
	Setting num_val_windows = 0 (disabling backtesting on train_data) because tuning_data is provided.

Provided data contains following columns:

Provided data contains following columns:

Provided data contains following columns:

Provided data contains following columns:

Provided data contains following columns:

Provided data contains following columns:

Provided data contains following columns:

Provided data contains following columns:
	target: 'EnergyNormalized'
	target: 'EnergyNormalized'
	target: 'EnergyNormalized'
	target: 'EnergyNormalized'
	target: 'EnergyNormalized'
	target: 'EnergyNormalized'
	target: 'EnergyNormalized'
	target: 'EnergyNormalized'
	known_covariates:
	known_covariates:
	known_covariates:
	known_covariates:
	known_covariates:
	known_covariates:
	known_covariates:
	known_covariates:
		categorical:        ['TimeOfDay', 'DayOfTheWeek']
		categorical:        ['TimeOfDay', 'DayOfTheWeek']
		categorical:        ['TimeOfDay', 'DayOfTheWeek']
		categorical:        ['TimeOfDay', 'DayOfTheWeek']
		categorical:        ['TimeOfDay', 'DayOfTheWeek']
		categorical:        ['TimeOfDay', 'DayOfTheWeek']
		categorical:        ['TimeOfDay', 'DayOfTheWeek']
		categorical:        ['TimeOfDay', 'DayOfTheWeek']
		continuous (float): ['Hour', 'Temperature']
		continuous (float): ['Hour', 'Temperature']
		continuous (float): ['Hour', 'Temperature']
		continuous (float): ['Hour', 'Temperature']
		continuous (float): ['Hour', 'Temperature']
		continuous (float): ['Hour', 'Temperature']
		continuous (float): ['Hour', 'Temperature']
		continuous (float): ['Hour', 'Temperature']
	past_covariates:
	past_covariates:
	past_covariates:
	past_covariates:
	past_covariates:
	past_covariates:
	past_covariates:
	past_covariates:
		categorical:        ['Season']
		categorical:        ['Season']
		categorical:        ['Season']
		categorical:        ['Season']
		categorical:        ['Season']
		categorical:        ['Season']
		categorical:        ['Season']
		categorical:        ['Season']
		continuous (float): ['ActiveEnergy(kWh)', 'Day', 'Month', 'Year', 'IsWeekend', 'IsHoliday', ...]
		continuous (float): ['ActiveEnergy(kWh)', 'Day', 'Month', 'Year', 'IsWeekend', 'IsHoliday', ...]
		continuous (float): ['ActiveEnergy(kWh)', 'Day', 'Month', 'Year', 'IsWeekend', 'IsHoliday', ...]
		continuous (float): ['ActiveEnergy(kWh)', 'Day', 'Month', 'Year', 'IsWeekend', 'IsHoliday', ...]
		continuous (float): ['ActiveEnergy(kWh)', 'Day', 'Month', 'Year', 'IsWeekend', 'IsHoliday', ...]
		continuous (float): ['ActiveEnergy(kWh)', 'Day', 'Month', 'Year', 'IsWeekend', 'IsHoliday', ...]
		continuous (float): ['ActiveEnergy(kWh)', 'Day', 'Month', 'Year', 'IsWeekend', 'IsHoliday', ...]
		continuous (float): ['ActiveEnergy(kWh)', 'Day', 'Month', 'Year', 'IsWeekend', 'IsHoliday', ...]
	static_features:
	static_features:
	static_features:
	static_features:
	static_features:
	static_features:
	static_features:
	static_features:
		categorical:        []
		categorical:        []
		categorical:        []
		categorical:        []
		categorical:        []
		categorical:        []
		categorical:        []
		categorical:        []
		continuous (float): ['PopulationDensity']
		continuous (float): ['PopulationDensity']
		continuous (float): ['PopulationDensity']
		continuous (float): ['PopulationDensity']
		continuous (float): ['PopulationDensity']
		continuous (float): ['PopulationDensity']
		continuous (float): ['PopulationDensity']
		continuous (float): ['PopulationDensity']

AutoGluon will ignore following non-numeric/non-informative columns:

AutoGluon will ignore following non-numeric/non-informative columns:

AutoGluon will ignore following non-numeric/non-informative columns:

AutoGluon will ignore following non-numeric/non-informative columns:

AutoGluon will ignore following non-numeric/non-informative columns:

AutoGluon will ignore following non-numeric/non-informative columns:

AutoGluon will ignore following non-numeric/non-informative columns:

AutoGluon will ignore following non-numeric/non-informative columns:
	ignored covariates:      ['Date']
	ignored covariates:      ['Date']
	ignored covariates:      ['Date']
	ignored covariates:      ['Date']
	ignored covariates:      ['Date']
	ignored covariates:      ['Date']
	ignored covariates:      ['Date']
	ignored covariates:      ['Date']

To learn how to fix incorrectly inferred types, please see documentation for TimeSeriesPredictor.fit

To learn how to fix incorrectly inferred types, please see documentation for TimeSeriesPredictor.fit

To learn how to fix incorrectly inferred types, please see documentation for TimeSeriesPredictor.fit

To learn how to fix incorrectly inferred types, please see documentation for TimeSeriesPredictor.fit

To learn how to fix incorrectly inferred types, please see documentation for TimeSeriesPredictor.fit

To learn how to fix incorrectly inferred types, please see documentation for TimeSeriesPredictor.fit

To learn how to fix incorrectly inferred types, please see documentation for TimeSeriesPredictor.fit

To learn how to fix incorrectly inferred types, please see documentation for TimeSeriesPredictor.fit

AutoGluon will gauge predictive performance using evaluation metric: 'WQL'

AutoGluon will gauge predictive performance using evaluation metric: 'WQL'

AutoGluon will gauge predictive performance using evaluation metric: 'WQL'

AutoGluon will gauge predictive performance using evaluation metric: 'WQL'

AutoGluon will gauge predictive performance using evaluation metric: 'WQL'

AutoGluon will gauge predictive performance using evaluation metric: 'WQL'

AutoGluon will gauge predictive performance using evaluation metric: 'WQL'

AutoGluon will gauge predictive performance using evaluation metric: 'WQL'
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
===================================================
===================================================
===================================================
===================================================
===================================================
===================================================
===================================================
===================================================

Starting training. Start time is 2025-04-23 11:04:17

Starting training. Start time is 2025-04-23 11:04:17

Starting training. Start time is 2025-04-23 11:04:17

Starting training. Start time is 2025-04-23 11:04:17

Starting training. Start time is 2025-04-23 11:04:17

Starting training. Start time is 2025-04-23 11:04:17

Starting training. Start time is 2025-04-23 11:04:17

Starting training. Start time is 2025-04-23 11:04:17
Models that will be trained: ['ARIMA']
Models that will be trained: ['ARIMA']
Models that will be trained: ['ARIMA']
Models that will be trained: ['ARIMA']
Models that will be trained: ['ARIMA']
Models that will be trained: ['ARIMA']
Models that will be trained: ['ARIMA']
Models that will be trained: ['ARIMA']
Training timeseries model ARIMA. Training for up to 300.0s of the 300.0s of remaining time.
Training timeseries model ARIMA. Training for up to 300.0s of the 300.0s of remaining time.
Training timeseries model ARIMA. Training for up to 300.0s of the 300.0s of remaining time.
Training timeseries model ARIMA. Training for up to 300.0s of the 300.0s of remaining time.
Training timeseries model ARIMA. Training for up to 300.0s of the 300.0s of remaining time.
Training timeseries model ARIMA. Training for up to 300.0s of the 300.0s of remaining time.
Training timeseries model ARIMA. Training for up to 300.0s of the 300.0s of remaining time.
Training timeseries model ARIMA. Training for up to 300.0s of the 300.0s of remaining time.
Warning: No name was specified for model, defaulting to class name: CatBoostModel
Warning: No name was specified for model, defaulting to class name: CatBoostModel
Warning: No name was specified for model, defaulting to class name: CatBoostModel
Warning: No name was specified for model, defaulting to class name: CatBoostModel
Warning: No name was specified for model, defaulting to class name: CatBoostModel
Warning: No name was specified for model, defaulting to class name: CatBoostModel
Warning: No name was specified for model, defaulting to class name: CatBoostModel
Warning: No name was specified for model, defaulting to class name: CatBoostModel
No path specified. Models will be saved in: "AutogluonModels\ag-20250423_100417CatBoostModel"
No path specified. Models will be saved in: "AutogluonModels\ag-20250423_100417CatBoostModel"
No path specified. Models will be saved in: "AutogluonModels\ag-20250423_100417CatBoostModel"
No path specified. Models will be saved in: "AutogluonModels\ag-20250423_100417CatBoostModel"
No path specified. Models will be saved in: "AutogluonModels\ag-20250423_100417CatBoostModel"
No path specified. Models will be saved in: "AutogluonModels\ag-20250423_100417CatBoostModel"
No path specified. Models will be saved in: "AutogluonModels\ag-20250423_100417CatBoostModel"
No path specified. Models will be saved in: "AutogluonModels\ag-20250423_100417CatBoostModel"
Warning: No path was specified for model, defaulting to: D:\githubProjects\previsao-do-consumo-energetico-com-ml\AutogluonModels\ag-20250423_100417
Warning: No path was specified for model, defaulting to: D:\githubProjects\previsao-do-consumo-energetico-com-ml\AutogluonModels\ag-20250423_100417
Warning: No path was specified for model, defaulting to: D:\githubProjects\previsao-do-consumo-energetico-com-ml\AutogluonModels\ag-20250423_100417
Warning: No path was specified for model, defaulting to: D:\githubProjects\previsao-do-consumo-energetico-com-ml\AutogluonModels\ag-20250423_100417
Warning: No path was specified for model, defaulting to: D:\githubProjects\previsao-do-consumo-energetico-com-ml\AutogluonModels\ag-20250423_100417
Warning: No path was specified for model, defaulting to: D:\githubProjects\previsao-do-consumo-energetico-com-ml\AutogluonModels\ag-20250423_100417
Warning: No path was specified for model, defaulting to: D:\githubProjects\previsao-do-consumo-energetico-com-ml\AutogluonModels\ag-20250423_100417
Warning: No path was specified for model, defaulting to: D:\githubProjects\previsao-do-consumo-energetico-com-ml\AutogluonModels\ag-20250423_100417
	-0.0852       = Validation score (-WQL)
	-0.0852       = Validation score (-WQL)
	-0.0852       = Validation score (-WQL)
	-0.0852       = Validation score (-WQL)
	-0.0852       = Validation score (-WQL)
	-0.0852       = Validation score (-WQL)
	-0.0852       = Validation score (-WQL)
	-0.0852       = Validation score (-WQL)
	14.05   s     = Training runtime
	14.05   s     = Training runtime
	14.05   s     = Training runtime
	14.05   s     = Training runtime
	14.05   s     = Training runtime
	14.05   s     = Training runtime
	14.05   s     = Training runtime
	14.05   s     = Training runtime
	2.59    s     = Validation (prediction) runtime
	2.59    s     = Validation (prediction) runtime
	2.59    s     = Validation (prediction) runtime
	2.59    s     = Validation (prediction) runtime
	2.59    s     = Validation (prediction) runtime
	2.59    s     = Validation (prediction) runtime
	2.59    s     = Validation (prediction) runtime
	2.59    s     = Validation (prediction) runtime
Not fitting ensemble as only 1 model was trained.
Not fitting ensemble as only 1 model was trained.
Not fitting ensemble as only 1 model was trained.
Not fitting ensemble as only 1 model was trained.
Not fitting ensemble as only 1 model was trained.
Not fitting ensemble as only 1 model was trained.
Not fitting ensemble as only 1 model was trained.
Not fitting ensemble as only 1 model was trained.
Training complete. Models trained: ['ARIMA']
Training complete. Models trained: ['ARIMA']
Training complete. Models trained: ['ARIMA']
Training complete. Models trained: ['ARIMA']
Training complete. Models trained: ['ARIMA']
Training complete. Models trained: ['ARIMA']
Training complete. Models trained: ['ARIMA']
Training complete. Models trained: ['ARIMA']
Total runtime: 16.67 s
Total runtime: 16.67 s
Total runtime: 16.67 s
Total runtime: 16.67 s
Total runtime: 16.67 s
Total runtime: 16.67 s
Total runtime: 16.67 s
Total runtime: 16.67 s
Best model: ARIMA
Best model: ARIMA
Best model: ARIMA
Best model: ARIMA
Best model: ARIMA
Best model: ARIMA
Best model: ARIMA
Best model: ARIMA
Best model score: -0.0852
Best model score: -0.0852
Best model score: -0.0852
Best model score: -0.0852
Best model score: -0.0852
Best model score: -0.0852
Best model score: -0.0852
Best model score: -0.0852
Model not specified in predict, will default to the model with the best validation score: ARIMA
Model not specified in predict, will default to the model with the best validation score: ARIMA
Model not specified in predict, will default to the model with the best validation score: ARIMA
Model not specified in predict, will default to the model with the best validation score: ARIMA
Model not specified in predict, will default to the model with the best validation score: ARIMA
Model not specified in predict, will default to the model with the best validation score: ARIMA
Model not specified in predict, will default to the model with the best validation score: ARIMA
Model not specified in predict, will default to the model with the best validation score: ARIMA
Model not specified in predict, will default to the model with the best validation score: ARIMA
Model not specified in predict, will default to the model with the best validation score: ARIMA
Model not specified in predict, will default to the model with the best validation score: ARIMA
Model not specified in predict, will default to the model with the best validation score: ARIMA
Model not specified in predict, will default to the model with the best validation score: ARIMA
Model not specified in predict, will default to the model with the best validation score: ARIMA
Model not specified in predict, will default to the model with the best validation score: ARIMA
Model not specified in predict, will default to the model with the best validation score: ARIMA
Warning: path already exists! This predictor may overwrite an existing predictor! path="predicts/linearRegression/modelo"
Warning: path already exists! This predictor may overwrite an existing predictor! path="predicts/linearRegression/modelo"
Warning: path already exists! This predictor may overwrite an existing predictor! path="predicts/linearRegression/modelo"
Warning: path already exists! This predictor may overwrite an existing predictor! path="predicts/linearRegression/modelo"
Warning: path already exists! This predictor may overwrite an existing predictor! path="predicts/linearRegression/modelo"
Warning: path already exists! This predictor may overwrite an existing predictor! path="predicts/linearRegression/modelo"
Warning: path already exists! This predictor may overwrite an existing predictor! path="predicts/linearRegression/modelo"
Warning: path already exists! This predictor may overwrite an existing predictor! path="predicts/linearRegression/modelo"
Preset alias specified: 'medium' maps to 'medium_quality'.
Preset alias specified: 'medium' maps to 'medium_quality'.
Preset alias specified: 'medium' maps to 'medium_quality'.
Preset alias specified: 'medium' maps to 'medium_quality'.
Preset alias specified: 'medium' maps to 'medium_quality'.
Preset alias specified: 'medium' maps to 'medium_quality'.
Preset alias specified: 'medium' maps to 'medium_quality'.
Preset alias specified: 'medium' maps to 'medium_quality'.
Verbosity: 2 (Standard Logging)
Verbosity: 2 (Standard Logging)
Verbosity: 2 (Standard Logging)
Verbosity: 2 (Standard Logging)
Verbosity: 2 (Standard Logging)
Verbosity: 2 (Standard Logging)
Verbosity: 2 (Standard Logging)
Verbosity: 2 (Standard Logging)
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
Memory Avail:       3.11 GB / 15.93 GB (19.5%)
Disk Space Avail:   701.42 GB / 931.46 GB (75.3%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
Memory Avail:       3.11 GB / 15.93 GB (19.5%)
Disk Space Avail:   701.42 GB / 931.46 GB (75.3%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
Memory Avail:       3.11 GB / 15.93 GB (19.5%)
Disk Space Avail:   701.42 GB / 931.46 GB (75.3%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
Memory Avail:       3.11 GB / 15.93 GB (19.5%)
Disk Space Avail:   701.42 GB / 931.46 GB (75.3%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
Memory Avail:       3.11 GB / 15.93 GB (19.5%)
Disk Space Avail:   701.42 GB / 931.46 GB (75.3%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
Memory Avail:       3.11 GB / 15.93 GB (19.5%)
Disk Space Avail:   701.42 GB / 931.46 GB (75.3%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
Memory Avail:       3.11 GB / 15.93 GB (19.5%)
Disk Space Avail:   701.42 GB / 931.46 GB (75.3%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
Memory Avail:       3.11 GB / 15.93 GB (19.5%)
Disk Space Avail:   701.42 GB / 931.46 GB (75.3%)
===================================================
Presets specified: ['medium']
Presets specified: ['medium']
Presets specified: ['medium']
Presets specified: ['medium']
Presets specified: ['medium']
Presets specified: ['medium']
Presets specified: ['medium']
Presets specified: ['medium']
Beginning AutoGluon training ... Time limit = 300s
Beginning AutoGluon training ... Time limit = 300s
Beginning AutoGluon training ... Time limit = 300s
Beginning AutoGluon training ... Time limit = 300s
Beginning AutoGluon training ... Time limit = 300s
Beginning AutoGluon training ... Time limit = 300s
Beginning AutoGluon training ... Time limit = 300s
Beginning AutoGluon training ... Time limit = 300s
AutoGluon will save models to "D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo"
AutoGluon will save models to "D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo"
AutoGluon will save models to "D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo"
AutoGluon will save models to "D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo"
AutoGluon will save models to "D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo"
AutoGluon will save models to "D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo"
AutoGluon will save models to "D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo"
AutoGluon will save models to "D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo"
Train Data Rows:    7992
Train Data Rows:    7992
Train Data Rows:    7992
Train Data Rows:    7992
Train Data Rows:    7992
Train Data Rows:    7992
Train Data Rows:    7992
Train Data Rows:    7992
Train Data Columns: 4
Train Data Columns: 4
Train Data Columns: 4
Train Data Columns: 4
Train Data Columns: 4
Train Data Columns: 4
Train Data Columns: 4
Train Data Columns: 4
Tuning Data Rows:    24
Tuning Data Rows:    24
Tuning Data Rows:    24
Tuning Data Rows:    24
Tuning Data Rows:    24
Tuning Data Rows:    24
Tuning Data Rows:    24
Tuning Data Rows:    24
Tuning Data Columns: 4
Tuning Data Columns: 4
Tuning Data Columns: 4
Tuning Data Columns: 4
Tuning Data Columns: 4
Tuning Data Columns: 4
Tuning Data Columns: 4
Tuning Data Columns: 4
Label Column:       EnergyNormalized
Label Column:       EnergyNormalized
Label Column:       EnergyNormalized
Label Column:       EnergyNormalized
Label Column:       EnergyNormalized
Label Column:       EnergyNormalized
Label Column:       EnergyNormalized
Label Column:       EnergyNormalized
AutoGluon infers your prediction problem is: 'regression' (because dtype of label-column == float and many unique label-values observed).
AutoGluon infers your prediction problem is: 'regression' (because dtype of label-column == float and many unique label-values observed).
AutoGluon infers your prediction problem is: 'regression' (because dtype of label-column == float and many unique label-values observed).
AutoGluon infers your prediction problem is: 'regression' (because dtype of label-column == float and many unique label-values observed).
AutoGluon infers your prediction problem is: 'regression' (because dtype of label-column == float and many unique label-values observed).
AutoGluon infers your prediction problem is: 'regression' (because dtype of label-column == float and many unique label-values observed).
AutoGluon infers your prediction problem is: 'regression' (because dtype of label-column == float and many unique label-values observed).
AutoGluon infers your prediction problem is: 'regression' (because dtype of label-column == float and many unique label-values observed).
	Label info (max, min, mean, stddev): (0.1517218738549846, 0.005890280091559903, 0.06812, 0.02939)
	Label info (max, min, mean, stddev): (0.1517218738549846, 0.005890280091559903, 0.06812, 0.02939)
	Label info (max, min, mean, stddev): (0.1517218738549846, 0.005890280091559903, 0.06812, 0.02939)
	Label info (max, min, mean, stddev): (0.1517218738549846, 0.005890280091559903, 0.06812, 0.02939)
	Label info (max, min, mean, stddev): (0.1517218738549846, 0.005890280091559903, 0.06812, 0.02939)
	Label info (max, min, mean, stddev): (0.1517218738549846, 0.005890280091559903, 0.06812, 0.02939)
	Label info (max, min, mean, stddev): (0.1517218738549846, 0.005890280091559903, 0.06812, 0.02939)
	Label info (max, min, mean, stddev): (0.1517218738549846, 0.005890280091559903, 0.06812, 0.02939)
	If 'regression' is not the correct problem_type, please manually specify the problem_type parameter during Predictor init (You may specify problem_type as one of: ['binary', 'multiclass', 'regression', 'quantile'])
	If 'regression' is not the correct problem_type, please manually specify the problem_type parameter during Predictor init (You may specify problem_type as one of: ['binary', 'multiclass', 'regression', 'quantile'])
	If 'regression' is not the correct problem_type, please manually specify the problem_type parameter during Predictor init (You may specify problem_type as one of: ['binary', 'multiclass', 'regression', 'quantile'])
	If 'regression' is not the correct problem_type, please manually specify the problem_type parameter during Predictor init (You may specify problem_type as one of: ['binary', 'multiclass', 'regression', 'quantile'])
	If 'regression' is not the correct problem_type, please manually specify the problem_type parameter during Predictor init (You may specify problem_type as one of: ['binary', 'multiclass', 'regression', 'quantile'])
	If 'regression' is not the correct problem_type, please manually specify the problem_type parameter during Predictor init (You may specify problem_type as one of: ['binary', 'multiclass', 'regression', 'quantile'])
	If 'regression' is not the correct problem_type, please manually specify the problem_type parameter during Predictor init (You may specify problem_type as one of: ['binary', 'multiclass', 'regression', 'quantile'])
	If 'regression' is not the correct problem_type, please manually specify the problem_type parameter during Predictor init (You may specify problem_type as one of: ['binary', 'multiclass', 'regression', 'quantile'])
Problem Type:       regression
Problem Type:       regression
Problem Type:       regression
Problem Type:       regression
Problem Type:       regression
Problem Type:       regression
Problem Type:       regression
Problem Type:       regression
Preprocessing data ...
Preprocessing data ...
Preprocessing data ...
Preprocessing data ...
Preprocessing data ...
Preprocessing data ...
Preprocessing data ...
Preprocessing data ...
Using Feature Generators to preprocess the data ...
Using Feature Generators to preprocess the data ...
Using Feature Generators to preprocess the data ...
Using Feature Generators to preprocess the data ...
Using Feature Generators to preprocess the data ...
Using Feature Generators to preprocess the data ...
Using Feature Generators to preprocess the data ...
Using Feature Generators to preprocess the data ...
Fitting AutoMLPipelineFeatureGenerator...
Fitting AutoMLPipelineFeatureGenerator...
Fitting AutoMLPipelineFeatureGenerator...
Fitting AutoMLPipelineFeatureGenerator...
Fitting AutoMLPipelineFeatureGenerator...
Fitting AutoMLPipelineFeatureGenerator...
Fitting AutoMLPipelineFeatureGenerator...
Fitting AutoMLPipelineFeatureGenerator...
	Available Memory:                    3184.37 MB
	Available Memory:                    3184.37 MB
	Available Memory:                    3184.37 MB
	Available Memory:                    3184.37 MB
	Available Memory:                    3184.37 MB
	Available Memory:                    3184.37 MB
	Available Memory:                    3184.37 MB
	Available Memory:                    3184.37 MB
	Train Data (Original)  Memory Usage: 1.14 MB (0.0% of available memory)
	Train Data (Original)  Memory Usage: 1.14 MB (0.0% of available memory)
	Train Data (Original)  Memory Usage: 1.14 MB (0.0% of available memory)
	Train Data (Original)  Memory Usage: 1.14 MB (0.0% of available memory)
	Train Data (Original)  Memory Usage: 1.14 MB (0.0% of available memory)
	Train Data (Original)  Memory Usage: 1.14 MB (0.0% of available memory)
	Train Data (Original)  Memory Usage: 1.14 MB (0.0% of available memory)
	Train Data (Original)  Memory Usage: 1.14 MB (0.0% of available memory)
	Inferring data type of each feature based on column values. Set feature_metadata_in to manually specify special dtypes of the features.
	Inferring data type of each feature based on column values. Set feature_metadata_in to manually specify special dtypes of the features.
	Inferring data type of each feature based on column values. Set feature_metadata_in to manually specify special dtypes of the features.
	Inferring data type of each feature based on column values. Set feature_metadata_in to manually specify special dtypes of the features.
	Inferring data type of each feature based on column values. Set feature_metadata_in to manually specify special dtypes of the features.
	Inferring data type of each feature based on column values. Set feature_metadata_in to manually specify special dtypes of the features.
	Inferring data type of each feature based on column values. Set feature_metadata_in to manually specify special dtypes of the features.
	Inferring data type of each feature based on column values. Set feature_metadata_in to manually specify special dtypes of the features.
	Stage 1 Generators:
	Stage 1 Generators:
	Stage 1 Generators:
	Stage 1 Generators:
	Stage 1 Generators:
	Stage 1 Generators:
	Stage 1 Generators:
	Stage 1 Generators:
		Fitting AsTypeFeatureGenerator...
		Fitting AsTypeFeatureGenerator...
		Fitting AsTypeFeatureGenerator...
		Fitting AsTypeFeatureGenerator...
		Fitting AsTypeFeatureGenerator...
		Fitting AsTypeFeatureGenerator...
		Fitting AsTypeFeatureGenerator...
		Fitting AsTypeFeatureGenerator...
	Stage 2 Generators:
	Stage 2 Generators:
	Stage 2 Generators:
	Stage 2 Generators:
	Stage 2 Generators:
	Stage 2 Generators:
	Stage 2 Generators:
	Stage 2 Generators:
		Fitting FillNaFeatureGenerator...
		Fitting FillNaFeatureGenerator...
		Fitting FillNaFeatureGenerator...
		Fitting FillNaFeatureGenerator...
		Fitting FillNaFeatureGenerator...
		Fitting FillNaFeatureGenerator...
		Fitting FillNaFeatureGenerator...
		Fitting FillNaFeatureGenerator...
	Stage 3 Generators:
	Stage 3 Generators:
	Stage 3 Generators:
	Stage 3 Generators:
	Stage 3 Generators:
	Stage 3 Generators:
	Stage 3 Generators:
	Stage 3 Generators:
		Fitting IdentityFeatureGenerator...
		Fitting IdentityFeatureGenerator...
		Fitting IdentityFeatureGenerator...
		Fitting IdentityFeatureGenerator...
		Fitting IdentityFeatureGenerator...
		Fitting IdentityFeatureGenerator...
		Fitting IdentityFeatureGenerator...
		Fitting IdentityFeatureGenerator...
		Fitting CategoryFeatureGenerator...
		Fitting CategoryFeatureGenerator...
		Fitting CategoryFeatureGenerator...
		Fitting CategoryFeatureGenerator...
		Fitting CategoryFeatureGenerator...
		Fitting CategoryFeatureGenerator...
		Fitting CategoryFeatureGenerator...
		Fitting CategoryFeatureGenerator...
			Fitting CategoryMemoryMinimizeFeatureGenerator...
			Fitting CategoryMemoryMinimizeFeatureGenerator...
			Fitting CategoryMemoryMinimizeFeatureGenerator...
			Fitting CategoryMemoryMinimizeFeatureGenerator...
			Fitting CategoryMemoryMinimizeFeatureGenerator...
			Fitting CategoryMemoryMinimizeFeatureGenerator...
			Fitting CategoryMemoryMinimizeFeatureGenerator...
			Fitting CategoryMemoryMinimizeFeatureGenerator...
	Stage 4 Generators:
	Stage 4 Generators:
	Stage 4 Generators:
	Stage 4 Generators:
	Stage 4 Generators:
	Stage 4 Generators:
	Stage 4 Generators:
	Stage 4 Generators:
		Fitting DropUniqueFeatureGenerator...
		Fitting DropUniqueFeatureGenerator...
		Fitting DropUniqueFeatureGenerator...
		Fitting DropUniqueFeatureGenerator...
		Fitting DropUniqueFeatureGenerator...
		Fitting DropUniqueFeatureGenerator...
		Fitting DropUniqueFeatureGenerator...
		Fitting DropUniqueFeatureGenerator...
	Stage 5 Generators:
	Stage 5 Generators:
	Stage 5 Generators:
	Stage 5 Generators:
	Stage 5 Generators:
	Stage 5 Generators:
	Stage 5 Generators:
	Stage 5 Generators:
		Fitting DropDuplicatesFeatureGenerator...
		Fitting DropDuplicatesFeatureGenerator...
		Fitting DropDuplicatesFeatureGenerator...
		Fitting DropDuplicatesFeatureGenerator...
		Fitting DropDuplicatesFeatureGenerator...
		Fitting DropDuplicatesFeatureGenerator...
		Fitting DropDuplicatesFeatureGenerator...
		Fitting DropDuplicatesFeatureGenerator...
	Types of features in original data (raw dtype, special dtypes):
	Types of features in original data (raw dtype, special dtypes):
	Types of features in original data (raw dtype, special dtypes):
	Types of features in original data (raw dtype, special dtypes):
	Types of features in original data (raw dtype, special dtypes):
	Types of features in original data (raw dtype, special dtypes):
	Types of features in original data (raw dtype, special dtypes):
	Types of features in original data (raw dtype, special dtypes):
		('float', [])  : 1 | ['Temperature']
		('float', [])  : 1 | ['Temperature']
		('float', [])  : 1 | ['Temperature']
		('float', [])  : 1 | ['Temperature']
		('float', [])  : 1 | ['Temperature']
		('float', [])  : 1 | ['Temperature']
		('float', [])  : 1 | ['Temperature']
		('float', [])  : 1 | ['Temperature']
		('int', [])    : 1 | ['Hour']
		('int', [])    : 1 | ['Hour']
		('int', [])    : 1 | ['Hour']
		('int', [])    : 1 | ['Hour']
		('int', [])    : 1 | ['Hour']
		('int', [])    : 1 | ['Hour']
		('int', [])    : 1 | ['Hour']
		('int', [])    : 1 | ['Hour']
		('object', []) : 2 | ['TimeOfDay', 'DayOfTheWeek']
		('object', []) : 2 | ['TimeOfDay', 'DayOfTheWeek']
		('object', []) : 2 | ['TimeOfDay', 'DayOfTheWeek']
		('object', []) : 2 | ['TimeOfDay', 'DayOfTheWeek']
		('object', []) : 2 | ['TimeOfDay', 'DayOfTheWeek']
		('object', []) : 2 | ['TimeOfDay', 'DayOfTheWeek']
		('object', []) : 2 | ['TimeOfDay', 'DayOfTheWeek']
		('object', []) : 2 | ['TimeOfDay', 'DayOfTheWeek']
	Types of features in processed data (raw dtype, special dtypes):
	Types of features in processed data (raw dtype, special dtypes):
	Types of features in processed data (raw dtype, special dtypes):
	Types of features in processed data (raw dtype, special dtypes):
	Types of features in processed data (raw dtype, special dtypes):
	Types of features in processed data (raw dtype, special dtypes):
	Types of features in processed data (raw dtype, special dtypes):
	Types of features in processed data (raw dtype, special dtypes):
		('category', []) : 2 | ['TimeOfDay', 'DayOfTheWeek']
		('category', []) : 2 | ['TimeOfDay', 'DayOfTheWeek']
		('category', []) : 2 | ['TimeOfDay', 'DayOfTheWeek']
		('category', []) : 2 | ['TimeOfDay', 'DayOfTheWeek']
		('category', []) : 2 | ['TimeOfDay', 'DayOfTheWeek']
		('category', []) : 2 | ['TimeOfDay', 'DayOfTheWeek']
		('category', []) : 2 | ['TimeOfDay', 'DayOfTheWeek']
		('category', []) : 2 | ['TimeOfDay', 'DayOfTheWeek']
		('float', [])    : 1 | ['Temperature']
		('float', [])    : 1 | ['Temperature']
		('float', [])    : 1 | ['Temperature']
		('float', [])    : 1 | ['Temperature']
		('float', [])    : 1 | ['Temperature']
		('float', [])    : 1 | ['Temperature']
		('float', [])    : 1 | ['Temperature']
		('float', [])    : 1 | ['Temperature']
		('int', [])      : 1 | ['Hour']
		('int', [])      : 1 | ['Hour']
		('int', [])      : 1 | ['Hour']
		('int', [])      : 1 | ['Hour']
		('int', [])      : 1 | ['Hour']
		('int', [])      : 1 | ['Hour']
		('int', [])      : 1 | ['Hour']
		('int', [])      : 1 | ['Hour']
	0.0s = Fit runtime
	0.0s = Fit runtime
	0.0s = Fit runtime
	0.0s = Fit runtime
	0.0s = Fit runtime
	0.0s = Fit runtime
	0.0s = Fit runtime
	0.0s = Fit runtime
	4 features in original data used to generate 4 features in processed data.
	4 features in original data used to generate 4 features in processed data.
	4 features in original data used to generate 4 features in processed data.
	4 features in original data used to generate 4 features in processed data.
	4 features in original data used to generate 4 features in processed data.
	4 features in original data used to generate 4 features in processed data.
	4 features in original data used to generate 4 features in processed data.
	4 features in original data used to generate 4 features in processed data.
	Train Data (Processed) Memory Usage: 0.11 MB (0.0% of available memory)
	Train Data (Processed) Memory Usage: 0.11 MB (0.0% of available memory)
	Train Data (Processed) Memory Usage: 0.11 MB (0.0% of available memory)
	Train Data (Processed) Memory Usage: 0.11 MB (0.0% of available memory)
	Train Data (Processed) Memory Usage: 0.11 MB (0.0% of available memory)
	Train Data (Processed) Memory Usage: 0.11 MB (0.0% of available memory)
	Train Data (Processed) Memory Usage: 0.11 MB (0.0% of available memory)
	Train Data (Processed) Memory Usage: 0.11 MB (0.0% of available memory)
Data preprocessing and feature engineering runtime = 0.08s ...
Data preprocessing and feature engineering runtime = 0.08s ...
Data preprocessing and feature engineering runtime = 0.08s ...
Data preprocessing and feature engineering runtime = 0.08s ...
Data preprocessing and feature engineering runtime = 0.08s ...
Data preprocessing and feature engineering runtime = 0.08s ...
Data preprocessing and feature engineering runtime = 0.08s ...
Data preprocessing and feature engineering runtime = 0.08s ...
AutoGluon will gauge predictive performance using evaluation metric: 'mean_absolute_error'
AutoGluon will gauge predictive performance using evaluation metric: 'mean_absolute_error'
AutoGluon will gauge predictive performance using evaluation metric: 'mean_absolute_error'
AutoGluon will gauge predictive performance using evaluation metric: 'mean_absolute_error'
AutoGluon will gauge predictive performance using evaluation metric: 'mean_absolute_error'
AutoGluon will gauge predictive performance using evaluation metric: 'mean_absolute_error'
AutoGluon will gauge predictive performance using evaluation metric: 'mean_absolute_error'
AutoGluon will gauge predictive performance using evaluation metric: 'mean_absolute_error'
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	To change this, specify the eval_metric parameter of Predictor()
	To change this, specify the eval_metric parameter of Predictor()
	To change this, specify the eval_metric parameter of Predictor()
	To change this, specify the eval_metric parameter of Predictor()
	To change this, specify the eval_metric parameter of Predictor()
	To change this, specify the eval_metric parameter of Predictor()
	To change this, specify the eval_metric parameter of Predictor()
	To change this, specify the eval_metric parameter of Predictor()
User-specified model hyperparameters to be fit:
{
	'LR': [{}],
}
User-specified model hyperparameters to be fit:
{
	'LR': [{}],
}
User-specified model hyperparameters to be fit:
{
	'LR': [{}],
}
User-specified model hyperparameters to be fit:
{
	'LR': [{}],
}
User-specified model hyperparameters to be fit:
{
	'LR': [{}],
}
User-specified model hyperparameters to be fit:
{
	'LR': [{}],
}
User-specified model hyperparameters to be fit:
{
	'LR': [{}],
}
User-specified model hyperparameters to be fit:
{
	'LR': [{}],
}
Fitting 1 L1 models, fit_strategy="sequential" ...
Fitting 1 L1 models, fit_strategy="sequential" ...
Fitting 1 L1 models, fit_strategy="sequential" ...
Fitting 1 L1 models, fit_strategy="sequential" ...
Fitting 1 L1 models, fit_strategy="sequential" ...
Fitting 1 L1 models, fit_strategy="sequential" ...
Fitting 1 L1 models, fit_strategy="sequential" ...
Fitting 1 L1 models, fit_strategy="sequential" ...
Fitting model: LinearModel ... Training model for up to 299.92s of the 299.92s of remaining time.
Fitting model: LinearModel ... Training model for up to 299.92s of the 299.92s of remaining time.
Fitting model: LinearModel ... Training model for up to 299.92s of the 299.92s of remaining time.
Fitting model: LinearModel ... Training model for up to 299.92s of the 299.92s of remaining time.
Fitting model: LinearModel ... Training model for up to 299.92s of the 299.92s of remaining time.
Fitting model: LinearModel ... Training model for up to 299.92s of the 299.92s of remaining time.
Fitting model: LinearModel ... Training model for up to 299.92s of the 299.92s of remaining time.
Fitting model: LinearModel ... Training model for up to 299.92s of the 299.92s of remaining time.
	-0.0124	 = Validation score   (-mean_absolute_error)
	-0.0124	 = Validation score   (-mean_absolute_error)
	-0.0124	 = Validation score   (-mean_absolute_error)
	-0.0124	 = Validation score   (-mean_absolute_error)
	-0.0124	 = Validation score   (-mean_absolute_error)
	-0.0124	 = Validation score   (-mean_absolute_error)
	-0.0124	 = Validation score   (-mean_absolute_error)
	-0.0124	 = Validation score   (-mean_absolute_error)
	0.02s	 = Training   runtime
	0.02s	 = Training   runtime
	0.02s	 = Training   runtime
	0.02s	 = Training   runtime
	0.02s	 = Training   runtime
	0.02s	 = Training   runtime
	0.02s	 = Training   runtime
	0.02s	 = Training   runtime
	0.0s	 = Validation runtime
	0.0s	 = Validation runtime
	0.0s	 = Validation runtime
	0.0s	 = Validation runtime
	0.0s	 = Validation runtime
	0.0s	 = Validation runtime
	0.0s	 = Validation runtime
	0.0s	 = Validation runtime
Fitting model: WeightedEnsemble_L2 ... Training model for up to 299.92s of the 299.89s of remaining time.
Fitting model: WeightedEnsemble_L2 ... Training model for up to 299.92s of the 299.89s of remaining time.
Fitting model: WeightedEnsemble_L2 ... Training model for up to 299.92s of the 299.89s of remaining time.
Fitting model: WeightedEnsemble_L2 ... Training model for up to 299.92s of the 299.89s of remaining time.
Fitting model: WeightedEnsemble_L2 ... Training model for up to 299.92s of the 299.89s of remaining time.
Fitting model: WeightedEnsemble_L2 ... Training model for up to 299.92s of the 299.89s of remaining time.
Fitting model: WeightedEnsemble_L2 ... Training model for up to 299.92s of the 299.89s of remaining time.
Fitting model: WeightedEnsemble_L2 ... Training model for up to 299.92s of the 299.89s of remaining time.
	Ensemble Weights: {'LinearModel': 1.0}
	Ensemble Weights: {'LinearModel': 1.0}
	Ensemble Weights: {'LinearModel': 1.0}
	Ensemble Weights: {'LinearModel': 1.0}
	Ensemble Weights: {'LinearModel': 1.0}
	Ensemble Weights: {'LinearModel': 1.0}
	Ensemble Weights: {'LinearModel': 1.0}
	Ensemble Weights: {'LinearModel': 1.0}
	-0.0124	 = Validation score   (-mean_absolute_error)
	-0.0124	 = Validation score   (-mean_absolute_error)
	-0.0124	 = Validation score   (-mean_absolute_error)
	-0.0124	 = Validation score   (-mean_absolute_error)
	-0.0124	 = Validation score   (-mean_absolute_error)
	-0.0124	 = Validation score   (-mean_absolute_error)
	-0.0124	 = Validation score   (-mean_absolute_error)
	-0.0124	 = Validation score   (-mean_absolute_error)
	0.0s	 = Training   runtime
	0.0s	 = Training   runtime
	0.0s	 = Training   runtime
	0.0s	 = Training   runtime
	0.0s	 = Training   runtime
	0.0s	 = Training   runtime
	0.0s	 = Training   runtime
	0.0s	 = Training   runtime
	0.0s	 = Validation runtime
	0.0s	 = Validation runtime
	0.0s	 = Validation runtime
	0.0s	 = Validation runtime
	0.0s	 = Validation runtime
	0.0s	 = Validation runtime
	0.0s	 = Validation runtime
	0.0s	 = Validation runtime
AutoGluon training complete, total runtime = 0.13s ... Best model: WeightedEnsemble_L2 | Estimated inference throughput: 6851.1 rows/s (24 batch size)
AutoGluon training complete, total runtime = 0.13s ... Best model: WeightedEnsemble_L2 | Estimated inference throughput: 6851.1 rows/s (24 batch size)
AutoGluon training complete, total runtime = 0.13s ... Best model: WeightedEnsemble_L2 | Estimated inference throughput: 6851.1 rows/s (24 batch size)
AutoGluon training complete, total runtime = 0.13s ... Best model: WeightedEnsemble_L2 | Estimated inference throughput: 6851.1 rows/s (24 batch size)
AutoGluon training complete, total runtime = 0.13s ... Best model: WeightedEnsemble_L2 | Estimated inference throughput: 6851.1 rows/s (24 batch size)
AutoGluon training complete, total runtime = 0.13s ... Best model: WeightedEnsemble_L2 | Estimated inference throughput: 6851.1 rows/s (24 batch size)
AutoGluon training complete, total runtime = 0.13s ... Best model: WeightedEnsemble_L2 | Estimated inference throughput: 6851.1 rows/s (24 batch size)
AutoGluon training complete, total runtime = 0.13s ... Best model: WeightedEnsemble_L2 | Estimated inference throughput: 6851.1 rows/s (24 batch size)
TabularPredictor saved. To load, use: predictor = TabularPredictor.load("D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo")
TabularPredictor saved. To load, use: predictor = TabularPredictor.load("D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo")
TabularPredictor saved. To load, use: predictor = TabularPredictor.load("D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo")
TabularPredictor saved. To load, use: predictor = TabularPredictor.load("D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo")
TabularPredictor saved. To load, use: predictor = TabularPredictor.load("D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo")
TabularPredictor saved. To load, use: predictor = TabularPredictor.load("D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo")
TabularPredictor saved. To load, use: predictor = TabularPredictor.load("D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo")
TabularPredictor saved. To load, use: predictor = TabularPredictor.load("D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo")
TabularPredictor saved. To load, use: predictor = TabularPredictor.load("D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo")
TabularPredictor saved. To load, use: predictor = TabularPredictor.load("D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo")
TabularPredictor saved. To load, use: predictor = TabularPredictor.load("D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo")
TabularPredictor saved. To load, use: predictor = TabularPredictor.load("D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo")
TabularPredictor saved. To load, use: predictor = TabularPredictor.load("D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo")
TabularPredictor saved. To load, use: predictor = TabularPredictor.load("D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo")
TabularPredictor saved. To load, use: predictor = TabularPredictor.load("D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo")
TabularPredictor saved. To load, use: predictor = TabularPredictor.load("D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo")
Warning: path already exists! This predictor may overwrite an existing predictor! path="predicts/linearRegression/modelo"
Warning: path already exists! This predictor may overwrite an existing predictor! path="predicts/linearRegression/modelo"
Warning: path already exists! This predictor may overwrite an existing predictor! path="predicts/linearRegression/modelo"
Warning: path already exists! This predictor may overwrite an existing predictor! path="predicts/linearRegression/modelo"
Warning: path already exists! This predictor may overwrite an existing predictor! path="predicts/linearRegression/modelo"
Warning: path already exists! This predictor may overwrite an existing predictor! path="predicts/linearRegression/modelo"
Warning: path already exists! This predictor may overwrite an existing predictor! path="predicts/linearRegression/modelo"
Warning: path already exists! This predictor may overwrite an existing predictor! path="predicts/linearRegression/modelo"
Preset alias specified: 'medium' maps to 'medium_quality'.
Preset alias specified: 'medium' maps to 'medium_quality'.
Preset alias specified: 'medium' maps to 'medium_quality'.
Preset alias specified: 'medium' maps to 'medium_quality'.
Preset alias specified: 'medium' maps to 'medium_quality'.
Preset alias specified: 'medium' maps to 'medium_quality'.
Preset alias specified: 'medium' maps to 'medium_quality'.
Preset alias specified: 'medium' maps to 'medium_quality'.
Verbosity: 2 (Standard Logging)
Verbosity: 2 (Standard Logging)
Verbosity: 2 (Standard Logging)
Verbosity: 2 (Standard Logging)
Verbosity: 2 (Standard Logging)
Verbosity: 2 (Standard Logging)
Verbosity: 2 (Standard Logging)
Verbosity: 2 (Standard Logging)
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
Memory Avail:       3.46 GB / 15.93 GB (21.7%)
Disk Space Avail:   701.42 GB / 931.46 GB (75.3%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
Memory Avail:       3.46 GB / 15.93 GB (21.7%)
Disk Space Avail:   701.42 GB / 931.46 GB (75.3%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
Memory Avail:       3.46 GB / 15.93 GB (21.7%)
Disk Space Avail:   701.42 GB / 931.46 GB (75.3%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
Memory Avail:       3.46 GB / 15.93 GB (21.7%)
Disk Space Avail:   701.42 GB / 931.46 GB (75.3%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
Memory Avail:       3.46 GB / 15.93 GB (21.7%)
Disk Space Avail:   701.42 GB / 931.46 GB (75.3%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
Memory Avail:       3.46 GB / 15.93 GB (21.7%)
Disk Space Avail:   701.42 GB / 931.46 GB (75.3%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
Memory Avail:       3.46 GB / 15.93 GB (21.7%)
Disk Space Avail:   701.42 GB / 931.46 GB (75.3%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
Memory Avail:       3.46 GB / 15.93 GB (21.7%)
Disk Space Avail:   701.42 GB / 931.46 GB (75.3%)
===================================================
Presets specified: ['medium']
Presets specified: ['medium']
Presets specified: ['medium']
Presets specified: ['medium']
Presets specified: ['medium']
Presets specified: ['medium']
Presets specified: ['medium']
Presets specified: ['medium']
Beginning AutoGluon training ... Time limit = 300s
Beginning AutoGluon training ... Time limit = 300s
Beginning AutoGluon training ... Time limit = 300s
Beginning AutoGluon training ... Time limit = 300s
Beginning AutoGluon training ... Time limit = 300s
Beginning AutoGluon training ... Time limit = 300s
Beginning AutoGluon training ... Time limit = 300s
Beginning AutoGluon training ... Time limit = 300s
AutoGluon will save models to "D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo"
AutoGluon will save models to "D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo"
AutoGluon will save models to "D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo"
AutoGluon will save models to "D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo"
AutoGluon will save models to "D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo"
AutoGluon will save models to "D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo"
AutoGluon will save models to "D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo"
AutoGluon will save models to "D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo"
Train Data Rows:    7992
Train Data Rows:    7992
Train Data Rows:    7992
Train Data Rows:    7992
Train Data Rows:    7992
Train Data Rows:    7992
Train Data Rows:    7992
Train Data Rows:    7992
Train Data Columns: 4
Train Data Columns: 4
Train Data Columns: 4
Train Data Columns: 4
Train Data Columns: 4
Train Data Columns: 4
Train Data Columns: 4
Train Data Columns: 4
Tuning Data Rows:    24
Tuning Data Rows:    24
Tuning Data Rows:    24
Tuning Data Rows:    24
Tuning Data Rows:    24
Tuning Data Rows:    24
Tuning Data Rows:    24
Tuning Data Rows:    24
Tuning Data Columns: 4
Tuning Data Columns: 4
Tuning Data Columns: 4
Tuning Data Columns: 4
Tuning Data Columns: 4
Tuning Data Columns: 4
Tuning Data Columns: 4
Tuning Data Columns: 4
Label Column:       EnergyNormalized
Label Column:       EnergyNormalized
Label Column:       EnergyNormalized
Label Column:       EnergyNormalized
Label Column:       EnergyNormalized
Label Column:       EnergyNormalized
Label Column:       EnergyNormalized
Label Column:       EnergyNormalized
AutoGluon infers your prediction problem is: 'regression' (because dtype of label-column == float and many unique label-values observed).
AutoGluon infers your prediction problem is: 'regression' (because dtype of label-column == float and many unique label-values observed).
AutoGluon infers your prediction problem is: 'regression' (because dtype of label-column == float and many unique label-values observed).
AutoGluon infers your prediction problem is: 'regression' (because dtype of label-column == float and many unique label-values observed).
AutoGluon infers your prediction problem is: 'regression' (because dtype of label-column == float and many unique label-values observed).
AutoGluon infers your prediction problem is: 'regression' (because dtype of label-column == float and many unique label-values observed).
AutoGluon infers your prediction problem is: 'regression' (because dtype of label-column == float and many unique label-values observed).
AutoGluon infers your prediction problem is: 'regression' (because dtype of label-column == float and many unique label-values observed).
	Label info (max, min, mean, stddev): (0.1517218738549846, 0.005890280091559903, 0.06812, 0.02939)
	Label info (max, min, mean, stddev): (0.1517218738549846, 0.005890280091559903, 0.06812, 0.02939)
	Label info (max, min, mean, stddev): (0.1517218738549846, 0.005890280091559903, 0.06812, 0.02939)
	Label info (max, min, mean, stddev): (0.1517218738549846, 0.005890280091559903, 0.06812, 0.02939)
	Label info (max, min, mean, stddev): (0.1517218738549846, 0.005890280091559903, 0.06812, 0.02939)
	Label info (max, min, mean, stddev): (0.1517218738549846, 0.005890280091559903, 0.06812, 0.02939)
	Label info (max, min, mean, stddev): (0.1517218738549846, 0.005890280091559903, 0.06812, 0.02939)
	Label info (max, min, mean, stddev): (0.1517218738549846, 0.005890280091559903, 0.06812, 0.02939)
	If 'regression' is not the correct problem_type, please manually specify the problem_type parameter during Predictor init (You may specify problem_type as one of: ['binary', 'multiclass', 'regression', 'quantile'])
	If 'regression' is not the correct problem_type, please manually specify the problem_type parameter during Predictor init (You may specify problem_type as one of: ['binary', 'multiclass', 'regression', 'quantile'])
	If 'regression' is not the correct problem_type, please manually specify the problem_type parameter during Predictor init (You may specify problem_type as one of: ['binary', 'multiclass', 'regression', 'quantile'])
	If 'regression' is not the correct problem_type, please manually specify the problem_type parameter during Predictor init (You may specify problem_type as one of: ['binary', 'multiclass', 'regression', 'quantile'])
	If 'regression' is not the correct problem_type, please manually specify the problem_type parameter during Predictor init (You may specify problem_type as one of: ['binary', 'multiclass', 'regression', 'quantile'])
	If 'regression' is not the correct problem_type, please manually specify the problem_type parameter during Predictor init (You may specify problem_type as one of: ['binary', 'multiclass', 'regression', 'quantile'])
	If 'regression' is not the correct problem_type, please manually specify the problem_type parameter during Predictor init (You may specify problem_type as one of: ['binary', 'multiclass', 'regression', 'quantile'])
	If 'regression' is not the correct problem_type, please manually specify the problem_type parameter during Predictor init (You may specify problem_type as one of: ['binary', 'multiclass', 'regression', 'quantile'])
Problem Type:       regression
Problem Type:       regression
Problem Type:       regression
Problem Type:       regression
Problem Type:       regression
Problem Type:       regression
Problem Type:       regression
Problem Type:       regression
Preprocessing data ...
Preprocessing data ...
Preprocessing data ...
Preprocessing data ...
Preprocessing data ...
Preprocessing data ...
Preprocessing data ...
Preprocessing data ...
Using Feature Generators to preprocess the data ...
Using Feature Generators to preprocess the data ...
Using Feature Generators to preprocess the data ...
Using Feature Generators to preprocess the data ...
Using Feature Generators to preprocess the data ...
Using Feature Generators to preprocess the data ...
Using Feature Generators to preprocess the data ...
Using Feature Generators to preprocess the data ...
Fitting AutoMLPipelineFeatureGenerator...
Fitting AutoMLPipelineFeatureGenerator...
Fitting AutoMLPipelineFeatureGenerator...
Fitting AutoMLPipelineFeatureGenerator...
Fitting AutoMLPipelineFeatureGenerator...
Fitting AutoMLPipelineFeatureGenerator...
Fitting AutoMLPipelineFeatureGenerator...
Fitting AutoMLPipelineFeatureGenerator...
	Available Memory:                    3540.92 MB
	Available Memory:                    3540.92 MB
	Available Memory:                    3540.92 MB
	Available Memory:                    3540.92 MB
	Available Memory:                    3540.92 MB
	Available Memory:                    3540.92 MB
	Available Memory:                    3540.92 MB
	Available Memory:                    3540.92 MB
	Train Data (Original)  Memory Usage: 1.14 MB (0.0% of available memory)
	Train Data (Original)  Memory Usage: 1.14 MB (0.0% of available memory)
	Train Data (Original)  Memory Usage: 1.14 MB (0.0% of available memory)
	Train Data (Original)  Memory Usage: 1.14 MB (0.0% of available memory)
	Train Data (Original)  Memory Usage: 1.14 MB (0.0% of available memory)
	Train Data (Original)  Memory Usage: 1.14 MB (0.0% of available memory)
	Train Data (Original)  Memory Usage: 1.14 MB (0.0% of available memory)
	Train Data (Original)  Memory Usage: 1.14 MB (0.0% of available memory)
	Inferring data type of each feature based on column values. Set feature_metadata_in to manually specify special dtypes of the features.
	Inferring data type of each feature based on column values. Set feature_metadata_in to manually specify special dtypes of the features.
	Inferring data type of each feature based on column values. Set feature_metadata_in to manually specify special dtypes of the features.
	Inferring data type of each feature based on column values. Set feature_metadata_in to manually specify special dtypes of the features.
	Inferring data type of each feature based on column values. Set feature_metadata_in to manually specify special dtypes of the features.
	Inferring data type of each feature based on column values. Set feature_metadata_in to manually specify special dtypes of the features.
	Inferring data type of each feature based on column values. Set feature_metadata_in to manually specify special dtypes of the features.
	Inferring data type of each feature based on column values. Set feature_metadata_in to manually specify special dtypes of the features.
	Stage 1 Generators:
	Stage 1 Generators:
	Stage 1 Generators:
	Stage 1 Generators:
	Stage 1 Generators:
	Stage 1 Generators:
	Stage 1 Generators:
	Stage 1 Generators:
		Fitting AsTypeFeatureGenerator...
		Fitting AsTypeFeatureGenerator...
		Fitting AsTypeFeatureGenerator...
		Fitting AsTypeFeatureGenerator...
		Fitting AsTypeFeatureGenerator...
		Fitting AsTypeFeatureGenerator...
		Fitting AsTypeFeatureGenerator...
		Fitting AsTypeFeatureGenerator...
	Stage 2 Generators:
	Stage 2 Generators:
	Stage 2 Generators:
	Stage 2 Generators:
	Stage 2 Generators:
	Stage 2 Generators:
	Stage 2 Generators:
	Stage 2 Generators:
		Fitting FillNaFeatureGenerator...
		Fitting FillNaFeatureGenerator...
		Fitting FillNaFeatureGenerator...
		Fitting FillNaFeatureGenerator...
		Fitting FillNaFeatureGenerator...
		Fitting FillNaFeatureGenerator...
		Fitting FillNaFeatureGenerator...
		Fitting FillNaFeatureGenerator...
	Stage 3 Generators:
	Stage 3 Generators:
	Stage 3 Generators:
	Stage 3 Generators:
	Stage 3 Generators:
	Stage 3 Generators:
	Stage 3 Generators:
	Stage 3 Generators:
		Fitting IdentityFeatureGenerator...
		Fitting IdentityFeatureGenerator...
		Fitting IdentityFeatureGenerator...
		Fitting IdentityFeatureGenerator...
		Fitting IdentityFeatureGenerator...
		Fitting IdentityFeatureGenerator...
		Fitting IdentityFeatureGenerator...
		Fitting IdentityFeatureGenerator...
		Fitting CategoryFeatureGenerator...
		Fitting CategoryFeatureGenerator...
		Fitting CategoryFeatureGenerator...
		Fitting CategoryFeatureGenerator...
		Fitting CategoryFeatureGenerator...
		Fitting CategoryFeatureGenerator...
		Fitting CategoryFeatureGenerator...
		Fitting CategoryFeatureGenerator...
			Fitting CategoryMemoryMinimizeFeatureGenerator...
			Fitting CategoryMemoryMinimizeFeatureGenerator...
			Fitting CategoryMemoryMinimizeFeatureGenerator...
			Fitting CategoryMemoryMinimizeFeatureGenerator...
			Fitting CategoryMemoryMinimizeFeatureGenerator...
			Fitting CategoryMemoryMinimizeFeatureGenerator...
			Fitting CategoryMemoryMinimizeFeatureGenerator...
			Fitting CategoryMemoryMinimizeFeatureGenerator...
	Stage 4 Generators:
	Stage 4 Generators:
	Stage 4 Generators:
	Stage 4 Generators:
	Stage 4 Generators:
	Stage 4 Generators:
	Stage 4 Generators:
	Stage 4 Generators:
		Fitting DropUniqueFeatureGenerator...
		Fitting DropUniqueFeatureGenerator...
		Fitting DropUniqueFeatureGenerator...
		Fitting DropUniqueFeatureGenerator...
		Fitting DropUniqueFeatureGenerator...
		Fitting DropUniqueFeatureGenerator...
		Fitting DropUniqueFeatureGenerator...
		Fitting DropUniqueFeatureGenerator...
	Stage 5 Generators:
	Stage 5 Generators:
	Stage 5 Generators:
	Stage 5 Generators:
	Stage 5 Generators:
	Stage 5 Generators:
	Stage 5 Generators:
	Stage 5 Generators:
		Fitting DropDuplicatesFeatureGenerator...
		Fitting DropDuplicatesFeatureGenerator...
		Fitting DropDuplicatesFeatureGenerator...
		Fitting DropDuplicatesFeatureGenerator...
		Fitting DropDuplicatesFeatureGenerator...
		Fitting DropDuplicatesFeatureGenerator...
		Fitting DropDuplicatesFeatureGenerator...
		Fitting DropDuplicatesFeatureGenerator...
	Types of features in original data (raw dtype, special dtypes):
	Types of features in original data (raw dtype, special dtypes):
	Types of features in original data (raw dtype, special dtypes):
	Types of features in original data (raw dtype, special dtypes):
	Types of features in original data (raw dtype, special dtypes):
	Types of features in original data (raw dtype, special dtypes):
	Types of features in original data (raw dtype, special dtypes):
	Types of features in original data (raw dtype, special dtypes):
		('float', [])  : 1 | ['Temperature']
		('float', [])  : 1 | ['Temperature']
		('float', [])  : 1 | ['Temperature']
		('float', [])  : 1 | ['Temperature']
		('float', [])  : 1 | ['Temperature']
		('float', [])  : 1 | ['Temperature']
		('float', [])  : 1 | ['Temperature']
		('float', [])  : 1 | ['Temperature']
		('int', [])    : 1 | ['Hour']
		('int', [])    : 1 | ['Hour']
		('int', [])    : 1 | ['Hour']
		('int', [])    : 1 | ['Hour']
		('int', [])    : 1 | ['Hour']
		('int', [])    : 1 | ['Hour']
		('int', [])    : 1 | ['Hour']
		('int', [])    : 1 | ['Hour']
		('object', []) : 2 | ['TimeOfDay', 'DayOfTheWeek']
		('object', []) : 2 | ['TimeOfDay', 'DayOfTheWeek']
		('object', []) : 2 | ['TimeOfDay', 'DayOfTheWeek']
		('object', []) : 2 | ['TimeOfDay', 'DayOfTheWeek']
		('object', []) : 2 | ['TimeOfDay', 'DayOfTheWeek']
		('object', []) : 2 | ['TimeOfDay', 'DayOfTheWeek']
		('object', []) : 2 | ['TimeOfDay', 'DayOfTheWeek']
		('object', []) : 2 | ['TimeOfDay', 'DayOfTheWeek']
	Types of features in processed data (raw dtype, special dtypes):
	Types of features in processed data (raw dtype, special dtypes):
	Types of features in processed data (raw dtype, special dtypes):
	Types of features in processed data (raw dtype, special dtypes):
	Types of features in processed data (raw dtype, special dtypes):
	Types of features in processed data (raw dtype, special dtypes):
	Types of features in processed data (raw dtype, special dtypes):
	Types of features in processed data (raw dtype, special dtypes):
		('category', []) : 2 | ['TimeOfDay', 'DayOfTheWeek']
		('category', []) : 2 | ['TimeOfDay', 'DayOfTheWeek']
		('category', []) : 2 | ['TimeOfDay', 'DayOfTheWeek']
		('category', []) : 2 | ['TimeOfDay', 'DayOfTheWeek']
		('category', []) : 2 | ['TimeOfDay', 'DayOfTheWeek']
		('category', []) : 2 | ['TimeOfDay', 'DayOfTheWeek']
		('category', []) : 2 | ['TimeOfDay', 'DayOfTheWeek']
		('category', []) : 2 | ['TimeOfDay', 'DayOfTheWeek']
		('float', [])    : 1 | ['Temperature']
		('float', [])    : 1 | ['Temperature']
		('float', [])    : 1 | ['Temperature']
		('float', [])    : 1 | ['Temperature']
		('float', [])    : 1 | ['Temperature']
		('float', [])    : 1 | ['Temperature']
		('float', [])    : 1 | ['Temperature']
		('float', [])    : 1 | ['Temperature']
		('int', [])      : 1 | ['Hour']
		('int', [])      : 1 | ['Hour']
		('int', [])      : 1 | ['Hour']
		('int', [])      : 1 | ['Hour']
		('int', [])      : 1 | ['Hour']
		('int', [])      : 1 | ['Hour']
		('int', [])      : 1 | ['Hour']
		('int', [])      : 1 | ['Hour']
	0.1s = Fit runtime
	0.1s = Fit runtime
	0.1s = Fit runtime
	0.1s = Fit runtime
	0.1s = Fit runtime
	0.1s = Fit runtime
	0.1s = Fit runtime
	0.1s = Fit runtime
	4 features in original data used to generate 4 features in processed data.
	4 features in original data used to generate 4 features in processed data.
	4 features in original data used to generate 4 features in processed data.
	4 features in original data used to generate 4 features in processed data.
	4 features in original data used to generate 4 features in processed data.
	4 features in original data used to generate 4 features in processed data.
	4 features in original data used to generate 4 features in processed data.
	4 features in original data used to generate 4 features in processed data.
	Train Data (Processed) Memory Usage: 0.11 MB (0.0% of available memory)
	Train Data (Processed) Memory Usage: 0.11 MB (0.0% of available memory)
	Train Data (Processed) Memory Usage: 0.11 MB (0.0% of available memory)
	Train Data (Processed) Memory Usage: 0.11 MB (0.0% of available memory)
	Train Data (Processed) Memory Usage: 0.11 MB (0.0% of available memory)
	Train Data (Processed) Memory Usage: 0.11 MB (0.0% of available memory)
	Train Data (Processed) Memory Usage: 0.11 MB (0.0% of available memory)
	Train Data (Processed) Memory Usage: 0.11 MB (0.0% of available memory)
Data preprocessing and feature engineering runtime = 0.07s ...
Data preprocessing and feature engineering runtime = 0.07s ...
Data preprocessing and feature engineering runtime = 0.07s ...
Data preprocessing and feature engineering runtime = 0.07s ...
Data preprocessing and feature engineering runtime = 0.07s ...
Data preprocessing and feature engineering runtime = 0.07s ...
Data preprocessing and feature engineering runtime = 0.07s ...
Data preprocessing and feature engineering runtime = 0.07s ...
AutoGluon will gauge predictive performance using evaluation metric: 'mean_absolute_error'
AutoGluon will gauge predictive performance using evaluation metric: 'mean_absolute_error'
AutoGluon will gauge predictive performance using evaluation metric: 'mean_absolute_error'
AutoGluon will gauge predictive performance using evaluation metric: 'mean_absolute_error'
AutoGluon will gauge predictive performance using evaluation metric: 'mean_absolute_error'
AutoGluon will gauge predictive performance using evaluation metric: 'mean_absolute_error'
AutoGluon will gauge predictive performance using evaluation metric: 'mean_absolute_error'
AutoGluon will gauge predictive performance using evaluation metric: 'mean_absolute_error'
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	To change this, specify the eval_metric parameter of Predictor()
	To change this, specify the eval_metric parameter of Predictor()
	To change this, specify the eval_metric parameter of Predictor()
	To change this, specify the eval_metric parameter of Predictor()
	To change this, specify the eval_metric parameter of Predictor()
	To change this, specify the eval_metric parameter of Predictor()
	To change this, specify the eval_metric parameter of Predictor()
	To change this, specify the eval_metric parameter of Predictor()
User-specified model hyperparameters to be fit:
{
	'LR': [{}],
}
User-specified model hyperparameters to be fit:
{
	'LR': [{}],
}
User-specified model hyperparameters to be fit:
{
	'LR': [{}],
}
User-specified model hyperparameters to be fit:
{
	'LR': [{}],
}
User-specified model hyperparameters to be fit:
{
	'LR': [{}],
}
User-specified model hyperparameters to be fit:
{
	'LR': [{}],
}
User-specified model hyperparameters to be fit:
{
	'LR': [{}],
}
User-specified model hyperparameters to be fit:
{
	'LR': [{}],
}
Fitting 1 L1 models, fit_strategy="sequential" ...
Fitting 1 L1 models, fit_strategy="sequential" ...
Fitting 1 L1 models, fit_strategy="sequential" ...
Fitting 1 L1 models, fit_strategy="sequential" ...
Fitting 1 L1 models, fit_strategy="sequential" ...
Fitting 1 L1 models, fit_strategy="sequential" ...
Fitting 1 L1 models, fit_strategy="sequential" ...
Fitting 1 L1 models, fit_strategy="sequential" ...
Fitting model: LinearModel ... Training model for up to 299.93s of the 299.93s of remaining time.
Fitting model: LinearModel ... Training model for up to 299.93s of the 299.93s of remaining time.
Fitting model: LinearModel ... Training model for up to 299.93s of the 299.93s of remaining time.
Fitting model: LinearModel ... Training model for up to 299.93s of the 299.93s of remaining time.
Fitting model: LinearModel ... Training model for up to 299.93s of the 299.93s of remaining time.
Fitting model: LinearModel ... Training model for up to 299.93s of the 299.93s of remaining time.
Fitting model: LinearModel ... Training model for up to 299.93s of the 299.93s of remaining time.
Fitting model: LinearModel ... Training model for up to 299.93s of the 299.93s of remaining time.
	-0.0124	 = Validation score   (-mean_absolute_error)
	-0.0124	 = Validation score   (-mean_absolute_error)
	-0.0124	 = Validation score   (-mean_absolute_error)
	-0.0124	 = Validation score   (-mean_absolute_error)
	-0.0124	 = Validation score   (-mean_absolute_error)
	-0.0124	 = Validation score   (-mean_absolute_error)
	-0.0124	 = Validation score   (-mean_absolute_error)
	-0.0124	 = Validation score   (-mean_absolute_error)
	0.02s	 = Training   runtime
	0.02s	 = Training   runtime
	0.02s	 = Training   runtime
	0.02s	 = Training   runtime
	0.02s	 = Training   runtime
	0.02s	 = Training   runtime
	0.02s	 = Training   runtime
	0.02s	 = Training   runtime
	0.0s	 = Validation runtime
	0.0s	 = Validation runtime
	0.0s	 = Validation runtime
	0.0s	 = Validation runtime
	0.0s	 = Validation runtime
	0.0s	 = Validation runtime
	0.0s	 = Validation runtime
	0.0s	 = Validation runtime
Fitting model: WeightedEnsemble_L2 ... Training model for up to 299.93s of the 299.90s of remaining time.
Fitting model: WeightedEnsemble_L2 ... Training model for up to 299.93s of the 299.90s of remaining time.
Fitting model: WeightedEnsemble_L2 ... Training model for up to 299.93s of the 299.90s of remaining time.
Fitting model: WeightedEnsemble_L2 ... Training model for up to 299.93s of the 299.90s of remaining time.
Fitting model: WeightedEnsemble_L2 ... Training model for up to 299.93s of the 299.90s of remaining time.
Fitting model: WeightedEnsemble_L2 ... Training model for up to 299.93s of the 299.90s of remaining time.
Fitting model: WeightedEnsemble_L2 ... Training model for up to 299.93s of the 299.90s of remaining time.
Fitting model: WeightedEnsemble_L2 ... Training model for up to 299.93s of the 299.90s of remaining time.
	Ensemble Weights: {'LinearModel': 1.0}
	Ensemble Weights: {'LinearModel': 1.0}
	Ensemble Weights: {'LinearModel': 1.0}
	Ensemble Weights: {'LinearModel': 1.0}
	Ensemble Weights: {'LinearModel': 1.0}
	Ensemble Weights: {'LinearModel': 1.0}
	Ensemble Weights: {'LinearModel': 1.0}
	Ensemble Weights: {'LinearModel': 1.0}
	-0.0124	 = Validation score   (-mean_absolute_error)
	-0.0124	 = Validation score   (-mean_absolute_error)
	-0.0124	 = Validation score   (-mean_absolute_error)
	-0.0124	 = Validation score   (-mean_absolute_error)
	-0.0124	 = Validation score   (-mean_absolute_error)
	-0.0124	 = Validation score   (-mean_absolute_error)
	-0.0124	 = Validation score   (-mean_absolute_error)
	-0.0124	 = Validation score   (-mean_absolute_error)
	0.01s	 = Training   runtime
	0.01s	 = Training   runtime
	0.01s	 = Training   runtime
	0.01s	 = Training   runtime
	0.01s	 = Training   runtime
	0.01s	 = Training   runtime
	0.01s	 = Training   runtime
	0.01s	 = Training   runtime
	0.0s	 = Validation runtime
	0.0s	 = Validation runtime
	0.0s	 = Validation runtime
	0.0s	 = Validation runtime
	0.0s	 = Validation runtime
	0.0s	 = Validation runtime
	0.0s	 = Validation runtime
	0.0s	 = Validation runtime
AutoGluon training complete, total runtime = 0.12s ... Best model: WeightedEnsemble_L2 | Estimated inference throughput: 8001.9 rows/s (24 batch size)
AutoGluon training complete, total runtime = 0.12s ... Best model: WeightedEnsemble_L2 | Estimated inference throughput: 8001.9 rows/s (24 batch size)
AutoGluon training complete, total runtime = 0.12s ... Best model: WeightedEnsemble_L2 | Estimated inference throughput: 8001.9 rows/s (24 batch size)
AutoGluon training complete, total runtime = 0.12s ... Best model: WeightedEnsemble_L2 | Estimated inference throughput: 8001.9 rows/s (24 batch size)
AutoGluon training complete, total runtime = 0.12s ... Best model: WeightedEnsemble_L2 | Estimated inference throughput: 8001.9 rows/s (24 batch size)
AutoGluon training complete, total runtime = 0.12s ... Best model: WeightedEnsemble_L2 | Estimated inference throughput: 8001.9 rows/s (24 batch size)
AutoGluon training complete, total runtime = 0.12s ... Best model: WeightedEnsemble_L2 | Estimated inference throughput: 8001.9 rows/s (24 batch size)
AutoGluon training complete, total runtime = 0.12s ... Best model: WeightedEnsemble_L2 | Estimated inference throughput: 8001.9 rows/s (24 batch size)
TabularPredictor saved. To load, use: predictor = TabularPredictor.load("D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo")
TabularPredictor saved. To load, use: predictor = TabularPredictor.load("D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo")
TabularPredictor saved. To load, use: predictor = TabularPredictor.load("D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo")
TabularPredictor saved. To load, use: predictor = TabularPredictor.load("D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo")
TabularPredictor saved. To load, use: predictor = TabularPredictor.load("D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo")
TabularPredictor saved. To load, use: predictor = TabularPredictor.load("D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo")
TabularPredictor saved. To load, use: predictor = TabularPredictor.load("D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo")
TabularPredictor saved. To load, use: predictor = TabularPredictor.load("D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo")
TabularPredictor saved. To load, use: predictor = TabularPredictor.load("D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo")
TabularPredictor saved. To load, use: predictor = TabularPredictor.load("D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo")
TabularPredictor saved. To load, use: predictor = TabularPredictor.load("D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo")
TabularPredictor saved. To load, use: predictor = TabularPredictor.load("D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo")
TabularPredictor saved. To load, use: predictor = TabularPredictor.load("D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo")
TabularPredictor saved. To load, use: predictor = TabularPredictor.load("D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo")
TabularPredictor saved. To load, use: predictor = TabularPredictor.load("D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo")
TabularPredictor saved. To load, use: predictor = TabularPredictor.load("D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo")
Loading predictor from path D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo
Loading predictor from path D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo
Loading predictor from path D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo
Loading predictor from path D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo
Loading predictor from path D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo
Loading predictor from path D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo
Loading predictor from path D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo
Loading predictor from path D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo
Loading predictor from path D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo
Loading predictor from path D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo
Loading predictor from path D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo
Loading predictor from path D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo
Loading predictor from path D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo
Loading predictor from path D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo
Loading predictor from path D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo
Loading predictor from path D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo
Warning: path already exists! This predictor may overwrite an existing predictor! path="predicts/linearRegression/modelo"
Warning: path already exists! This predictor may overwrite an existing predictor! path="predicts/linearRegression/modelo"
Warning: path already exists! This predictor may overwrite an existing predictor! path="predicts/linearRegression/modelo"
Warning: path already exists! This predictor may overwrite an existing predictor! path="predicts/linearRegression/modelo"
Warning: path already exists! This predictor may overwrite an existing predictor! path="predicts/linearRegression/modelo"
Warning: path already exists! This predictor may overwrite an existing predictor! path="predicts/linearRegression/modelo"
Warning: path already exists! This predictor may overwrite an existing predictor! path="predicts/linearRegression/modelo"
Warning: path already exists! This predictor may overwrite an existing predictor! path="predicts/linearRegression/modelo"
Preset alias specified: 'medium' maps to 'medium_quality'.
Preset alias specified: 'medium' maps to 'medium_quality'.
Preset alias specified: 'medium' maps to 'medium_quality'.
Preset alias specified: 'medium' maps to 'medium_quality'.
Preset alias specified: 'medium' maps to 'medium_quality'.
Preset alias specified: 'medium' maps to 'medium_quality'.
Preset alias specified: 'medium' maps to 'medium_quality'.
Preset alias specified: 'medium' maps to 'medium_quality'.
Verbosity: 2 (Standard Logging)
Verbosity: 2 (Standard Logging)
Verbosity: 2 (Standard Logging)
Verbosity: 2 (Standard Logging)
Verbosity: 2 (Standard Logging)
Verbosity: 2 (Standard Logging)
Verbosity: 2 (Standard Logging)
Verbosity: 2 (Standard Logging)
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
Memory Avail:       2.27 GB / 15.93 GB (14.3%)
Disk Space Avail:   701.42 GB / 931.46 GB (75.3%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
Memory Avail:       2.27 GB / 15.93 GB (14.3%)
Disk Space Avail:   701.42 GB / 931.46 GB (75.3%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
Memory Avail:       2.27 GB / 15.93 GB (14.3%)
Disk Space Avail:   701.42 GB / 931.46 GB (75.3%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
Memory Avail:       2.27 GB / 15.93 GB (14.3%)
Disk Space Avail:   701.42 GB / 931.46 GB (75.3%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
Memory Avail:       2.27 GB / 15.93 GB (14.3%)
Disk Space Avail:   701.42 GB / 931.46 GB (75.3%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
Memory Avail:       2.27 GB / 15.93 GB (14.3%)
Disk Space Avail:   701.42 GB / 931.46 GB (75.3%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
Memory Avail:       2.27 GB / 15.93 GB (14.3%)
Disk Space Avail:   701.42 GB / 931.46 GB (75.3%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
Memory Avail:       2.27 GB / 15.93 GB (14.3%)
Disk Space Avail:   701.42 GB / 931.46 GB (75.3%)
===================================================
Presets specified: ['medium']
Presets specified: ['medium']
Presets specified: ['medium']
Presets specified: ['medium']
Presets specified: ['medium']
Presets specified: ['medium']
Presets specified: ['medium']
Presets specified: ['medium']
Beginning AutoGluon training ... Time limit = 300s
Beginning AutoGluon training ... Time limit = 300s
Beginning AutoGluon training ... Time limit = 300s
Beginning AutoGluon training ... Time limit = 300s
Beginning AutoGluon training ... Time limit = 300s
Beginning AutoGluon training ... Time limit = 300s
Beginning AutoGluon training ... Time limit = 300s
Beginning AutoGluon training ... Time limit = 300s
AutoGluon will save models to "D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo"
AutoGluon will save models to "D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo"
AutoGluon will save models to "D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo"
AutoGluon will save models to "D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo"
AutoGluon will save models to "D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo"
AutoGluon will save models to "D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo"
AutoGluon will save models to "D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo"
AutoGluon will save models to "D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo"
Train Data Rows:    7992
Train Data Rows:    7992
Train Data Rows:    7992
Train Data Rows:    7992
Train Data Rows:    7992
Train Data Rows:    7992
Train Data Rows:    7992
Train Data Rows:    7992
Train Data Columns: 4
Train Data Columns: 4
Train Data Columns: 4
Train Data Columns: 4
Train Data Columns: 4
Train Data Columns: 4
Train Data Columns: 4
Train Data Columns: 4
Tuning Data Rows:    24
Tuning Data Rows:    24
Tuning Data Rows:    24
Tuning Data Rows:    24
Tuning Data Rows:    24
Tuning Data Rows:    24
Tuning Data Rows:    24
Tuning Data Rows:    24
Tuning Data Columns: 4
Tuning Data Columns: 4
Tuning Data Columns: 4
Tuning Data Columns: 4
Tuning Data Columns: 4
Tuning Data Columns: 4
Tuning Data Columns: 4
Tuning Data Columns: 4
Label Column:       EnergyNormalized
Label Column:       EnergyNormalized
Label Column:       EnergyNormalized
Label Column:       EnergyNormalized
Label Column:       EnergyNormalized
Label Column:       EnergyNormalized
Label Column:       EnergyNormalized
Label Column:       EnergyNormalized
AutoGluon infers your prediction problem is: 'regression' (because dtype of label-column == float and many unique label-values observed).
AutoGluon infers your prediction problem is: 'regression' (because dtype of label-column == float and many unique label-values observed).
AutoGluon infers your prediction problem is: 'regression' (because dtype of label-column == float and many unique label-values observed).
AutoGluon infers your prediction problem is: 'regression' (because dtype of label-column == float and many unique label-values observed).
AutoGluon infers your prediction problem is: 'regression' (because dtype of label-column == float and many unique label-values observed).
AutoGluon infers your prediction problem is: 'regression' (because dtype of label-column == float and many unique label-values observed).
AutoGluon infers your prediction problem is: 'regression' (because dtype of label-column == float and many unique label-values observed).
AutoGluon infers your prediction problem is: 'regression' (because dtype of label-column == float and many unique label-values observed).
	Label info (max, min, mean, stddev): (0.1517218738549846, 0.005890280091559903, 0.06812, 0.02939)
	Label info (max, min, mean, stddev): (0.1517218738549846, 0.005890280091559903, 0.06812, 0.02939)
	Label info (max, min, mean, stddev): (0.1517218738549846, 0.005890280091559903, 0.06812, 0.02939)
	Label info (max, min, mean, stddev): (0.1517218738549846, 0.005890280091559903, 0.06812, 0.02939)
	Label info (max, min, mean, stddev): (0.1517218738549846, 0.005890280091559903, 0.06812, 0.02939)
	Label info (max, min, mean, stddev): (0.1517218738549846, 0.005890280091559903, 0.06812, 0.02939)
	Label info (max, min, mean, stddev): (0.1517218738549846, 0.005890280091559903, 0.06812, 0.02939)
	Label info (max, min, mean, stddev): (0.1517218738549846, 0.005890280091559903, 0.06812, 0.02939)
	If 'regression' is not the correct problem_type, please manually specify the problem_type parameter during Predictor init (You may specify problem_type as one of: ['binary', 'multiclass', 'regression', 'quantile'])
	If 'regression' is not the correct problem_type, please manually specify the problem_type parameter during Predictor init (You may specify problem_type as one of: ['binary', 'multiclass', 'regression', 'quantile'])
	If 'regression' is not the correct problem_type, please manually specify the problem_type parameter during Predictor init (You may specify problem_type as one of: ['binary', 'multiclass', 'regression', 'quantile'])
	If 'regression' is not the correct problem_type, please manually specify the problem_type parameter during Predictor init (You may specify problem_type as one of: ['binary', 'multiclass', 'regression', 'quantile'])
	If 'regression' is not the correct problem_type, please manually specify the problem_type parameter during Predictor init (You may specify problem_type as one of: ['binary', 'multiclass', 'regression', 'quantile'])
	If 'regression' is not the correct problem_type, please manually specify the problem_type parameter during Predictor init (You may specify problem_type as one of: ['binary', 'multiclass', 'regression', 'quantile'])
	If 'regression' is not the correct problem_type, please manually specify the problem_type parameter during Predictor init (You may specify problem_type as one of: ['binary', 'multiclass', 'regression', 'quantile'])
	If 'regression' is not the correct problem_type, please manually specify the problem_type parameter during Predictor init (You may specify problem_type as one of: ['binary', 'multiclass', 'regression', 'quantile'])
Problem Type:       regression
Problem Type:       regression
Problem Type:       regression
Problem Type:       regression
Problem Type:       regression
Problem Type:       regression
Problem Type:       regression
Problem Type:       regression
Preprocessing data ...
Preprocessing data ...
Preprocessing data ...
Preprocessing data ...
Preprocessing data ...
Preprocessing data ...
Preprocessing data ...
Preprocessing data ...
Using Feature Generators to preprocess the data ...
Using Feature Generators to preprocess the data ...
Using Feature Generators to preprocess the data ...
Using Feature Generators to preprocess the data ...
Using Feature Generators to preprocess the data ...
Using Feature Generators to preprocess the data ...
Using Feature Generators to preprocess the data ...
Using Feature Generators to preprocess the data ...
Fitting AutoMLPipelineFeatureGenerator...
Fitting AutoMLPipelineFeatureGenerator...
Fitting AutoMLPipelineFeatureGenerator...
Fitting AutoMLPipelineFeatureGenerator...
Fitting AutoMLPipelineFeatureGenerator...
Fitting AutoMLPipelineFeatureGenerator...
Fitting AutoMLPipelineFeatureGenerator...
Fitting AutoMLPipelineFeatureGenerator...
	Available Memory:                    2324.54 MB
	Available Memory:                    2324.54 MB
	Available Memory:                    2324.54 MB
	Available Memory:                    2324.54 MB
	Available Memory:                    2324.54 MB
	Available Memory:                    2324.54 MB
	Available Memory:                    2324.54 MB
	Available Memory:                    2324.54 MB
	Train Data (Original)  Memory Usage: 1.14 MB (0.0% of available memory)
	Train Data (Original)  Memory Usage: 1.14 MB (0.0% of available memory)
	Train Data (Original)  Memory Usage: 1.14 MB (0.0% of available memory)
	Train Data (Original)  Memory Usage: 1.14 MB (0.0% of available memory)
	Train Data (Original)  Memory Usage: 1.14 MB (0.0% of available memory)
	Train Data (Original)  Memory Usage: 1.14 MB (0.0% of available memory)
	Train Data (Original)  Memory Usage: 1.14 MB (0.0% of available memory)
	Train Data (Original)  Memory Usage: 1.14 MB (0.0% of available memory)
	Inferring data type of each feature based on column values. Set feature_metadata_in to manually specify special dtypes of the features.
	Inferring data type of each feature based on column values. Set feature_metadata_in to manually specify special dtypes of the features.
	Inferring data type of each feature based on column values. Set feature_metadata_in to manually specify special dtypes of the features.
	Inferring data type of each feature based on column values. Set feature_metadata_in to manually specify special dtypes of the features.
	Inferring data type of each feature based on column values. Set feature_metadata_in to manually specify special dtypes of the features.
	Inferring data type of each feature based on column values. Set feature_metadata_in to manually specify special dtypes of the features.
	Inferring data type of each feature based on column values. Set feature_metadata_in to manually specify special dtypes of the features.
	Inferring data type of each feature based on column values. Set feature_metadata_in to manually specify special dtypes of the features.
	Stage 1 Generators:
	Stage 1 Generators:
	Stage 1 Generators:
	Stage 1 Generators:
	Stage 1 Generators:
	Stage 1 Generators:
	Stage 1 Generators:
	Stage 1 Generators:
		Fitting AsTypeFeatureGenerator...
		Fitting AsTypeFeatureGenerator...
		Fitting AsTypeFeatureGenerator...
		Fitting AsTypeFeatureGenerator...
		Fitting AsTypeFeatureGenerator...
		Fitting AsTypeFeatureGenerator...
		Fitting AsTypeFeatureGenerator...
		Fitting AsTypeFeatureGenerator...
	Stage 2 Generators:
	Stage 2 Generators:
	Stage 2 Generators:
	Stage 2 Generators:
	Stage 2 Generators:
	Stage 2 Generators:
	Stage 2 Generators:
	Stage 2 Generators:
		Fitting FillNaFeatureGenerator...
		Fitting FillNaFeatureGenerator...
		Fitting FillNaFeatureGenerator...
		Fitting FillNaFeatureGenerator...
		Fitting FillNaFeatureGenerator...
		Fitting FillNaFeatureGenerator...
		Fitting FillNaFeatureGenerator...
		Fitting FillNaFeatureGenerator...
	Stage 3 Generators:
	Stage 3 Generators:
	Stage 3 Generators:
	Stage 3 Generators:
	Stage 3 Generators:
	Stage 3 Generators:
	Stage 3 Generators:
	Stage 3 Generators:
		Fitting IdentityFeatureGenerator...
		Fitting IdentityFeatureGenerator...
		Fitting IdentityFeatureGenerator...
		Fitting IdentityFeatureGenerator...
		Fitting IdentityFeatureGenerator...
		Fitting IdentityFeatureGenerator...
		Fitting IdentityFeatureGenerator...
		Fitting IdentityFeatureGenerator...
		Fitting CategoryFeatureGenerator...
		Fitting CategoryFeatureGenerator...
		Fitting CategoryFeatureGenerator...
		Fitting CategoryFeatureGenerator...
		Fitting CategoryFeatureGenerator...
		Fitting CategoryFeatureGenerator...
		Fitting CategoryFeatureGenerator...
		Fitting CategoryFeatureGenerator...
			Fitting CategoryMemoryMinimizeFeatureGenerator...
			Fitting CategoryMemoryMinimizeFeatureGenerator...
			Fitting CategoryMemoryMinimizeFeatureGenerator...
			Fitting CategoryMemoryMinimizeFeatureGenerator...
			Fitting CategoryMemoryMinimizeFeatureGenerator...
			Fitting CategoryMemoryMinimizeFeatureGenerator...
			Fitting CategoryMemoryMinimizeFeatureGenerator...
			Fitting CategoryMemoryMinimizeFeatureGenerator...
	Stage 4 Generators:
	Stage 4 Generators:
	Stage 4 Generators:
	Stage 4 Generators:
	Stage 4 Generators:
	Stage 4 Generators:
	Stage 4 Generators:
	Stage 4 Generators:
		Fitting DropUniqueFeatureGenerator...
		Fitting DropUniqueFeatureGenerator...
		Fitting DropUniqueFeatureGenerator...
		Fitting DropUniqueFeatureGenerator...
		Fitting DropUniqueFeatureGenerator...
		Fitting DropUniqueFeatureGenerator...
		Fitting DropUniqueFeatureGenerator...
		Fitting DropUniqueFeatureGenerator...
	Stage 5 Generators:
	Stage 5 Generators:
	Stage 5 Generators:
	Stage 5 Generators:
	Stage 5 Generators:
	Stage 5 Generators:
	Stage 5 Generators:
	Stage 5 Generators:
		Fitting DropDuplicatesFeatureGenerator...
		Fitting DropDuplicatesFeatureGenerator...
		Fitting DropDuplicatesFeatureGenerator...
		Fitting DropDuplicatesFeatureGenerator...
		Fitting DropDuplicatesFeatureGenerator...
		Fitting DropDuplicatesFeatureGenerator...
		Fitting DropDuplicatesFeatureGenerator...
		Fitting DropDuplicatesFeatureGenerator...
	Types of features in original data (raw dtype, special dtypes):
	Types of features in original data (raw dtype, special dtypes):
	Types of features in original data (raw dtype, special dtypes):
	Types of features in original data (raw dtype, special dtypes):
	Types of features in original data (raw dtype, special dtypes):
	Types of features in original data (raw dtype, special dtypes):
	Types of features in original data (raw dtype, special dtypes):
	Types of features in original data (raw dtype, special dtypes):
		('float', [])  : 1 | ['Temperature']
		('float', [])  : 1 | ['Temperature']
		('float', [])  : 1 | ['Temperature']
		('float', [])  : 1 | ['Temperature']
		('float', [])  : 1 | ['Temperature']
		('float', [])  : 1 | ['Temperature']
		('float', [])  : 1 | ['Temperature']
		('float', [])  : 1 | ['Temperature']
		('int', [])    : 1 | ['Hour']
		('int', [])    : 1 | ['Hour']
		('int', [])    : 1 | ['Hour']
		('int', [])    : 1 | ['Hour']
		('int', [])    : 1 | ['Hour']
		('int', [])    : 1 | ['Hour']
		('int', [])    : 1 | ['Hour']
		('int', [])    : 1 | ['Hour']
		('object', []) : 2 | ['TimeOfDay', 'DayOfTheWeek']
		('object', []) : 2 | ['TimeOfDay', 'DayOfTheWeek']
		('object', []) : 2 | ['TimeOfDay', 'DayOfTheWeek']
		('object', []) : 2 | ['TimeOfDay', 'DayOfTheWeek']
		('object', []) : 2 | ['TimeOfDay', 'DayOfTheWeek']
		('object', []) : 2 | ['TimeOfDay', 'DayOfTheWeek']
		('object', []) : 2 | ['TimeOfDay', 'DayOfTheWeek']
		('object', []) : 2 | ['TimeOfDay', 'DayOfTheWeek']
	Types of features in processed data (raw dtype, special dtypes):
	Types of features in processed data (raw dtype, special dtypes):
	Types of features in processed data (raw dtype, special dtypes):
	Types of features in processed data (raw dtype, special dtypes):
	Types of features in processed data (raw dtype, special dtypes):
	Types of features in processed data (raw dtype, special dtypes):
	Types of features in processed data (raw dtype, special dtypes):
	Types of features in processed data (raw dtype, special dtypes):
		('category', []) : 2 | ['TimeOfDay', 'DayOfTheWeek']
		('category', []) : 2 | ['TimeOfDay', 'DayOfTheWeek']
		('category', []) : 2 | ['TimeOfDay', 'DayOfTheWeek']
		('category', []) : 2 | ['TimeOfDay', 'DayOfTheWeek']
		('category', []) : 2 | ['TimeOfDay', 'DayOfTheWeek']
		('category', []) : 2 | ['TimeOfDay', 'DayOfTheWeek']
		('category', []) : 2 | ['TimeOfDay', 'DayOfTheWeek']
		('category', []) : 2 | ['TimeOfDay', 'DayOfTheWeek']
		('float', [])    : 1 | ['Temperature']
		('float', [])    : 1 | ['Temperature']
		('float', [])    : 1 | ['Temperature']
		('float', [])    : 1 | ['Temperature']
		('float', [])    : 1 | ['Temperature']
		('float', [])    : 1 | ['Temperature']
		('float', [])    : 1 | ['Temperature']
		('float', [])    : 1 | ['Temperature']
		('int', [])      : 1 | ['Hour']
		('int', [])      : 1 | ['Hour']
		('int', [])      : 1 | ['Hour']
		('int', [])      : 1 | ['Hour']
		('int', [])      : 1 | ['Hour']
		('int', [])      : 1 | ['Hour']
		('int', [])      : 1 | ['Hour']
		('int', [])      : 1 | ['Hour']
	0.0s = Fit runtime
	0.0s = Fit runtime
	0.0s = Fit runtime
	0.0s = Fit runtime
	0.0s = Fit runtime
	0.0s = Fit runtime
	0.0s = Fit runtime
	0.0s = Fit runtime
	4 features in original data used to generate 4 features in processed data.
	4 features in original data used to generate 4 features in processed data.
	4 features in original data used to generate 4 features in processed data.
	4 features in original data used to generate 4 features in processed data.
	4 features in original data used to generate 4 features in processed data.
	4 features in original data used to generate 4 features in processed data.
	4 features in original data used to generate 4 features in processed data.
	4 features in original data used to generate 4 features in processed data.
	Train Data (Processed) Memory Usage: 0.11 MB (0.0% of available memory)
	Train Data (Processed) Memory Usage: 0.11 MB (0.0% of available memory)
	Train Data (Processed) Memory Usage: 0.11 MB (0.0% of available memory)
	Train Data (Processed) Memory Usage: 0.11 MB (0.0% of available memory)
	Train Data (Processed) Memory Usage: 0.11 MB (0.0% of available memory)
	Train Data (Processed) Memory Usage: 0.11 MB (0.0% of available memory)
	Train Data (Processed) Memory Usage: 0.11 MB (0.0% of available memory)
	Train Data (Processed) Memory Usage: 0.11 MB (0.0% of available memory)
Data preprocessing and feature engineering runtime = 0.07s ...
Data preprocessing and feature engineering runtime = 0.07s ...
Data preprocessing and feature engineering runtime = 0.07s ...
Data preprocessing and feature engineering runtime = 0.07s ...
Data preprocessing and feature engineering runtime = 0.07s ...
Data preprocessing and feature engineering runtime = 0.07s ...
Data preprocessing and feature engineering runtime = 0.07s ...
Data preprocessing and feature engineering runtime = 0.07s ...
AutoGluon will gauge predictive performance using evaluation metric: 'mean_absolute_error'
AutoGluon will gauge predictive performance using evaluation metric: 'mean_absolute_error'
AutoGluon will gauge predictive performance using evaluation metric: 'mean_absolute_error'
AutoGluon will gauge predictive performance using evaluation metric: 'mean_absolute_error'
AutoGluon will gauge predictive performance using evaluation metric: 'mean_absolute_error'
AutoGluon will gauge predictive performance using evaluation metric: 'mean_absolute_error'
AutoGluon will gauge predictive performance using evaluation metric: 'mean_absolute_error'
AutoGluon will gauge predictive performance using evaluation metric: 'mean_absolute_error'
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	To change this, specify the eval_metric parameter of Predictor()
	To change this, specify the eval_metric parameter of Predictor()
	To change this, specify the eval_metric parameter of Predictor()
	To change this, specify the eval_metric parameter of Predictor()
	To change this, specify the eval_metric parameter of Predictor()
	To change this, specify the eval_metric parameter of Predictor()
	To change this, specify the eval_metric parameter of Predictor()
	To change this, specify the eval_metric parameter of Predictor()
User-specified model hyperparameters to be fit:
{
	'LR': [{}],
}
User-specified model hyperparameters to be fit:
{
	'LR': [{}],
}
User-specified model hyperparameters to be fit:
{
	'LR': [{}],
}
User-specified model hyperparameters to be fit:
{
	'LR': [{}],
}
User-specified model hyperparameters to be fit:
{
	'LR': [{}],
}
User-specified model hyperparameters to be fit:
{
	'LR': [{}],
}
User-specified model hyperparameters to be fit:
{
	'LR': [{}],
}
User-specified model hyperparameters to be fit:
{
	'LR': [{}],
}
Fitting 1 L1 models, fit_strategy="sequential" ...
Fitting 1 L1 models, fit_strategy="sequential" ...
Fitting 1 L1 models, fit_strategy="sequential" ...
Fitting 1 L1 models, fit_strategy="sequential" ...
Fitting 1 L1 models, fit_strategy="sequential" ...
Fitting 1 L1 models, fit_strategy="sequential" ...
Fitting 1 L1 models, fit_strategy="sequential" ...
Fitting 1 L1 models, fit_strategy="sequential" ...
Fitting model: LinearModel ... Training model for up to 299.93s of the 299.93s of remaining time.
Fitting model: LinearModel ... Training model for up to 299.93s of the 299.93s of remaining time.
Fitting model: LinearModel ... Training model for up to 299.93s of the 299.93s of remaining time.
Fitting model: LinearModel ... Training model for up to 299.93s of the 299.93s of remaining time.
Fitting model: LinearModel ... Training model for up to 299.93s of the 299.93s of remaining time.
Fitting model: LinearModel ... Training model for up to 299.93s of the 299.93s of remaining time.
Fitting model: LinearModel ... Training model for up to 299.93s of the 299.93s of remaining time.
Fitting model: LinearModel ... Training model for up to 299.93s of the 299.93s of remaining time.
	-0.0124	 = Validation score   (-mean_absolute_error)
	-0.0124	 = Validation score   (-mean_absolute_error)
	-0.0124	 = Validation score   (-mean_absolute_error)
	-0.0124	 = Validation score   (-mean_absolute_error)
	-0.0124	 = Validation score   (-mean_absolute_error)
	-0.0124	 = Validation score   (-mean_absolute_error)
	-0.0124	 = Validation score   (-mean_absolute_error)
	-0.0124	 = Validation score   (-mean_absolute_error)
	0.02s	 = Training   runtime
	0.02s	 = Training   runtime
	0.02s	 = Training   runtime
	0.02s	 = Training   runtime
	0.02s	 = Training   runtime
	0.02s	 = Training   runtime
	0.02s	 = Training   runtime
	0.02s	 = Training   runtime
	0.0s	 = Validation runtime
	0.0s	 = Validation runtime
	0.0s	 = Validation runtime
	0.0s	 = Validation runtime
	0.0s	 = Validation runtime
	0.0s	 = Validation runtime
	0.0s	 = Validation runtime
	0.0s	 = Validation runtime
Fitting model: WeightedEnsemble_L2 ... Training model for up to 299.93s of the 299.90s of remaining time.
Fitting model: WeightedEnsemble_L2 ... Training model for up to 299.93s of the 299.90s of remaining time.
Fitting model: WeightedEnsemble_L2 ... Training model for up to 299.93s of the 299.90s of remaining time.
Fitting model: WeightedEnsemble_L2 ... Training model for up to 299.93s of the 299.90s of remaining time.
Fitting model: WeightedEnsemble_L2 ... Training model for up to 299.93s of the 299.90s of remaining time.
Fitting model: WeightedEnsemble_L2 ... Training model for up to 299.93s of the 299.90s of remaining time.
Fitting model: WeightedEnsemble_L2 ... Training model for up to 299.93s of the 299.90s of remaining time.
Fitting model: WeightedEnsemble_L2 ... Training model for up to 299.93s of the 299.90s of remaining time.
	Ensemble Weights: {'LinearModel': 1.0}
	Ensemble Weights: {'LinearModel': 1.0}
	Ensemble Weights: {'LinearModel': 1.0}
	Ensemble Weights: {'LinearModel': 1.0}
	Ensemble Weights: {'LinearModel': 1.0}
	Ensemble Weights: {'LinearModel': 1.0}
	Ensemble Weights: {'LinearModel': 1.0}
	Ensemble Weights: {'LinearModel': 1.0}
	-0.0124	 = Validation score   (-mean_absolute_error)
	-0.0124	 = Validation score   (-mean_absolute_error)
	-0.0124	 = Validation score   (-mean_absolute_error)
	-0.0124	 = Validation score   (-mean_absolute_error)
	-0.0124	 = Validation score   (-mean_absolute_error)
	-0.0124	 = Validation score   (-mean_absolute_error)
	-0.0124	 = Validation score   (-mean_absolute_error)
	-0.0124	 = Validation score   (-mean_absolute_error)
	0.0s	 = Training   runtime
	0.0s	 = Training   runtime
	0.0s	 = Training   runtime
	0.0s	 = Training   runtime
	0.0s	 = Training   runtime
	0.0s	 = Training   runtime
	0.0s	 = Training   runtime
	0.0s	 = Training   runtime
	0.0s	 = Validation runtime
	0.0s	 = Validation runtime
	0.0s	 = Validation runtime
	0.0s	 = Validation runtime
	0.0s	 = Validation runtime
	0.0s	 = Validation runtime
	0.0s	 = Validation runtime
	0.0s	 = Validation runtime
AutoGluon training complete, total runtime = 0.12s ... Best model: WeightedEnsemble_L2 | Estimated inference throughput: 8002.5 rows/s (24 batch size)
AutoGluon training complete, total runtime = 0.12s ... Best model: WeightedEnsemble_L2 | Estimated inference throughput: 8002.5 rows/s (24 batch size)
AutoGluon training complete, total runtime = 0.12s ... Best model: WeightedEnsemble_L2 | Estimated inference throughput: 8002.5 rows/s (24 batch size)
AutoGluon training complete, total runtime = 0.12s ... Best model: WeightedEnsemble_L2 | Estimated inference throughput: 8002.5 rows/s (24 batch size)
AutoGluon training complete, total runtime = 0.12s ... Best model: WeightedEnsemble_L2 | Estimated inference throughput: 8002.5 rows/s (24 batch size)
AutoGluon training complete, total runtime = 0.12s ... Best model: WeightedEnsemble_L2 | Estimated inference throughput: 8002.5 rows/s (24 batch size)
AutoGluon training complete, total runtime = 0.12s ... Best model: WeightedEnsemble_L2 | Estimated inference throughput: 8002.5 rows/s (24 batch size)
AutoGluon training complete, total runtime = 0.12s ... Best model: WeightedEnsemble_L2 | Estimated inference throughput: 8002.5 rows/s (24 batch size)
TabularPredictor saved. To load, use: predictor = TabularPredictor.load("D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo")
TabularPredictor saved. To load, use: predictor = TabularPredictor.load("D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo")
TabularPredictor saved. To load, use: predictor = TabularPredictor.load("D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo")
TabularPredictor saved. To load, use: predictor = TabularPredictor.load("D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo")
TabularPredictor saved. To load, use: predictor = TabularPredictor.load("D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo")
TabularPredictor saved. To load, use: predictor = TabularPredictor.load("D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo")
TabularPredictor saved. To load, use: predictor = TabularPredictor.load("D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo")
TabularPredictor saved. To load, use: predictor = TabularPredictor.load("D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo")
TabularPredictor saved. To load, use: predictor = TabularPredictor.load("D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo")
TabularPredictor saved. To load, use: predictor = TabularPredictor.load("D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo")
TabularPredictor saved. To load, use: predictor = TabularPredictor.load("D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo")
TabularPredictor saved. To load, use: predictor = TabularPredictor.load("D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo")
TabularPredictor saved. To load, use: predictor = TabularPredictor.load("D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo")
TabularPredictor saved. To load, use: predictor = TabularPredictor.load("D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo")
TabularPredictor saved. To load, use: predictor = TabularPredictor.load("D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo")
TabularPredictor saved. To load, use: predictor = TabularPredictor.load("D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo")
Loading predictor from path D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo
Loading predictor from path D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo
Loading predictor from path D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo
Loading predictor from path D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo
Loading predictor from path D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo
Loading predictor from path D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo
Loading predictor from path D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo
Loading predictor from path D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo
Loading predictor from path D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo
Loading predictor from path D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo
Loading predictor from path D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo
Loading predictor from path D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo
Loading predictor from path D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo
Loading predictor from path D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo
Loading predictor from path D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo
Loading predictor from path D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo
Warning: path already exists! This predictor may overwrite an existing predictor! path="predicts/ARIMA/modelo"
Warning: path already exists! This predictor may overwrite an existing predictor! path="predicts/ARIMA/modelo"
Warning: path already exists! This predictor may overwrite an existing predictor! path="predicts/ARIMA/modelo"
Warning: path already exists! This predictor may overwrite an existing predictor! path="predicts/ARIMA/modelo"
Warning: path already exists! This predictor may overwrite an existing predictor! path="predicts/ARIMA/modelo"
Warning: path already exists! This predictor may overwrite an existing predictor! path="predicts/ARIMA/modelo"
Warning: path already exists! This predictor may overwrite an existing predictor! path="predicts/ARIMA/modelo"
Warning: path already exists! This predictor may overwrite an existing predictor! path="predicts/ARIMA/modelo"
Beginning AutoGluon training... Time limit = 300s
Beginning AutoGluon training... Time limit = 300s
Beginning AutoGluon training... Time limit = 300s
Beginning AutoGluon training... Time limit = 300s
Beginning AutoGluon training... Time limit = 300s
Beginning AutoGluon training... Time limit = 300s
Beginning AutoGluon training... Time limit = 300s
Beginning AutoGluon training... Time limit = 300s
AutoGluon will save models to 'D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\ARIMA\modelo'
AutoGluon will save models to 'D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\ARIMA\modelo'
AutoGluon will save models to 'D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\ARIMA\modelo'
AutoGluon will save models to 'D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\ARIMA\modelo'
AutoGluon will save models to 'D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\ARIMA\modelo'
AutoGluon will save models to 'D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\ARIMA\modelo'
AutoGluon will save models to 'D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\ARIMA\modelo'
AutoGluon will save models to 'D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\ARIMA\modelo'
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
GPU Count:          0
Memory Avail:       2.09 GB / 15.93 GB (13.1%)
Disk Space Avail:   701.42 GB / 931.46 GB (75.3%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
GPU Count:          0
Memory Avail:       2.09 GB / 15.93 GB (13.1%)
Disk Space Avail:   701.42 GB / 931.46 GB (75.3%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
GPU Count:          0
Memory Avail:       2.09 GB / 15.93 GB (13.1%)
Disk Space Avail:   701.42 GB / 931.46 GB (75.3%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
GPU Count:          0
Memory Avail:       2.09 GB / 15.93 GB (13.1%)
Disk Space Avail:   701.42 GB / 931.46 GB (75.3%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
GPU Count:          0
Memory Avail:       2.09 GB / 15.93 GB (13.1%)
Disk Space Avail:   701.42 GB / 931.46 GB (75.3%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
GPU Count:          0
Memory Avail:       2.09 GB / 15.93 GB (13.1%)
Disk Space Avail:   701.42 GB / 931.46 GB (75.3%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
GPU Count:          0
Memory Avail:       2.09 GB / 15.93 GB (13.1%)
Disk Space Avail:   701.42 GB / 931.46 GB (75.3%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.9
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          12
GPU Count:          0
Memory Avail:       2.09 GB / 15.93 GB (13.1%)
Disk Space Avail:   701.42 GB / 931.46 GB (75.3%)
===================================================
Setting presets to: medium_quality
Setting presets to: medium_quality
Setting presets to: medium_quality
Setting presets to: medium_quality
Setting presets to: medium_quality
Setting presets to: medium_quality
Setting presets to: medium_quality
Setting presets to: medium_quality

Fitting with arguments:

Fitting with arguments:

Fitting with arguments:

Fitting with arguments:

Fitting with arguments:

Fitting with arguments:

Fitting with arguments:

Fitting with arguments:
{'enable_ensemble': True,
 'eval_metric': WQL,
 'freq': 'h',
 'hyperparameters': {'ARIMAModel': {'order': (1, 1, 1),
                                    'seasonal_order': (1, 0, 1, 24),
                                    'target_scaler': 'standard'}},
 'known_covariates_names': [],
 'num_val_windows': 1,
 'prediction_length': 24,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': True,
 'target': 'EnergyNormalized',
 'time_limit': 300,
 'verbosity': 2}

{'enable_ensemble': True,
 'eval_metric': WQL,
 'freq': 'h',
 'hyperparameters': {'ARIMAModel': {'order': (1, 1, 1),
                                    'seasonal_order': (1, 0, 1, 24),
                                    'target_scaler': 'standard'}},
 'known_covariates_names': [],
 'num_val_windows': 1,
 'prediction_length': 24,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': True,
 'target': 'EnergyNormalized',
 'time_limit': 300,
 'verbosity': 2}

{'enable_ensemble': True,
 'eval_metric': WQL,
 'freq': 'h',
 'hyperparameters': {'ARIMAModel': {'order': (1, 1, 1),
                                    'seasonal_order': (1, 0, 1, 24),
                                    'target_scaler': 'standard'}},
 'known_covariates_names': [],
 'num_val_windows': 1,
 'prediction_length': 24,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': True,
 'target': 'EnergyNormalized',
 'time_limit': 300,
 'verbosity': 2}

{'enable_ensemble': True,
 'eval_metric': WQL,
 'freq': 'h',
 'hyperparameters': {'ARIMAModel': {'order': (1, 1, 1),
                                    'seasonal_order': (1, 0, 1, 24),
                                    'target_scaler': 'standard'}},
 'known_covariates_names': [],
 'num_val_windows': 1,
 'prediction_length': 24,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': True,
 'target': 'EnergyNormalized',
 'time_limit': 300,
 'verbosity': 2}

{'enable_ensemble': True,
 'eval_metric': WQL,
 'freq': 'h',
 'hyperparameters': {'ARIMAModel': {'order': (1, 1, 1),
                                    'seasonal_order': (1, 0, 1, 24),
                                    'target_scaler': 'standard'}},
 'known_covariates_names': [],
 'num_val_windows': 1,
 'prediction_length': 24,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': True,
 'target': 'EnergyNormalized',
 'time_limit': 300,
 'verbosity': 2}

{'enable_ensemble': True,
 'eval_metric': WQL,
 'freq': 'h',
 'hyperparameters': {'ARIMAModel': {'order': (1, 1, 1),
                                    'seasonal_order': (1, 0, 1, 24),
                                    'target_scaler': 'standard'}},
 'known_covariates_names': [],
 'num_val_windows': 1,
 'prediction_length': 24,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': True,
 'target': 'EnergyNormalized',
 'time_limit': 300,
 'verbosity': 2}

{'enable_ensemble': True,
 'eval_metric': WQL,
 'freq': 'h',
 'hyperparameters': {'ARIMAModel': {'order': (1, 1, 1),
                                    'seasonal_order': (1, 0, 1, 24),
                                    'target_scaler': 'standard'}},
 'known_covariates_names': [],
 'num_val_windows': 1,
 'prediction_length': 24,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': True,
 'target': 'EnergyNormalized',
 'time_limit': 300,
 'verbosity': 2}

{'enable_ensemble': True,
 'eval_metric': WQL,
 'freq': 'h',
 'hyperparameters': {'ARIMAModel': {'order': (1, 1, 1),
                                    'seasonal_order': (1, 0, 1, 24),
                                    'target_scaler': 'standard'}},
 'known_covariates_names': [],
 'num_val_windows': 1,
 'prediction_length': 24,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': True,
 'target': 'EnergyNormalized',
 'time_limit': 300,
 'verbosity': 2}

Provided train_data has 7992 rows, 1 time series. Median time series length is 7992 (min=7992, max=7992). 
Provided train_data has 7992 rows, 1 time series. Median time series length is 7992 (min=7992, max=7992). 
Provided train_data has 7992 rows, 1 time series. Median time series length is 7992 (min=7992, max=7992). 
Provided train_data has 7992 rows, 1 time series. Median time series length is 7992 (min=7992, max=7992). 
Provided train_data has 7992 rows, 1 time series. Median time series length is 7992 (min=7992, max=7992). 
Provided train_data has 7992 rows, 1 time series. Median time series length is 7992 (min=7992, max=7992). 
Provided train_data has 7992 rows, 1 time series. Median time series length is 7992 (min=7992, max=7992). 
Provided train_data has 7992 rows, 1 time series. Median time series length is 7992 (min=7992, max=7992). 
Provided tuning_data has 8016 rows, 1 time series. Median time series length is 8016 (min=8016, max=8016). 
Provided tuning_data has 8016 rows, 1 time series. Median time series length is 8016 (min=8016, max=8016). 
Provided tuning_data has 8016 rows, 1 time series. Median time series length is 8016 (min=8016, max=8016). 
Provided tuning_data has 8016 rows, 1 time series. Median time series length is 8016 (min=8016, max=8016). 
Provided tuning_data has 8016 rows, 1 time series. Median time series length is 8016 (min=8016, max=8016). 
Provided tuning_data has 8016 rows, 1 time series. Median time series length is 8016 (min=8016, max=8016). 
Provided tuning_data has 8016 rows, 1 time series. Median time series length is 8016 (min=8016, max=8016). 
Provided tuning_data has 8016 rows, 1 time series. Median time series length is 8016 (min=8016, max=8016). 
	Setting num_val_windows = 0 (disabling backtesting on train_data) because tuning_data is provided.
	Setting num_val_windows = 0 (disabling backtesting on train_data) because tuning_data is provided.
	Setting num_val_windows = 0 (disabling backtesting on train_data) because tuning_data is provided.
	Setting num_val_windows = 0 (disabling backtesting on train_data) because tuning_data is provided.
	Setting num_val_windows = 0 (disabling backtesting on train_data) because tuning_data is provided.
	Setting num_val_windows = 0 (disabling backtesting on train_data) because tuning_data is provided.
	Setting num_val_windows = 0 (disabling backtesting on train_data) because tuning_data is provided.
	Setting num_val_windows = 0 (disabling backtesting on train_data) because tuning_data is provided.

Provided data contains following columns:

Provided data contains following columns:

Provided data contains following columns:

Provided data contains following columns:

Provided data contains following columns:

Provided data contains following columns:

Provided data contains following columns:

Provided data contains following columns:
	target: 'EnergyNormalized'
	target: 'EnergyNormalized'
	target: 'EnergyNormalized'
	target: 'EnergyNormalized'
	target: 'EnergyNormalized'
	target: 'EnergyNormalized'
	target: 'EnergyNormalized'
	target: 'EnergyNormalized'
	past_covariates:
	past_covariates:
	past_covariates:
	past_covariates:
	past_covariates:
	past_covariates:
	past_covariates:
	past_covariates:
		categorical:        ['TimeOfDay', 'DayOfTheWeek', 'Season']
		categorical:        ['TimeOfDay', 'DayOfTheWeek', 'Season']
		categorical:        ['TimeOfDay', 'DayOfTheWeek', 'Season']
		categorical:        ['TimeOfDay', 'DayOfTheWeek', 'Season']
		categorical:        ['TimeOfDay', 'DayOfTheWeek', 'Season']
		categorical:        ['TimeOfDay', 'DayOfTheWeek', 'Season']
		categorical:        ['TimeOfDay', 'DayOfTheWeek', 'Season']
		categorical:        ['TimeOfDay', 'DayOfTheWeek', 'Season']
		continuous (float): ['Hour', 'ActiveEnergy(kWh)', 'Day', 'Month', 'Year', 'IsWeekend', ...]
		continuous (float): ['Hour', 'ActiveEnergy(kWh)', 'Day', 'Month', 'Year', 'IsWeekend', ...]
		continuous (float): ['Hour', 'ActiveEnergy(kWh)', 'Day', 'Month', 'Year', 'IsWeekend', ...]
		continuous (float): ['Hour', 'ActiveEnergy(kWh)', 'Day', 'Month', 'Year', 'IsWeekend', ...]
		continuous (float): ['Hour', 'ActiveEnergy(kWh)', 'Day', 'Month', 'Year', 'IsWeekend', ...]
		continuous (float): ['Hour', 'ActiveEnergy(kWh)', 'Day', 'Month', 'Year', 'IsWeekend', ...]
		continuous (float): ['Hour', 'ActiveEnergy(kWh)', 'Day', 'Month', 'Year', 'IsWeekend', ...]
		continuous (float): ['Hour', 'ActiveEnergy(kWh)', 'Day', 'Month', 'Year', 'IsWeekend', ...]
	static_features:
	static_features:
	static_features:
	static_features:
	static_features:
	static_features:
	static_features:
	static_features:
		categorical:        []
		categorical:        []
		categorical:        []
		categorical:        []
		categorical:        []
		categorical:        []
		categorical:        []
		categorical:        []
		continuous (float): ['PopulationDensity']
		continuous (float): ['PopulationDensity']
		continuous (float): ['PopulationDensity']
		continuous (float): ['PopulationDensity']
		continuous (float): ['PopulationDensity']
		continuous (float): ['PopulationDensity']
		continuous (float): ['PopulationDensity']
		continuous (float): ['PopulationDensity']

AutoGluon will ignore following non-numeric/non-informative columns:

AutoGluon will ignore following non-numeric/non-informative columns:

AutoGluon will ignore following non-numeric/non-informative columns:

AutoGluon will ignore following non-numeric/non-informative columns:

AutoGluon will ignore following non-numeric/non-informative columns:

AutoGluon will ignore following non-numeric/non-informative columns:

AutoGluon will ignore following non-numeric/non-informative columns:

AutoGluon will ignore following non-numeric/non-informative columns:
	ignored covariates:      ['Date']
	ignored covariates:      ['Date']
	ignored covariates:      ['Date']
	ignored covariates:      ['Date']
	ignored covariates:      ['Date']
	ignored covariates:      ['Date']
	ignored covariates:      ['Date']
	ignored covariates:      ['Date']

To learn how to fix incorrectly inferred types, please see documentation for TimeSeriesPredictor.fit

To learn how to fix incorrectly inferred types, please see documentation for TimeSeriesPredictor.fit

To learn how to fix incorrectly inferred types, please see documentation for TimeSeriesPredictor.fit

To learn how to fix incorrectly inferred types, please see documentation for TimeSeriesPredictor.fit

To learn how to fix incorrectly inferred types, please see documentation for TimeSeriesPredictor.fit

To learn how to fix incorrectly inferred types, please see documentation for TimeSeriesPredictor.fit

To learn how to fix incorrectly inferred types, please see documentation for TimeSeriesPredictor.fit

To learn how to fix incorrectly inferred types, please see documentation for TimeSeriesPredictor.fit

AutoGluon will gauge predictive performance using evaluation metric: 'WQL'

AutoGluon will gauge predictive performance using evaluation metric: 'WQL'

AutoGluon will gauge predictive performance using evaluation metric: 'WQL'

AutoGluon will gauge predictive performance using evaluation metric: 'WQL'

AutoGluon will gauge predictive performance using evaluation metric: 'WQL'

AutoGluon will gauge predictive performance using evaluation metric: 'WQL'

AutoGluon will gauge predictive performance using evaluation metric: 'WQL'

AutoGluon will gauge predictive performance using evaluation metric: 'WQL'
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
===================================================
===================================================
===================================================
===================================================
===================================================
===================================================
===================================================
===================================================

Starting training. Start time is 2025-04-23 12:52:26

Starting training. Start time is 2025-04-23 12:52:26

Starting training. Start time is 2025-04-23 12:52:26

Starting training. Start time is 2025-04-23 12:52:26

Starting training. Start time is 2025-04-23 12:52:26

Starting training. Start time is 2025-04-23 12:52:26

Starting training. Start time is 2025-04-23 12:52:26

Starting training. Start time is 2025-04-23 12:52:26
Models that will be trained: ['ARIMA']
Models that will be trained: ['ARIMA']
Models that will be trained: ['ARIMA']
Models that will be trained: ['ARIMA']
Models that will be trained: ['ARIMA']
Models that will be trained: ['ARIMA']
Models that will be trained: ['ARIMA']
Models that will be trained: ['ARIMA']
Training timeseries model ARIMA. Training for up to 299.9s of the 299.9s of remaining time.
Training timeseries model ARIMA. Training for up to 299.9s of the 299.9s of remaining time.
Training timeseries model ARIMA. Training for up to 299.9s of the 299.9s of remaining time.
Training timeseries model ARIMA. Training for up to 299.9s of the 299.9s of remaining time.
Training timeseries model ARIMA. Training for up to 299.9s of the 299.9s of remaining time.
Training timeseries model ARIMA. Training for up to 299.9s of the 299.9s of remaining time.
Training timeseries model ARIMA. Training for up to 299.9s of the 299.9s of remaining time.
Training timeseries model ARIMA. Training for up to 299.9s of the 299.9s of remaining time.
	0.01    s     = Training runtime
	0.01    s     = Training runtime
	0.01    s     = Training runtime
	0.01    s     = Training runtime
	0.01    s     = Training runtime
	0.01    s     = Training runtime
	0.01    s     = Training runtime
	0.01    s     = Training runtime
Training complete. Models trained: ['ARIMA']
Training complete. Models trained: ['ARIMA']
Training complete. Models trained: ['ARIMA']
Training complete. Models trained: ['ARIMA']
Training complete. Models trained: ['ARIMA']
Training complete. Models trained: ['ARIMA']
Training complete. Models trained: ['ARIMA']
Training complete. Models trained: ['ARIMA']
Total runtime: 0.04 s
Total runtime: 0.04 s
Total runtime: 0.04 s
Total runtime: 0.04 s
Total runtime: 0.04 s
Total runtime: 0.04 s
Total runtime: 0.04 s
Total runtime: 0.04 s
Best model: ARIMA
Best model: ARIMA
Best model: ARIMA
Best model: ARIMA
Best model: ARIMA
Best model: ARIMA
Best model: ARIMA
Best model: ARIMA
Loading predictor from path D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\ARIMA\modelo
Loading predictor from path D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\ARIMA\modelo
Loading predictor from path D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\ARIMA\modelo
Loading predictor from path D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\ARIMA\modelo
Loading predictor from path D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\ARIMA\modelo
Loading predictor from path D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\ARIMA\modelo
Loading predictor from path D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\ARIMA\modelo
Loading predictor from path D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\ARIMA\modelo
Model not specified in predict, will default to the model with the best validation score: ARIMA
Model not specified in predict, will default to the model with the best validation score: ARIMA
Model not specified in predict, will default to the model with the best validation score: ARIMA
Model not specified in predict, will default to the model with the best validation score: ARIMA
Model not specified in predict, will default to the model with the best validation score: ARIMA
Model not specified in predict, will default to the model with the best validation score: ARIMA
Model not specified in predict, will default to the model with the best validation score: ARIMA
Model not specified in predict, will default to the model with the best validation score: ARIMA
	Warning: ARIMA failed for 1 time series (100.0%). Fallback model SeasonalNaive was used for these time series.
	Warning: ARIMA failed for 1 time series (100.0%). Fallback model SeasonalNaive was used for these time series.
	Warning: ARIMA failed for 1 time series (100.0%). Fallback model SeasonalNaive was used for these time series.
	Warning: ARIMA failed for 1 time series (100.0%). Fallback model SeasonalNaive was used for these time series.
	Warning: ARIMA failed for 1 time series (100.0%). Fallback model SeasonalNaive was used for these time series.
	Warning: ARIMA failed for 1 time series (100.0%). Fallback model SeasonalNaive was used for these time series.
	Warning: ARIMA failed for 1 time series (100.0%). Fallback model SeasonalNaive was used for these time series.
	Warning: ARIMA failed for 1 time series (100.0%). Fallback model SeasonalNaive was used for these time series.
Model not specified in predict, will default to the model with the best validation score: ARIMA
Model not specified in predict, will default to the model with the best validation score: ARIMA
Model not specified in predict, will default to the model with the best validation score: ARIMA
Model not specified in predict, will default to the model with the best validation score: ARIMA
Model not specified in predict, will default to the model with the best validation score: ARIMA
Model not specified in predict, will default to the model with the best validation score: ARIMA
Model not specified in predict, will default to the model with the best validation score: ARIMA
Model not specified in predict, will default to the model with the best validation score: ARIMA
Loading predictor from path D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\XARIMA\modelo
Loading predictor from path D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\XARIMA\modelo
Loading predictor from path D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\XARIMA\modelo
Loading predictor from path D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\XARIMA\modelo
Loading predictor from path D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\XARIMA\modelo
Loading predictor from path D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\XARIMA\modelo
Loading predictor from path D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\XARIMA\modelo
Loading predictor from path D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\XARIMA\modelo
Loading predictor from path D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\XARIMA\modelo
Loading predictor from path D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\XARIMA\modelo
Loading predictor from path D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\XARIMA\modelo
Loading predictor from path D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\XARIMA\modelo
Loading predictor from path D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\XARIMA\modelo
Loading predictor from path D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\XARIMA\modelo
Loading predictor from path D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\XARIMA\modelo
Loading predictor from path D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\XARIMA\modelo
Model not specified in predict, will default to the model with the best validation score: ARIMA
Model not specified in predict, will default to the model with the best validation score: ARIMA
Model not specified in predict, will default to the model with the best validation score: ARIMA
Model not specified in predict, will default to the model with the best validation score: ARIMA
Model not specified in predict, will default to the model with the best validation score: ARIMA
Model not specified in predict, will default to the model with the best validation score: ARIMA
Model not specified in predict, will default to the model with the best validation score: ARIMA
Model not specified in predict, will default to the model with the best validation score: ARIMA
Model not specified in predict, will default to the model with the best validation score: ARIMA
Model not specified in predict, will default to the model with the best validation score: ARIMA
Model not specified in predict, will default to the model with the best validation score: ARIMA
Model not specified in predict, will default to the model with the best validation score: ARIMA
Model not specified in predict, will default to the model with the best validation score: ARIMA
Model not specified in predict, will default to the model with the best validation score: ARIMA
Model not specified in predict, will default to the model with the best validation score: ARIMA
Model not specified in predict, will default to the model with the best validation score: ARIMA
Beginning AutoGluon training... Time limit = 300s
AutoGluon will save models to 'D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\XARIMA\modelo'
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.12.10
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          8
GPU Count:          0
Memory Avail:       0.96 GB / 7.88 GB (12.2%)
Disk Space Avail:   886.20 GB / 931.51 GB (95.1%)
===================================================
Setting presets to: medium_quality

Fitting with arguments:
{'enable_ensemble': True,
 'eval_metric': WQL,
 'freq': 'h',
 'hyperparameters': {'ARIMAModel': {'covariate_regressor': 'CAT',
                                    'target_scaler': 'standard'}},
 'known_covariates_names': ['Hour', 'TimeOfDay', 'Temperature', 'DayOfTheWeek'],
 'num_val_windows': 1,
 'prediction_length': 24,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'EnergyNormalized',
 'time_limit': 300,
 'verbosity': 2}

Provided train_data has 7992 rows, 1 time series. Median time series length is 7992 (min=7992, max=7992). 
Provided tuning_data has 8016 rows, 1 time series. Median time series length is 8016 (min=8016, max=8016). 
	Setting num_val_windows = 0 (disabling backtesting on train_data) because tuning_data is provided.

Provided data contains following columns:
	target: 'EnergyNormalized'
	known_covariates:
		categorical:        ['TimeOfDay', 'DayOfTheWeek']
		continuous (float): ['Hour', 'Temperature']
	past_covariates:
		categorical:        ['Season']
		continuous (float): ['ActiveEnergy(kWh)', 'Day', 'Month', 'Year', 'IsWeekend', 'IsHoliday', ...]
	static_features:
		categorical:        []
		continuous (float): ['PopulationDensity']

AutoGluon will ignore following non-numeric/non-informative columns:
	ignored covariates:      ['Date']

To learn how to fix incorrectly inferred types, please see documentation for TimeSeriesPredictor.fit

AutoGluon will gauge predictive performance using evaluation metric: 'WQL'
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
===================================================

Starting training. Start time is 2025-04-26 16:45:15
Models that will be trained: ['ARIMA']
Training timeseries model ARIMA. Training for up to 299.8s of the 299.8s of remaining time.
	-0.0852       = Validation score (-WQL)
	33.94   s     = Training runtime
	8.35    s     = Validation (prediction) runtime
Not fitting ensemble as only 1 model was trained.
Training complete. Models trained: ['ARIMA']
Total runtime: 42.52 s
Best model: ARIMA
Best model score: -0.0852
Model not specified in predict, will default to the model with the best validation score: ARIMA
Model not specified in predict, will default to the model with the best validation score: ARIMA
Warning: path already exists! This predictor may overwrite an existing predictor! path="predicts/linearRegression/modelo"
Preset alias specified: 'medium' maps to 'medium_quality'.
Verbosity: 2 (Standard Logging)
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.12.10
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          8
Memory Avail:       0.83 GB / 7.88 GB (10.5%)
Disk Space Avail:   886.20 GB / 931.51 GB (95.1%)
===================================================
Presets specified: ['medium']
Beginning AutoGluon training ... Time limit = 300s
AutoGluon will save models to "D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo"
Train Data Rows:    7992
Train Data Columns: 4
Tuning Data Rows:    24
Tuning Data Columns: 4
Label Column:       EnergyNormalized
AutoGluon infers your prediction problem is: 'regression' (because dtype of label-column == float and many unique label-values observed).
	Label info (max, min, mean, stddev): (0.1517218738549846, 0.005890280091559903, 0.06812, 0.02939)
	If 'regression' is not the correct problem_type, please manually specify the problem_type parameter during Predictor init (You may specify problem_type as one of: ['binary', 'multiclass', 'regression', 'quantile'])
Problem Type:       regression
Preprocessing data ...
Using Feature Generators to preprocess the data ...
Fitting AutoMLPipelineFeatureGenerator...
	Available Memory:                    817.20 MB
	Train Data (Original)  Memory Usage: 0.99 MB (0.1% of available memory)
	Inferring data type of each feature based on column values. Set feature_metadata_in to manually specify special dtypes of the features.
	Stage 1 Generators:
		Fitting AsTypeFeatureGenerator...
	Stage 2 Generators:
		Fitting FillNaFeatureGenerator...
	Stage 3 Generators:
		Fitting IdentityFeatureGenerator...
		Fitting CategoryFeatureGenerator...
			Fitting CategoryMemoryMinimizeFeatureGenerator...
	Stage 4 Generators:
		Fitting DropUniqueFeatureGenerator...
	Stage 5 Generators:
		Fitting DropDuplicatesFeatureGenerator...
	Types of features in original data (raw dtype, special dtypes):
		('float', [])  : 1 | ['Temperature']
		('int', [])    : 1 | ['Hour']
		('object', []) : 2 | ['TimeOfDay', 'DayOfTheWeek']
	Types of features in processed data (raw dtype, special dtypes):
		('category', []) : 2 | ['TimeOfDay', 'DayOfTheWeek']
		('float', [])    : 1 | ['Temperature']
		('int', [])      : 1 | ['Hour']
	0.2s = Fit runtime
	4 features in original data used to generate 4 features in processed data.
	Train Data (Processed) Memory Usage: 0.11 MB (0.0% of available memory)
Data preprocessing and feature engineering runtime = 0.3s ...
AutoGluon will gauge predictive performance using evaluation metric: 'mean_absolute_error'
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	To change this, specify the eval_metric parameter of Predictor()
User-specified model hyperparameters to be fit:
{
	'LR': [{}],
}
Fitting 1 L1 models, fit_strategy="sequential" ...
Fitting model: LinearModel ... Training model for up to 299.70s of the 299.69s of remaining time.
	-0.0124	 = Validation score   (-mean_absolute_error)
	0.21s	 = Training   runtime
	0.02s	 = Validation runtime
Fitting model: WeightedEnsemble_L2 ... Training model for up to 299.70s of the 299.40s of remaining time.
	Ensemble Weights: {'LinearModel': 1.0}
	-0.0124	 = Validation score   (-mean_absolute_error)
	0.02s	 = Training   runtime
	0.0s	 = Validation runtime
AutoGluon training complete, total runtime = 0.7s ... Best model: WeightedEnsemble_L2 | Estimated inference throughput: 1411.7 rows/s (24 batch size)
TabularPredictor saved. To load, use: predictor = TabularPredictor.load("D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo")
TabularPredictor saved. To load, use: predictor = TabularPredictor.load("D:\githubProjects\previsao-do-consumo-energetico-com-ml\predicts\linearRegression\modelo")
